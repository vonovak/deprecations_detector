{
  "totalCount": 84,
  "matches": [
    {
      "repository": "oblador/react-native-vector-icons",
      "file": "packages/common/android/src/main/java/com/reactnativevectoricons/common/VectorIconsPackage.kt",
      "url": "https://github.com/oblador/react-native-vector-icons/blob/d43de84ddbcea93d96b021a6cf0d5009d795624f/packages/common/android/src/main/java/com/reactnativevectoricons/common/VectorIconsPackage.kt",
      "fileContent": "package com.reactnativevectoricons.common\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass VectorIconsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == VectorIconsModule.NAME) {\n      VectorIconsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[VectorIconsModule.NAME] = ReactModuleInfo(\n        VectorIconsModule.NAME, // name\n        VectorIconsModule.NAME, // className\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false, // hasConstants NOTE: This is deprecated but we need it to keep compatability with RN <= 0.72\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 17481,
      "lastCommitDate": "2024-12-15T00:09:36Z"
    },
    {
      "repository": "zoontek/react-native-permissions",
      "file": "android/src/main/java/com/zoontek/rnpermissions/RNPermissionsPackage.kt",
      "url": "https://github.com/zoontek/react-native-permissions/blob/852524c31fef3f181855e66fcc12f7b4013daf5b/android/src/main/java/com/zoontek/rnpermissions/RNPermissionsPackage.kt",
      "fileContent": "package com.zoontek.rnpermissions\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNPermissionsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      RNPermissionsModuleImpl.NAME -> RNPermissionsModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      val moduleInfo = ReactModuleInfo(\n        RNPermissionsModuleImpl.NAME,\n        RNPermissionsModuleImpl.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n\n      moduleInfos[RNPermissionsModuleImpl.NAME] = moduleInfo\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 4127,
      "lastCommitDate": "2024-11-28T16:16:28Z"
    },
    {
      "repository": "zoontek/react-native-bootsplash",
      "file": "android/src/main/java/com/zoontek/rnbootsplash/RNBootSplashPackage.kt",
      "url": "https://github.com/zoontek/react-native-bootsplash/blob/9dab2dadd6164d6c332399bbd6a136ef0740a96b/android/src/main/java/com/zoontek/rnbootsplash/RNBootSplashPackage.kt",
      "fileContent": "package com.zoontek.rnbootsplash\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNBootSplashPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      RNBootSplashModuleImpl.NAME -> RNBootSplashModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      val moduleInfo = ReactModuleInfo(\n        RNBootSplashModuleImpl.NAME,\n        RNBootSplashModuleImpl.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n\n      moduleInfos[RNBootSplashModuleImpl.NAME] = moduleInfo\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 3768,
      "lastCommitDate": "2024-11-28T09:15:25Z"
    },
    {
      "repository": "software-mansion/react-native-screens",
      "file": "android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt",
      "url": "https://github.com/software-mansion/react-native-screens/blob/20b7e83782cd5f79ddd0d61dadc13eeb4db4b258/android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt",
      "fileContent": "package com.swmansion.rnscreens\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport com.swmansion.rnscreens.utils.ScreenDummyLayoutHelper\n\n@ReactModuleList(\n    nativeModules = [\n        ScreensModule::class,\n    ],\n)\nclass RNScreensPackage : TurboReactPackage() {\n    // We just retain it here. This object helps us tackle jumping content when using native header.\n    // See: https://github.com/software-mansion/react-native-screens/pull/2169\n    private var screenDummyLayoutHelper: ScreenDummyLayoutHelper? = null\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        // This is the earliest we lay our hands on react context.\n        // Moreover this is called before FabricUIManger has finished initializing, not to mention\n        // installing its C++ bindings - so we are safe in terms of creating this helper\n        // before RN starts creating shadow nodes.\n        // See https://github.com/software-mansion/react-native-screens/pull/2169\n        if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n            screenDummyLayoutHelper = ScreenDummyLayoutHelper(reactContext)\n        }\n\n        // Proxy needs to register for lifecycle events in order to unregister itself\n        // on activity restarts.\n        InsetsObserverProxy.registerWithContext(reactContext)\n\n        return listOf<ViewManager<*, *>>(\n            ScreenContainerViewManager(),\n            ScreenViewManager(),\n            ModalScreenViewManager(),\n            ScreenStackViewManager(),\n            ScreenStackHeaderConfigViewManager(),\n            ScreenStackHeaderSubviewManager(),\n            SearchBarManager(),\n            ScreenFooterManager(),\n            ScreenContentWrapperManager(),\n        )\n    }\n\n    override fun getModule(\n        s: String,\n        reactApplicationContext: ReactApplicationContext,\n    ): NativeModule? {\n        when (s) {\n            ScreensModule.NAME -> return ScreensModule(reactApplicationContext)\n        }\n        return null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n        ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[ScreensModule.NAME] =\n                ReactModuleInfo(\n                    ScreensModule.NAME,\n                    ScreensModule.NAME,\n                    false, // canOverrideExistingModule\n                    false, // needsEagerInit\n                    true, // hasConstants\n                    false, // isCxxModule\n                    isTurboModule,\n                )\n            moduleInfos\n        }\n\n    companion object {\n        const val TAG = \"RNScreensPackage\"\n    }\n}\n",
      "stars": 3129,
      "lastCommitDate": "2024-12-18T14:08:43Z"
    },
    {
      "repository": "teslamotors/react-native-camera-kit",
      "file": "android/src/main/java/com/rncamerakit/RNCameraKitPackage.kt",
      "url": "https://github.com/teslamotors/react-native-camera-kit/blob/55bdd972f5eab95c8a61c0d0194ed66bfdce7aeb/android/src/main/java/com/rncamerakit/RNCameraKitPackage.kt",
      "fileContent": "package com.rncamerakit\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport java.util.*\n\n@ReactModuleList(nativeModules = [RNCameraKitModule::class])\nclass RNCameraKitPackage : TurboReactPackage() {\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        val viewManagers: MutableList<ViewManager<*, *>> = ArrayList()\n        viewManagers.add(CKCameraManager())\n        return viewManagers\n    }\n\n    override fun getModule(s: String, reactApplicationContext: ReactApplicationContext): NativeModule? {\n        when (s) {\n            RNCameraKitModule.REACT_CLASS -> return RNCameraKitModule(reactApplicationContext)\n        }\n        return null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[RNCameraKitModule.REACT_CLASS] = ReactModuleInfo(\n                RNCameraKitModule.REACT_CLASS,\n                RNCameraKitModule.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 2499,
      "lastCommitDate": "2024-11-14T23:27:20Z"
    },
    {
      "repository": "rnmapbox/maps",
      "file": "android/src/main/java/com/rnmapbox/rnmbx/RNMBXPackage.kt",
      "url": "https://github.com/rnmapbox/maps/blob/fa80ae549a65d8473cd731f79f57a65fcc9c9fbc/android/src/main/java/com/rnmapbox/rnmbx/RNMBXPackage.kt",
      "fileContent": "package com.rnmapbox.rnmbx\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.JavaScriptModule\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport com.rnmapbox.rnmbx.components.annotation.RNMBXCalloutManager\nimport com.rnmapbox.rnmbx.components.annotation.RNMBXMarkerViewContentManager\nimport com.rnmapbox.rnmbx.components.annotation.RNMBXMarkerViewManager\nimport com.rnmapbox.rnmbx.components.annotation.RNMBXPointAnnotationManager\nimport com.rnmapbox.rnmbx.components.annotation.RNMBXPointAnnotationModule\nimport com.rnmapbox.rnmbx.components.camera.RNMBXCameraManager\nimport com.rnmapbox.rnmbx.components.camera.RNMBXCameraModule\nimport com.rnmapbox.rnmbx.components.camera.RNMBXViewport\nimport com.rnmapbox.rnmbx.components.camera.RNMBXViewportManager\nimport com.rnmapbox.rnmbx.components.camera.RNMBXViewportModule\nimport com.rnmapbox.rnmbx.components.images.RNMBXImageManager\nimport com.rnmapbox.rnmbx.components.images.RNMBXImageModule\nimport com.rnmapbox.rnmbx.components.images.RNMBXImagesManager\nimport com.rnmapbox.rnmbx.components.location.RNMBXCustomLocationProviderManager\nimport com.rnmapbox.rnmbx.components.location.RNMBXNativeUserLocationManager\nimport com.rnmapbox.rnmbx.components.mapview.NativeMapViewModule\nimport com.rnmapbox.rnmbx.components.mapview.RNMBXMapViewManager\nimport com.rnmapbox.rnmbx.components.styles.RNMBXStyleImportManager\nimport com.rnmapbox.rnmbx.components.styles.atmosphere.RNMBXAtmosphereManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXBackgroundLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXCircleLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXFillExtrusionLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXFillLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXHeatmapLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXLineLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXModelLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXRasterLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXSkyLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXSymbolLayerManager\nimport com.rnmapbox.rnmbx.components.styles.light.RNMBXLightManager\nimport com.rnmapbox.rnmbx.components.styles.model.RNMBXModelsManager\nimport com.rnmapbox.rnmbx.components.styles.sources.RNMBXImageSourceManager\nimport com.rnmapbox.rnmbx.components.styles.sources.RNMBXRasterDemSourceManager\nimport com.rnmapbox.rnmbx.components.styles.sources.RNMBXRasterSourceManager\nimport com.rnmapbox.rnmbx.components.styles.sources.RNMBXShapeSourceManager\nimport com.rnmapbox.rnmbx.components.styles.sources.RNMBXShapeSourceModule\nimport com.rnmapbox.rnmbx.components.styles.sources.RNMBXVectorSourceManager\nimport com.rnmapbox.rnmbx.components.styles.terrain.RNMBXTerrainManager\nimport com.rnmapbox.rnmbx.modules.RNMBXLocationModule\nimport com.rnmapbox.rnmbx.modules.RNMBXLogging\nimport com.rnmapbox.rnmbx.modules.RNMBXModule\nimport com.rnmapbox.rnmbx.modules.RNMBXOfflineModule\nimport com.rnmapbox.rnmbx.modules.RNMBXOfflineModuleLegacy\nimport com.rnmapbox.rnmbx.modules.RNMBXSnapshotModule\nimport com.rnmapbox.rnmbx.modules.RNMBXTileStoreModule\nimport com.rnmapbox.rnmbx.shapeAnimators.RNMBXChangeLineOffsetsShapeAnimatorModule\nimport com.rnmapbox.rnmbx.shapeAnimators.RNMBXMovePointShapeAnimatorModule\nimport com.rnmapbox.rnmbx.shapeAnimators.ShapeAnimatorManager\nimport com.rnmapbox.rnmbx.utils.ViewTagResolver\n\nclass RNMBXPackage : TurboReactPackage() {\n\n    var viewTagResolver: ViewTagResolver? = null\n    fun getViewTagResolver(context: ReactApplicationContext, module: String) : ViewTagResolver {\n        val viewTagResolver = viewTagResolver\n        if (viewTagResolver == null) {\n            val result = ViewTagResolver(context)\n            this.viewTagResolver = result\n            return result\n        }\n        return viewTagResolver\n    }\n\n    var shapeAnimators: ShapeAnimatorManager? = null\n    fun getShapeAnimators(module: String): ShapeAnimatorManager {\n        val shapeAnimators = shapeAnimators\n        if (shapeAnimators == null) {\n            val result = ShapeAnimatorManager()\n            this.shapeAnimators = result\n            return result\n        }\n        return shapeAnimators\n    }\n\n    fun resetViewTagResolver() {\n        viewTagResolver = null\n    }\n\n    override fun getModule(\n        s: String,\n        reactApplicationContext: ReactApplicationContext\n    ): NativeModule? {\n        when (s) {\n            RNMBXModule.REACT_CLASS -> return RNMBXModule(reactApplicationContext)\n            RNMBXLocationModule.REACT_CLASS -> return RNMBXLocationModule(reactApplicationContext)\n            RNMBXOfflineModule.REACT_CLASS -> return RNMBXOfflineModule(reactApplicationContext)\n            RNMBXTileStoreModule.REACT_CLASS -> return RNMBXTileStoreModule(reactApplicationContext)\n            RNMBXOfflineModuleLegacy.REACT_CLASS -> return RNMBXOfflineModuleLegacy(reactApplicationContext)\n            RNMBXSnapshotModule.REACT_CLASS -> return RNMBXSnapshotModule(reactApplicationContext)\n            RNMBXLogging.REACT_CLASS -> return RNMBXLogging(reactApplicationContext)\n            NativeMapViewModule.NAME -> return NativeMapViewModule(reactApplicationContext, getViewTagResolver(reactApplicationContext, s))\n            RNMBXCameraModule.NAME -> return RNMBXCameraModule(reactApplicationContext, getViewTagResolver(reactApplicationContext, s))\n            RNMBXViewportModule.NAME -> return RNMBXViewportModule(reactApplicationContext, getViewTagResolver(reactApplicationContext, s))\n            RNMBXShapeSourceModule.NAME -> return RNMBXShapeSourceModule(reactApplicationContext, getViewTagResolver(reactApplicationContext, s))\n            RNMBXImageModule.NAME -> return RNMBXImageModule(reactApplicationContext, getViewTagResolver(reactApplicationContext, s))\n            RNMBXPointAnnotationModule.NAME -> return RNMBXPointAnnotationModule(reactApplicationContext, getViewTagResolver(reactApplicationContext, s))\n            RNMBXMovePointShapeAnimatorModule.NAME -> return RNMBXMovePointShapeAnimatorModule(reactApplicationContext, getShapeAnimators(s))\n            RNMBXChangeLineOffsetsShapeAnimatorModule.NAME -> return RNMBXChangeLineOffsetsShapeAnimatorModule(reactApplicationContext, getShapeAnimators(s))\n        }\n        return null\n    }\n\n    @Deprecated(\"\")\n    fun createJSModules(): List<Class<out JavaScriptModule?>> {\n        return emptyList()\n    }\n\n    override fun createViewManagers(reactApplicationContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        val managers: MutableList<ViewManager<*, *>> = ArrayList()\n\n        // components\n        managers.add(RNMBXCameraManager(reactApplicationContext, getViewTagResolver(reactApplicationContext, \"RNMBXCameraManager\")))\n        managers.add(RNMBXViewportManager(reactApplicationContext, getViewTagResolver(reactApplicationContext, \"RNMBXViewportManager\")))\n        managers.add(RNMBXMapViewManager(reactApplicationContext, getViewTagResolver(reactApplicationContext, \"RNMBXMapViewManager\")))\n        managers.add(RNMBXStyleImportManager(reactApplicationContext))\n        managers.add(RNMBXModelsManager(reactApplicationContext))\n\n        // annotations\n        managers.add(RNMBXMarkerViewManager(reactApplicationContext))\n        managers.add(RNMBXMarkerViewContentManager(reactApplicationContext))\n        managers.add(RNMBXPointAnnotationManager(reactApplicationContext, getViewTagResolver(reactApplicationContext, \"RNMBXPointAnnotationManager\")))\n        managers.add(RNMBXCalloutManager())\n        managers.add(RNMBXNativeUserLocationManager())\n        managers.add(RNMBXCustomLocationProviderManager())\n\n        // sources\n        managers.add(RNMBXVectorSourceManager(reactApplicationContext))\n        managers.add(RNMBXShapeSourceManager(reactApplicationContext,\n            getViewTagResolver(reactApplicationContext, \"RNMBXShapeSourceManager\"),\n            getShapeAnimators(\"RNMBXShapeSourceManager\")\n            ))\n        managers.add(RNMBXRasterDemSourceManager(reactApplicationContext))\n        managers.add(RNMBXRasterSourceManager(reactApplicationContext))\n        managers.add(RNMBXImageSourceManager())\n\n        // images\n        managers.add(RNMBXImagesManager(reactApplicationContext))\n        managers.add(RNMBXImageManager(reactApplicationContext, getViewTagResolver(reactApplicationContext, \"RNMBXImageManager\")))\n\n        // layers\n        managers.add(RNMBXFillLayerManager())\n        managers.add(RNMBXFillExtrusionLayerManager())\n        managers.add(RNMBXHeatmapLayerManager())\n        managers.add(RNMBXLineLayerManager())\n        managers.add(RNMBXCircleLayerManager())\n        managers.add(RNMBXSymbolLayerManager())\n        managers.add(RNMBXRasterLayerManager())\n        managers.add(RNMBXSkyLayerManager())\n        managers.add(RNMBXTerrainManager())\n        managers.add(RNMBXAtmosphereManager())\n        managers.add(RNMBXBackgroundLayerManager())\n        managers.add(RNMBXLightManager())\n        managers.add(RNMBXModelLayerManager())\n        return managers\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        resetViewTagResolver()\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[RNMBXModule.REACT_CLASS] = ReactModuleInfo(\n                RNMBXModule.REACT_CLASS,\n                RNMBXModule.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[RNMBXLocationModule.REACT_CLASS] = ReactModuleInfo(\n                RNMBXLocationModule.REACT_CLASS,\n                RNMBXLocationModule.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[RNMBXOfflineModule.REACT_CLASS] = ReactModuleInfo(\n                RNMBXOfflineModule.REACT_CLASS,\n                RNMBXOfflineModule.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[RNMBXTileStoreModule.REACT_CLASS] = ReactModuleInfo(\n                RNMBXTileStoreModule.REACT_CLASS,\n                RNMBXTileStoreModule.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[RNMBXOfflineModuleLegacy.REACT_CLASS] = ReactModuleInfo(\n                RNMBXOfflineModuleLegacy.REACT_CLASS,\n                RNMBXOfflineModuleLegacy.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[RNMBXSnapshotModule.REACT_CLASS] = ReactModuleInfo(\n                RNMBXSnapshotModule.REACT_CLASS,\n                RNMBXSnapshotModule.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[RNMBXLogging.REACT_CLASS] = ReactModuleInfo(\n                RNMBXLogging.REACT_CLASS,\n                RNMBXLogging.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[NativeMapViewModule.NAME] = ReactModuleInfo(\n                NativeMapViewModule.NAME,\n                NativeMapViewModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos[RNMBXViewportModule.NAME] = ReactModuleInfo(\n                RNMBXViewportModule.NAME,\n                RNMBXViewportModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos[RNMBXCameraModule.NAME] = ReactModuleInfo(\n                RNMBXCameraModule.NAME,\n                RNMBXCameraModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos[RNMBXShapeSourceModule.NAME] = ReactModuleInfo(\n                RNMBXShapeSourceModule.NAME,\n                RNMBXShapeSourceModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos[RNMBXImageModule.NAME] = ReactModuleInfo(\n                RNMBXImageModule.NAME,\n                RNMBXImageModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos[RNMBXPointAnnotationModule.NAME] = ReactModuleInfo(\n                RNMBXPointAnnotationModule.NAME,\n                RNMBXPointAnnotationModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos[RNMBXMovePointShapeAnimatorModule.NAME] = ReactModuleInfo(\n                RNMBXMovePointShapeAnimatorModule.NAME,\n                RNMBXMovePointShapeAnimatorModule.NAME,\n                false,\n                false,\n                false,\n                false,\n                isTurboModule\n            )\n            moduleInfos[RNMBXChangeLineOffsetsShapeAnimatorModule.NAME] = ReactModuleInfo(\n                RNMBXChangeLineOffsetsShapeAnimatorModule.NAME,\n                RNMBXChangeLineOffsetsShapeAnimatorModule.NAME,\n                false,\n                false,\n                false,\n                false,\n                isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}",
      "stars": 2307,
      "lastCommitDate": "2024-11-27T04:59:46Z"
    },
    {
      "repository": "zoontek/react-native-localize",
      "file": "android/src/main/java/com/zoontek/rnlocalize/RNLocalizePackage.kt",
      "url": "https://github.com/zoontek/react-native-localize/blob/43de6baa0d781dcc4b0f7767f72a40aff72a7319/android/src/main/java/com/zoontek/rnlocalize/RNLocalizePackage.kt",
      "fileContent": "package com.zoontek.rnlocalize\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNLocalizePackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      RNLocalizeModuleImpl.NAME -> RNLocalizeModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      val moduleInfo = ReactModuleInfo(\n        RNLocalizeModuleImpl.NAME,\n        RNLocalizeModuleImpl.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n\n      moduleInfos[RNLocalizeModuleImpl.NAME] = moduleInfo\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2301,
      "lastCommitDate": "2024-11-19T09:06:57Z"
    },
    {
      "repository": "mattermost/mattermost-mobile",
      "file": "libraries/@mattermost/rnutils/android/src/main/java/com/mattermost/rnutils/RNUtilsPackage.kt",
      "url": "https://github.com/mattermost/mattermost-mobile/blob/32453b320c31ec98a8936b9d4192c41d90fd050a/libraries/@mattermost/rnutils/android/src/main/java/com/mattermost/rnutils/RNUtilsPackage.kt",
      "fileContent": "package com.mattermost.rnutils\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNUtilsPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == RNUtilsModuleImpl.NAME) {\n            RNUtilsModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n                RNUtilsModuleImpl.NAME to ReactModuleInfo(\n                        RNUtilsModuleImpl.NAME,\n                        RNUtilsModuleImpl.NAME,\n                        false,\n                        false,\n                        false,\n                        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                )\n        )\n    }\n}\n",
      "stars": 2269,
      "lastCommitDate": "2024-12-19T08:45:03Z"
    },
    {
      "repository": "mattermost/mattermost-mobile",
      "file": "libraries/@mattermost/rnshare/android/src/main/java/com/mattermost/rnshare/MattermostSharePackage.kt",
      "url": "https://github.com/mattermost/mattermost-mobile/blob/32453b320c31ec98a8936b9d4192c41d90fd050a/libraries/@mattermost/rnshare/android/src/main/java/com/mattermost/rnshare/MattermostSharePackage.kt",
      "fileContent": "package com.mattermost.rnshare\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass MattermostSharePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == MattermostShareImpl.NAME) {\n      MattermostShareModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[MattermostShareImpl.NAME] = ReactModuleInfo(\n        MattermostShareImpl.NAME,\n        MattermostShareImpl.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2269,
      "lastCommitDate": "2024-12-19T08:45:03Z"
    },
    {
      "repository": "mattermost/mattermost-mobile",
      "file": "libraries/@mattermost/hardware-keyboard/android/src/main/java/com/mattermost/hardware/keyboard/MattermostHardwareKeyboardPackage.kt",
      "url": "https://github.com/mattermost/mattermost-mobile/blob/32453b320c31ec98a8936b9d4192c41d90fd050a/libraries/@mattermost/hardware-keyboard/android/src/main/java/com/mattermost/hardware/keyboard/MattermostHardwareKeyboardPackage.kt",
      "fileContent": "package com.mattermost.hardware.keyboard\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass MattermostHardwareKeyboardPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == MattermostHardwareKeyboardImpl.NAME) {\n            MattermostHardwareKeyboardModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n                MattermostHardwareKeyboardImpl.NAME to ReactModuleInfo(\n                        MattermostHardwareKeyboardImpl.NAME,\n                        MattermostHardwareKeyboardImpl.NAME,\n                        false,  // canOverrideExistingModule\n                        false,  // needsEagerInit\n                        false,  // isCxxModule\n                        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED // isTurboModule\n                )\n        )\n    }\n}\n",
      "stars": 2269,
      "lastCommitDate": "2024-12-19T08:45:03Z"
    },
    {
      "repository": "mrousavy/react-native-blurhash",
      "file": "android/src/main/java/com/mrousavy/blurhash/BlurhashPackage.kt",
      "url": "https://github.com/mrousavy/react-native-blurhash/blob/39fa56e75f9dad74cc0f61b866d5848992f61219/android/src/main/java/com/mrousavy/blurhash/BlurhashPackage.kt",
      "fileContent": "package com.mrousavy.blurhash\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass BlurhashPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      NativeBlurhashModuleSpec.NAME -> BlurhashModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(BlurhashModule::class.java)\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n          ReactModuleInfo(\n              reactModule.name,\n              moduleClass.name,\n              true,\n              reactModule.needsEagerInit,\n              /** TODO remove the parameter once support for RN < 0.73 is dropped */\n              reactModule.hasConstants,\n              reactModule.isCxxModule,\n              TurboModule::class.java.isAssignableFrom(moduleClass))\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf<ViewManager<*, *>>(BlurhashViewManager())\n  }\n}\n",
      "stars": 1995,
      "lastCommitDate": "2024-11-05T10:16:24Z"
    },
    {
      "repository": "kirillzyusko/react-native-keyboard-controller",
      "file": "android/src/main/java/com/reactnativekeyboardcontroller/KeyboardControllerPackage.kt",
      "url": "https://github.com/kirillzyusko/react-native-keyboard-controller/blob/16c0a76a647bca3061aaa6a4d4043a94582b35e0/android/src/main/java/com/reactnativekeyboardcontroller/KeyboardControllerPackage.kt",
      "fileContent": "package com.reactnativekeyboardcontroller\n\nimport androidx.annotation.Nullable\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport com.reactnativekeyboardcontroller.modules.KeyboardControllerModuleImpl\nimport com.reactnativekeyboardcontroller.modules.StatusBarManagerCompatModuleImpl\n\nclass KeyboardControllerPackage : TurboReactPackage() {\n  @Nullable\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    when (name) {\n      KeyboardControllerModuleImpl.NAME -> {\n        KeyboardControllerModule(reactContext)\n      }\n      StatusBarManagerCompatModuleImpl.NAME -> {\n        StatusBarManagerCompatModule(reactContext)\n      }\n      else -> {\n        null\n      }\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      moduleInfos[KeyboardControllerModuleImpl.NAME] =\n        ReactModuleInfo(\n          KeyboardControllerModuleImpl.NAME,\n          KeyboardControllerModuleImpl.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          true, // hasConstants\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos[StatusBarManagerCompatModuleImpl.NAME] =\n        ReactModuleInfo(\n          StatusBarManagerCompatModuleImpl.NAME,\n          StatusBarManagerCompatModuleImpl.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          true, // hasConstants\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> =\n    listOf(\n      KeyboardControllerViewManager(reactContext),\n      KeyboardGestureAreaViewManager(reactContext),\n      OverKeyboardViewManager(reactContext),\n    )\n}\n",
      "stars": 1819,
      "lastCommitDate": "2024-12-18T13:19:04Z"
    },
    {
      "repository": "jpudysz/react-native-unistyles",
      "file": "android/src/main/java/com/unistyles/UnistylesPackage.kt",
      "url": "https://github.com/jpudysz/react-native-unistyles/blob/0fadf2d4ed2ce899a167384f9966cc1f267b15c7/android/src/main/java/com/unistyles/UnistylesPackage.kt",
      "fileContent": "package com.unistyles\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass UnistylesPackage: TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == UnistylesModule.NAME) {\n            UnistylesModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            mapOf(UnistylesModule.NAME to ReactModuleInfo(\n                UnistylesModule.NAME,\n                UnistylesModule.NAME,\n                _canOverrideExistingModule = true,\n                _needsEagerInit = true,\n                isCxxModule = true,\n                isTurboModule = true\n            ))\n        }\n    }\n}\n",
      "stars": 1735,
      "lastCommitDate": "2024-12-18T04:11:37Z"
    },
    {
      "repository": "getsentry/sentry-react-native",
      "file": "samples/react-native/android/app/src/main/java/io/sentry/reactnative/sample/TurboSamplePackage.kt",
      "url": "https://github.com/getsentry/sentry-react-native/blob/0b9da0a58650fbcd7ee0b8972599c2fcb55108b7/samples/react-native/android/app/src/main/java/io/sentry/reactnative/sample/TurboSamplePackage.kt",
      "fileContent": "package io.sentry.reactnative.sample\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport org.jetbrains.annotations.Nullable\n\nclass TurboSamplePackage : TurboReactPackage() {\n    @Nullable\n    override fun getModule(\n        name: String,\n        reactApplicationContext: ReactApplicationContext\n    ): NativeModule? {\n        return if (name == NativePlatformSampleModule.NAME) {\n            NativePlatformSampleModule(reactApplicationContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> =\n                HashMap()\n            moduleInfos[NativePlatformSampleModule.NAME] = ReactModuleInfo(\n                NativePlatformSampleModule.NAME,\n                NativePlatformSampleModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                true // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 1592,
      "lastCommitDate": "2024-12-19T08:26:27Z"
    },
    {
      "repository": "callstack/repack",
      "file": "packages/repack/android/src/main/java/com/callstack/repack/ScriptManagerPackage.kt",
      "url": "https://github.com/callstack/repack/blob/617c5018e1f2b0520f6f978b2c1440239196f662/packages/repack/android/src/main/java/com/callstack/repack/ScriptManagerPackage.kt",
      "fileContent": "package com.callstack.repack\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass ScriptManagerPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == ScriptManagerModule.NAME) {\n            ScriptManagerModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            // Use deprecated constructor for backwards compatibility\n            moduleInfos[ScriptManagerModule.NAME] = ReactModuleInfo(\n                    ScriptManagerModule.NAME,\n                    ScriptManagerModule.NAME,\n                    false,\n                    true,\n                    false,\n                    false,\n                    isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 1508,
      "lastCommitDate": "2024-12-18T14:54:11Z"
    },
    {
      "repository": "WalletConnect/walletconnect-monorepo",
      "file": "packages/react-native-compat/android/src/main/java/com/walletconnect/reactnativemodule/RNWalletConnectModulePackage.kt",
      "url": "https://github.com/WalletConnect/walletconnect-monorepo/blob/1463ac8dc4b143eb3d10bfe6dec1dfdf23c30062/packages/react-native-compat/android/src/main/java/com/walletconnect/reactnativemodule/RNWalletConnectModulePackage.kt",
      "fileContent": "package com.walletconnect.reactnativemodule\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RNWalletConnectModulePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNWalletConnectModuleModule.NAME) {\n      RNWalletConnectModuleModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNWalletConnectModuleModule.NAME] = ReactModuleInfo(\n        RNWalletConnectModuleModule.NAME,\n        RNWalletConnectModuleModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1477,
      "lastCommitDate": "2024-12-16T07:57:51Z"
    },
    {
      "repository": "numandev1/react-native-compressor",
      "file": "android/src/main/java/com/reactnativecompressor/CompressorPackage.kt",
      "url": "https://github.com/numandev1/react-native-compressor/blob/bcbdd76f0ed1517deae6573a0d086809bd768b84/android/src/main/java/com/reactnativecompressor/CompressorPackage.kt",
      "fileContent": "package com.reactnativecompressor\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass CompressorPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == CompressorModule.NAME) {\n            CompressorModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[CompressorModule.NAME] = ReactModuleInfo(\n                    CompressorModule.NAME,\n                    CompressorModule.NAME,\n                    false,  // canOverrideExistingModule\n                    false,  // needsEagerInit\n                    true,  // hasConstants\n                    false,  // isCxxModule\n                    isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 964,
      "lastCommitDate": "2024-12-05T14:43:49Z"
    },
    {
      "repository": "mrousavy/nitro",
      "file": "example/android/app/src/main/java/com/nitroexample/exampleturbomodule/ExampleTurboModulePackage.kt",
      "url": "https://github.com/mrousavy/nitro/blob/82ccff24bcd1ffd408d459609cc1fb94227c4023/example/android/app/src/main/java/com/nitroexample/exampleturbomodule/ExampleTurboModulePackage.kt",
      "fileContent": "package com.nitroexample.exampleturbomodule\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass ExampleTurboModulePackage: TurboReactPackage() {\n    override fun getModule(name: String, context: ReactApplicationContext): NativeModule? {\n        if (name == ExampleTurboModuleModule.NAME) {\n            return ExampleTurboModuleModule(context)\n        } else {\n            return null\n        }\n    }\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            ExampleTurboModuleModule.NAME to ReactModuleInfo(\n                ExampleTurboModuleModule.NAME,\n                ExampleTurboModuleModule.NAME,\n                false, // canOverrideExistingModule\n                false, // needsEagerInit\n                true, // hasConstants\n                false, // isCxxModule\n                true // isTurboModule\n            )\n        )\n    }\n}",
      "stars": 731,
      "lastCommitDate": "2024-12-18T15:59:06Z"
    },
    {
      "repository": "mrousavy/nitro",
      "file": "packages/react-native-nitro-modules/android/src/main/java/com/margelo/nitro/NitroModulesPackage.kt",
      "url": "https://github.com/mrousavy/nitro/blob/82ccff24bcd1ffd408d459609cc1fb94227c4023/packages/react-native-nitro-modules/android/src/main/java/com/margelo/nitro/NitroModulesPackage.kt",
      "fileContent": "package com.margelo.nitro\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NitroModulesPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NitroModules.NAME) {\n            NitroModules(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[NitroModules.NAME] = ReactModuleInfo(\n                NitroModules.NAME,\n                NitroModules.NAME,\n                canOverrideExistingModule = false,\n                needsEagerInit = false,\n                hasConstants = false,\n                isCxxModule = false,\n                isTurboModule = isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}",
      "stars": 731,
      "lastCommitDate": "2024-12-18T15:59:06Z"
    },
    {
      "repository": "mateusz1913/react-native-avoid-softinput",
      "file": "packages/react-native-avoid-softinput/android/src/main/java/com/reactnativeavoidsoftinput/AvoidSoftInputPackage.kt",
      "url": "https://github.com/mateusz1913/react-native-avoid-softinput/blob/3528976c7b598b9b106cc98c31522f6e8de8bfa7/packages/react-native-avoid-softinput/android/src/main/java/com/reactnativeavoidsoftinput/AvoidSoftInputPackage.kt",
      "fileContent": "package com.reactnativeavoidsoftinput\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass AvoidSoftInputPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            AvoidSoftInputModuleImpl.NAME -> AvoidSoftInputModule(reactContext)\n            else -> null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(AvoidSoftInputModule::class.java)\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(\n        reactContext: ReactApplicationContext\n    ): List<ViewManager<*, *>> {\n        return listOf(AvoidSoftInputViewManager())\n    }\n}\n",
      "stars": 720,
      "lastCommitDate": "2024-11-20T22:31:53Z"
    },
    {
      "repository": "zoontek/react-native-edge-to-edge",
      "file": "android/src/main/java/com/zoontek/rnedgetoedge/EdgeToEdgePackage.kt",
      "url": "https://github.com/zoontek/react-native-edge-to-edge/blob/7b80de64da98e46f36d6007b73eac476b2ec3b6c/android/src/main/java/com/zoontek/rnedgetoedge/EdgeToEdgePackage.kt",
      "fileContent": "package com.zoontek.rnedgetoedge\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass EdgeToEdgePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      EdgeToEdgeModuleImpl.NAME -> EdgeToEdgeModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      val moduleInfo = ReactModuleInfo(\n        EdgeToEdgeModuleImpl.NAME,\n        EdgeToEdgeModuleImpl.NAME,\n        false,\n        true,\n        true,\n        false,\n        isTurboModule\n      )\n\n      moduleInfos[EdgeToEdgeModuleImpl.NAME] = moduleInfo\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 646,
      "lastCommitDate": "2024-11-21T18:10:03Z"
    },
    {
      "repository": "margelo/react-native-nitro-sqlite",
      "file": "package/android/src/main/java/com/margelo/rnnitrosqlite/RNNitroSQLitePackage.kt",
      "url": "https://github.com/margelo/react-native-nitro-sqlite/blob/12757ca3d152e967239e0ec5d39169d5dbd0cbc5/package/android/src/main/java/com/margelo/rnnitrosqlite/RNNitroSQLitePackage.kt",
      "fileContent": "package com.margelo.rnnitrosqlite\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNNitroSQLitePackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == RNNitroSQLiteOnLoadModule.NAME) {\n          RNNitroSQLiteOnLoadModule(reactContext)\n        } else {\n          null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n          val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n          val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n          moduleInfos[RNNitroSQLiteOnLoadModule.NAME] = ReactModuleInfo(\n            RNNitroSQLiteOnLoadModule.NAME,\n            RNNitroSQLiteOnLoadModule.NAME,\n            canOverrideExistingModule=false,\n            needsEagerInit=true,\n            hasConstants=true,\n            isCxxModule=false,\n            isTurboModule=isTurboModule\n          )\n          moduleInfos\n        }\n    }\n\n    companion object {\n        init {\n            System.loadLibrary(\"RNNitroSQLite\")\n        }\n    }\n}\n",
      "stars": 376,
      "lastCommitDate": "2024-12-02T15:08:23Z"
    },
    {
      "repository": "powersync-ja/powersync-js",
      "file": "packages/powersync-op-sqlite/android/src/main/java/com/powersync/opsqlite/PowerSyncOpSqlitePackage.kt",
      "url": "https://github.com/powersync-ja/powersync-js/blob/4a262cd89ac2f9f643cf2c165c0256fc481dd5ed/packages/powersync-op-sqlite/android/src/main/java/com/powersync/opsqlite/PowerSyncOpSqlitePackage.kt",
      "fileContent": "package com.powersync.opsqlite\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass PowerSyncOpSqlitePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == PowerSyncOpSqliteModule.NAME) {\n      PowerSyncOpSqliteModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[PowerSyncOpSqliteModule.NAME] = ReactModuleInfo(\n        PowerSyncOpSqliteModule.NAME,\n        PowerSyncOpSqliteModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 337,
      "lastCommitDate": "2024-12-18T12:58:20Z"
    },
    {
      "repository": "baronha/ting",
      "file": "android/src/main/java/com/ting/TingPackage.kt",
      "url": "https://github.com/baronha/ting/blob/589e122c67577e507f675ac0ca8d1d3e29d39e94/android/src/main/java/com/ting/TingPackage.kt",
      "fileContent": "package com.ting\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass TingPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TingModule.NAME) {\n      TingModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[TingModule.NAME] = ReactModuleInfo(\n        TingModule.NAME,\n        TingModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 329,
      "lastCommitDate": "2024-11-10T17:00:51Z"
    },
    {
      "repository": "alpha0010/react-native-file-access",
      "file": "android/src/main/java/com/alpha0010/fs/FileAccessPackage.kt",
      "url": "https://github.com/alpha0010/react-native-file-access/blob/4b30d89ee720ee488a8db727bae04c29f8dc93a0/android/src/main/java/com/alpha0010/fs/FileAccessPackage.kt",
      "fileContent": "package com.alpha0010.fs\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass FileAccessPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == FileAccessModule.NAME) {\n      FileAccessModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[FileAccessModule.NAME] = ReactModuleInfo(\n        FileAccessModule.NAME,\n        FileAccessModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 314,
      "lastCommitDate": "2024-09-24T13:51:50Z"
    },
    {
      "repository": "Doko-Demo-Doa/react-native-shake",
      "file": "android/src/main/java/com/shake/ShakePackage.kt",
      "url": "https://github.com/Doko-Demo-Doa/react-native-shake/blob/0e002154d42638c704671796653120b1ddcdfed2/android/src/main/java/com/shake/ShakePackage.kt",
      "fileContent": "package com.shake\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ShakePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ShakeModule.NAME) {\n      ShakeModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ShakeModule.NAME] = ReactModuleInfo(\n        ShakeModule.NAME,\n        ShakeModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 278,
      "lastCommitDate": "2024-11-22T15:40:46Z"
    },
    {
      "repository": "solana-mobile/mobile-wallet-adapter",
      "file": "js/packages/mobile-wallet-adapter-protocol/android/src/main/java/com/solanamobile/mobilewalletadapter/reactnative/SolanaMobileWalletAdapterPackage.kt",
      "url": "https://github.com/solana-mobile/mobile-wallet-adapter/blob/d699199349ae4dc1fa18dc338314c44c9b453d51/js/packages/mobile-wallet-adapter-protocol/android/src/main/java/com/solanamobile/mobilewalletadapter/reactnative/SolanaMobileWalletAdapterPackage.kt",
      "fileContent": "package com.solanamobile.mobilewalletadapter.reactnative\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass SolanaMobileWalletAdapterModulePackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == SolanaMobileWalletAdapterModule.NAME) {\n            SolanaMobileWalletAdapterModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            moduleInfos[SolanaMobileWalletAdapterModule.NAME] =\n                    ReactModuleInfo(\n                            SolanaMobileWalletAdapterModule.NAME,\n                            SolanaMobileWalletAdapterModule.NAME,\n                            false, // canOverrideExistingModule\n                            false, // needsEagerInit\n                            true, // hasConstants\n                            false, // isCxxModule\n                            true // isTurboModule\n                    )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 251,
      "lastCommitDate": "2024-12-19T01:30:13Z"
    },
    {
      "repository": "matinzd/react-native-health-connect",
      "file": "android/src/main/java/dev/matinzd/healthconnect/HealthConnectPackage.kt",
      "url": "https://github.com/matinzd/react-native-health-connect/blob/851c65bd05a34399a77cbc885172852a5bb7aadf/android/src/main/java/dev/matinzd/healthconnect/HealthConnectPackage.kt",
      "fileContent": "package dev.matinzd.healthconnect\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass HealthConnectPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == HealthConnectModule.NAME) {\n      HealthConnectModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[HealthConnectModule.NAME] = ReactModuleInfo(\n        HealthConnectModule.NAME,\n        HealthConnectModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 237,
      "lastCommitDate": "2024-11-23T16:25:08Z"
    },
    {
      "repository": "alchemyplatform/aa-sdk",
      "file": "account-kit/rn-signer/android/src/main/java/com/accountkit/reactnativesigner/ReactNativeSignerPackage.kt",
      "url": "https://github.com/alchemyplatform/aa-sdk/blob/bccb6e7172fed90a24b5a875502cef3d0f660a8b/account-kit/rn-signer/android/src/main/java/com/accountkit/reactnativesigner/ReactNativeSignerPackage.kt",
      "fileContent": "package com.accountkit.reactnativesigner\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass ReactNativeSignerPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == NativeTEKStamperModule.NAME) {\n      NativeTEKStamperModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[NativeTEKStamperModule.NAME] = ReactModuleInfo(\n        NativeTEKStamperModule.NAME,\n        NativeTEKStamperModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true  // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 237,
      "lastCommitDate": "2024-12-18T17:04:30Z"
    },
    {
      "repository": "software-mansion/react-native-executorch",
      "file": "android/src/main/java/com/swmansion/rnexecutorch/RnExecutorchPackage.kt",
      "url": "https://github.com/software-mansion/react-native-executorch/blob/2811ca9a2859a908d91365a6b1af05ae5b57fb83/android/src/main/java/com/swmansion/rnexecutorch/RnExecutorchPackage.kt",
      "fileContent": "package com.swmansion.rnexecutorch\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\nclass RnExecutorchPackage : TurboReactPackage() {\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf()\n  }\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == LLM.NAME) {\n      LLM(reactContext)\n    } else if (name == ETModule.NAME) {\n      ETModule(reactContext)\n    } else if (name == StyleTransfer.NAME) {\n      StyleTransfer(reactContext)\n    } else if (name == Classification.NAME) {\n      Classification(reactContext)\n    } else if (name == ObjectDetection.NAME) {\n      ObjectDetection(reactContext)\n    }\n    else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[LLM.NAME] = ReactModuleInfo(\n        LLM.NAME,\n        LLM.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true,\n      )\n      moduleInfos[ETModule.NAME] = ReactModuleInfo(\n        ETModule.NAME,\n        ETModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true\n      )\n\n      moduleInfos[StyleTransfer.NAME] = ReactModuleInfo(\n        StyleTransfer.NAME,\n        StyleTransfer.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true\n      )\n\n      moduleInfos[Classification.NAME] = ReactModuleInfo(\n        Classification.NAME,\n        Classification.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true\n      )\n\n      moduleInfos[ObjectDetection.NAME] = ReactModuleInfo(\n        ObjectDetection.NAME,\n        ObjectDetection.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 212,
      "lastCommitDate": "2024-12-18T15:16:08Z"
    },
    {
      "repository": "jhugman/uniffi-bindgen-react-native",
      "file": "crates/ubrn_cli/src/codegen/templates/PackageTemplate.kt",
      "url": "https://github.com/jhugman/uniffi-bindgen-react-native/blob/1cf0792ebd2c39fb1c38d0ac019b932029b1c6ee/crates/ubrn_cli/src/codegen/templates/PackageTemplate.kt",
      "fileContent": "{%- let name = self.config.project.module_cpp() %}\n{%- let package_class_name = name|fmt(\"{}Package\") %}\n{%- let module_class_name = name|fmt(\"{}Module\") -%}\n// Generated by uniffi-bindgen-react-native\npackage {{ self.config.project.android.package_name() }}\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass {{ package_class_name }} : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == {{ module_class_name }}.NAME) {\n      {{ module_class_name }}(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[{{ module_class_name }}.NAME] = ReactModuleInfo(\n        {{ module_class_name }}.NAME,\n        {{ module_class_name }}.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 172,
      "lastCommitDate": "2024-12-18T20:03:25Z"
    },
    {
      "repository": "vonovak/react-native-theme-control",
      "file": "android/src/main/java/eu/reactnativetraining/ThemeControlPackage.kt",
      "url": "https://github.com/vonovak/react-native-theme-control/blob/7961c1014ce8263985e590c7639e4f3fea4bd5cb/android/src/main/java/eu/reactnativetraining/ThemeControlPackage.kt",
      "fileContent": "package eu.reactnativetraining\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass ThemeControlPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, ctx: ReactApplicationContext): NativeModule? {\n    return if (ThemeControlModule.NAME == name) {\n      ThemeControlModule(ctx)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider = ReactModuleInfoProvider {\n    val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n    val moduleName = ThemeControlModule.NAME\n    mapOf(\n      moduleName to ReactModuleInfo(\n        moduleName,\n        moduleName,\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        false, // hasConstants\n        false, // isCxxModule\n        isTurboModule // isTurboModule\n      )\n    )\n  }\n}\n",
      "stars": 158,
      "lastCommitDate": "2024-10-29T18:46:30Z"
    },
    {
      "repository": "openwallet-foundation/bifold-wallet",
      "file": "packages/react-native-attestation/android/src/main/java/com/attestation/AttestationPackage.kt",
      "url": "https://github.com/openwallet-foundation/bifold-wallet/blob/054a63ba643266fe88fc0c49464815f501aeb1d0/packages/react-native-attestation/android/src/main/java/com/attestation/AttestationPackage.kt",
      "fileContent": "package com.attestation\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AttestationPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AttestationModule.NAME) {\n      AttestationModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AttestationModule.NAME] = ReactModuleInfo(\n        AttestationModule.NAME,\n        AttestationModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 157,
      "lastCommitDate": "2024-12-18T17:51:27Z"
    },
    {
      "repository": "swan-io/react-native-browser",
      "file": "android/src/main/java/io/swan/rnbrowser/RNSwanBrowserPackage.kt",
      "url": "https://github.com/swan-io/react-native-browser/blob/67f2905295a3efa310398a7acc832f33eb1ee1a0/android/src/main/java/io/swan/rnbrowser/RNSwanBrowserPackage.kt",
      "fileContent": "package io.swan.rnbrowser\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNSwanBrowserPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      RNSwanBrowserModuleImpl.NAME -> RNSwanBrowserModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      val moduleInfo = ReactModuleInfo(\n        RNSwanBrowserModuleImpl.NAME,\n        RNSwanBrowserModuleImpl.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n\n      moduleInfos[RNSwanBrowserModuleImpl.NAME] = moduleInfo\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 142,
      "lastCommitDate": "2024-11-04T13:29:31Z"
    },
    {
      "repository": "DataDog/dd-sdk-reactnative",
      "file": "packages/core/android/src/main/kotlin/com/datadog/reactnative/DdSdkReactNativePackage.kt",
      "url": "https://github.com/DataDog/dd-sdk-reactnative/blob/a8a041a4c5ffc097635ae95af0ed3e993264d016/packages/core/android/src/main/kotlin/com/datadog/reactnative/DdSdkReactNativePackage.kt",
      "fileContent": "/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\npackage com.datadog.reactnative\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\n/**\n * Package of native dd-sdk-reactnative native modules.\n */\nclass DdSdkReactNativePackage : TurboReactPackage() {\n    private val sdkWrapper = DatadogSDKWrapper()\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            DdSdkImplementation.NAME -> DdSdk(reactContext, sdkWrapper)\n            DdRumImplementation.NAME -> DdRum(reactContext, sdkWrapper)\n            DdTraceImplementation.NAME -> DdTrace(reactContext)\n            DdLogsImplementation.NAME -> DdLogs(reactContext, sdkWrapper)\n            else -> null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            val moduleInfos = listOf(\n                DdSdkImplementation.NAME,\n                DdRumImplementation.NAME,\n                DdTraceImplementation.NAME,\n                DdLogsImplementation.NAME\n            ).associateWith {\n                ReactModuleInfo(\n                    it,\n                    it,\n                    false,  // canOverrideExistingModule\n                    false,  // needsEagerInit\n                    true,  // hasConstants\n                    false,  // isCxxModule\n                    isTurboModule // isTurboModule\n                )\n            }\n\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 123,
      "lastCommitDate": "2024-12-18T15:59:33Z"
    },
    {
      "repository": "DataDog/dd-sdk-reactnative",
      "file": "packages/react-native-session-replay/android/src/main/kotlin/com/datadog/reactnative/sessionreplay/DdSDKReactNativeSessionReplayPackage.kt",
      "url": "https://github.com/DataDog/dd-sdk-reactnative/blob/a8a041a4c5ffc097635ae95af0ed3e993264d016/packages/react-native-session-replay/android/src/main/kotlin/com/datadog/reactnative/sessionreplay/DdSDKReactNativeSessionReplayPackage.kt",
      "fileContent": "/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\npackage com.datadog.reactnative.sessionreplay\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\n/**\n * Package of native dd-sdk-reactnative native modules.\n */\nclass DdSDKReactNativeSessionReplayPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            DdSessionReplayImplementation.NAME -> DdSessionReplay(reactContext)\n            else -> null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            val moduleInfos = listOf(\n                DdSessionReplayImplementation.NAME\n            ).associateWith {\n                ReactModuleInfo(\n                    it,\n                    it,\n                    false,  // canOverrideExistingModule\n                    false,  // needsEagerInit\n                    true,  // hasConstants\n                    false,  // isCxxModule\n                    isTurboModule // isTurboModule\n                )\n            }\n\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 123,
      "lastCommitDate": "2024-12-18T15:59:33Z"
    },
    {
      "repository": "DataDog/dd-sdk-reactnative",
      "file": "packages/internal-testing-tools/android/src/main/kotlin/com/datadog/reactnative/internaltesting/DdInternalTestingPackage.kt",
      "url": "https://github.com/DataDog/dd-sdk-reactnative/blob/a8a041a4c5ffc097635ae95af0ed3e993264d016/packages/internal-testing-tools/android/src/main/kotlin/com/datadog/reactnative/internaltesting/DdInternalTestingPackage.kt",
      "fileContent": "/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\npackage com.datadog.reactnative.internaltesting\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\n/**\n * Package of internal testing native modules.\n */\nclass DdInternalTestingPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            DdInternalTestingImplementation.NAME -> DdInternalTesting(reactContext)\n            else -> null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            val moduleInfos = listOf(\n                DdInternalTestingImplementation.NAME\n            ).associateWith {\n                ReactModuleInfo(\n                    it,\n                    it,\n                    false,  // canOverrideExistingModule\n                    false,  // needsEagerInit\n                    true,  // hasConstants\n                    false,  // isCxxModule\n                    isTurboModule // isTurboModule\n                )\n            }\n\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 123,
      "lastCommitDate": "2024-12-18T15:59:33Z"
    },
    {
      "repository": "urbanairship/react-native-airship",
      "file": "android/src/main/java/com/urbanairship/reactnative/AirshipPackage.kt",
      "url": "https://github.com/urbanairship/react-native-airship/blob/17eaa0e7a8137659f0af207f969774e046b32def/android/src/main/java/com/urbanairship/reactnative/AirshipPackage.kt",
      "fileContent": "package com.urbanairship.reactnative\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.uimanager.ViewManager\nimport java.util.HashMap\n\nclass AirshipPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AirshipModule.NAME) {\n      AirshipModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AirshipModule.NAME] = ReactModuleInfo(\n        AirshipModule.NAME,\n        AirshipModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf<ViewManager<*, *>>(ReactMessageViewManager(), ReactEmbeddedViewManager())\n  }\n}\n",
      "stars": 88,
      "lastCommitDate": "2024-12-17T23:16:11Z"
    },
    {
      "repository": "lukaszkurantdev/react-native-fast-opencv",
      "file": "android/src/main/java/com/fastopencv/FastOpencvPackage.kt",
      "url": "https://github.com/lukaszkurantdev/react-native-fast-opencv/blob/831f8dc0f9b152ebc52ef75a08f967b63bf71a9e/android/src/main/java/com/fastopencv/FastOpencvPackage.kt",
      "fileContent": "package com.fastopencv\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass FastOpencvPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == FastOpencvModule.NAME) {\n      FastOpencvModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[FastOpencvModule.NAME] = ReactModuleInfo(\n        FastOpencvModule.NAME,\n        FastOpencvModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 87,
      "lastCommitDate": "2024-12-09T05:21:18Z"
    },
    {
      "repository": "christianbaroni/react-native-turbo-haptics",
      "file": "package/android/src/fabric/java/com/turbohaptics/TurboHapticsPackage.kt",
      "url": "https://github.com/christianbaroni/react-native-turbo-haptics/blob/46f34a8347cc5b7a3f7949ad6399be029db4a25d/package/android/src/fabric/java/com/turbohaptics/TurboHapticsPackage.kt",
      "fileContent": "package com.turbohaptics\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass TurboHapticsPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        if (name == TurboHapticsModule.NAME) {\n            return TurboHapticsModule(reactContext)\n        }\n        return null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos = HashMap<String, ReactModuleInfo>()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos.apply {\n                put(\n                    TurboHapticsModule.NAME,\n                    ReactModuleInfo(\n                        TurboHapticsModule.NAME,\n                        TurboHapticsModule.NAME,\n                        false, // canOverrideExistingModule\n                        false, // needsEagerInit\n                        true,  // hasConstants\n                        false, // isCxxModule\n                        isTurboModule // isTurboModule\n                    )\n                )\n            }\n            moduleInfos\n        }\n    }\n}",
      "stars": 80,
      "lastCommitDate": "2024-11-14T22:39:21Z"
    },
    {
      "repository": "jakex7/react-native-localization-settings",
      "file": "android/src/main/java/com/localizationsettings/LocalizationSettingsPackage.kt",
      "url": "https://github.com/jakex7/react-native-localization-settings/blob/96e5bd3559bb0c2c6926c5aeae8e2ad68824dfe3/android/src/main/java/com/localizationsettings/LocalizationSettingsPackage.kt",
      "fileContent": "package com.localizationsettings\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass LocalizationSettingsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == LocalizationSettingsModule.NAME) {\n      LocalizationSettingsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[LocalizationSettingsModule.NAME] = ReactModuleInfo(\n        LocalizationSettingsModule.NAME,\n        LocalizationSettingsModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 76,
      "lastCommitDate": "2024-11-12T17:47:59Z"
    },
    {
      "repository": "huextrat/react-native-screenshot-aware",
      "file": "android/src/main/java/com/screenshotaware/ScreenshotAwarePackage.kt",
      "url": "https://github.com/huextrat/react-native-screenshot-aware/blob/c57273ab45eeb8ffb0298394cb40d48e115adff6/android/src/main/java/com/screenshotaware/ScreenshotAwarePackage.kt",
      "fileContent": "package com.screenshotaware\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ScreenshotAwarePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ScreenshotAwareModule.NAME) {\n      ScreenshotAwareModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[ScreenshotAwareModule.NAME] = ReactModuleInfo(\n        ScreenshotAwareModule.NAME,\n        ScreenshotAwareModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 74,
      "lastCommitDate": "2024-12-18T17:21:43Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/share/android/src/main/java/net/mjstudio/rnkakao/share/RNCKakaoSharePackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/share/android/src/main/java/net/mjstudio/rnkakao/share/RNCKakaoSharePackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.share\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass RNCKakaoSharePackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoShareModule.NAME) {\n      RNCKakaoShareModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoShareModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoShareModule.NAME,\n          RNCKakaoShareModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/channel/android/src/main/java/net/mjstudio/rnkakao/channel/RNCKakaoChannelPackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/channel/android/src/main/java/net/mjstudio/rnkakao/channel/RNCKakaoChannelPackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.channel\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNCKakaoChannelPackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoChannelModule.NAME) {\n      RNCKakaoChannelModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoChannelModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoChannelModule.NAME,\n          RNCKakaoChannelModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/map/android/src/main/java/net/mjstudio/rnkakao/map/RNCKakaoMapPackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/map/android/src/main/java/net/mjstudio/rnkakao/map/RNCKakaoMapPackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.map\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNCKakaoMapPackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoMapModule.NAME) {\n      RNCKakaoMapModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoMapModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoMapModule.NAME,\n          RNCKakaoMapModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/core/android/src/main/java/net/mjstudio/rnkakao/core/RNCKakaoCorePackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/core/android/src/main/java/net/mjstudio/rnkakao/core/RNCKakaoCorePackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.core\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNCKakaoCorePackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoCoreModule.NAME) {\n      RNCKakaoCoreModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoCoreModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoCoreModule.NAME,\n          RNCKakaoCoreModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/user/android/src/main/java/net/mjstudio/rnkakao/user/RNCKakaoUserPackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/user/android/src/main/java/net/mjstudio/rnkakao/user/RNCKakaoUserPackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.user\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNCKakaoUserPackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoUserModule.NAME) {\n      RNCKakaoUserModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoUserModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoUserModule.NAME,\n          RNCKakaoUserModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/social/android/src/main/java/net/mjstudio/rnkakao/social/RNCKakaoSocialPackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/social/android/src/main/java/net/mjstudio/rnkakao/social/RNCKakaoSocialPackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.social\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNCKakaoSocialPackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoSocialModule.NAME) {\n      RNCKakaoSocialModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoSocialModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoSocialModule.NAME,\n          RNCKakaoSocialModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/navi/android/src/main/java/net/mjstudio/rnkakao/navi/RNCKakaoNaviPackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/navi/android/src/main/java/net/mjstudio/rnkakao/navi/RNCKakaoNaviPackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.navi\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNCKakaoNaviPackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoNaviModule.NAME) {\n      RNCKakaoNaviModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoNaviModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoNaviModule.NAME,\n          RNCKakaoNaviModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "mateusz1913/rnbridgingtutorial",
      "file": "range-slider-package/android/src/main/java/com/rangesliderpackage/RangeSliderTurboPackage.kt",
      "url": "https://github.com/mateusz1913/rnbridgingtutorial/blob/5ffbcb451066cd43807337a3c1a42c26402a814f/range-slider-package/android/src/main/java/com/rangesliderpackage/RangeSliderTurboPackage.kt",
      "fileContent": "package com.rangesliderpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass RangeSliderTurboPackage : TurboReactPackage() {\n    /**\n    * Initialize and export modules based on the name of the required module\n    */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return null\n    }\n\n    /**\n    * Declare info about exported modules\n    */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n        * Here declare the array of exported modules\n        */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n        * And here just iterate on that array and produce the info provider instance\n        */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n        * Here declare the list of exported native components\n        */\n        return listOf(RangeSliderViewManager())\n    }\n}\n",
      "stars": 70,
      "lastCommitDate": "2024-06-02T08:49:10Z"
    },
    {
      "repository": "mateusz1913/rnbridgingtutorial",
      "file": "save-file-picker-package/android/src/main/java/com/savefilepickerpackage/SaveFilePickerTurboPackage.kt",
      "url": "https://github.com/mateusz1913/rnbridgingtutorial/blob/5ffbcb451066cd43807337a3c1a42c26402a814f/save-file-picker-package/android/src/main/java/com/savefilepickerpackage/SaveFilePickerTurboPackage.kt",
      "fileContent": "package com.savefilepickerpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass SaveFilePickerTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        if (name == SaveFilePickerModule.NAME) {\n            return SaveFilePickerModule(reactContext)\n        }\n        return null\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            SaveFilePickerModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}\n",
      "stars": 70,
      "lastCommitDate": "2024-06-02T08:49:10Z"
    },
    {
      "repository": "mateusz1913/rnbridgingtutorial",
      "file": "screen-orientation-package/android/src/main/java/com/screenorientationpackage/ScreenOrientationTurboPackage.kt",
      "url": "https://github.com/mateusz1913/rnbridgingtutorial/blob/5ffbcb451066cd43807337a3c1a42c26402a814f/screen-orientation-package/android/src/main/java/com/screenorientationpackage/ScreenOrientationTurboPackage.kt",
      "fileContent": "package com.screenorientationpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass ScreenOrientationTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        if (name == ScreenOrientationModule.NAME) {\n            return ScreenOrientationModule(reactContext)\n        }\n        return null\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            ScreenOrientationModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}\n",
      "stars": 70,
      "lastCommitDate": "2024-06-02T08:49:10Z"
    },
    {
      "repository": "mateusz1913/rnbridgingtutorial",
      "file": "native-list-package/android/src/main/java/com/nativelistpackage/NativeListTurboPackage.kt",
      "url": "https://github.com/mateusz1913/rnbridgingtutorial/blob/5ffbcb451066cd43807337a3c1a42c26402a814f/native-list-package/android/src/main/java/com/nativelistpackage/NativeListTurboPackage.kt",
      "fileContent": "package com.nativelistpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass NativeListTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return null\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf(AndroidNativeListViewManager())\n    }\n}\n",
      "stars": 70,
      "lastCommitDate": "2024-06-02T08:49:10Z"
    },
    {
      "repository": "mateusz1913/rnbridgingtutorial",
      "file": "app-info-package/android/src/main/java/com/appinfopackage/AppInfoTurboPackage.kt",
      "url": "https://github.com/mateusz1913/rnbridgingtutorial/blob/5ffbcb451066cd43807337a3c1a42c26402a814f/app-info-package/android/src/main/java/com/appinfopackage/AppInfoTurboPackage.kt",
      "fileContent": "package com.appinfopackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass AppInfoTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            AppInfoModule.NAME -> AppInfoModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            AppInfoModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}\n",
      "stars": 70,
      "lastCommitDate": "2024-06-02T08:49:10Z"
    },
    {
      "repository": "mateusz1913/rnbridgingtutorial",
      "file": "conic-gradient-package/android/src/main/java/com/conicgradientpackage/ConicGradientTurboPackage.kt",
      "url": "https://github.com/mateusz1913/rnbridgingtutorial/blob/5ffbcb451066cd43807337a3c1a42c26402a814f/conic-gradient-package/android/src/main/java/com/conicgradientpackage/ConicGradientTurboPackage.kt",
      "fileContent": "package com.conicgradientpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass ConicGradientTurboPackage : TurboReactPackage() {\n    /**\n    * Initialize and export modules based on the name of the required module\n    */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return null\n    }\n\n    /**\n    * Declare info about exported modules\n    */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n        * Here declare the array of exported modules\n        */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n        * And here just iterate on that array and produce the info provider instance\n        */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n            }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n        * Here declare the list of exported native components\n        */\n        return listOf(ConicGradientViewManager())\n    }\n}\n",
      "stars": 70,
      "lastCommitDate": "2024-06-02T08:49:10Z"
    },
    {
      "repository": "Giphy/giphy-react-native-sdk",
      "file": "android/src/main/java/com/giphyreactnativesdk/RTNGiphySdkPackage.kt",
      "url": "https://github.com/Giphy/giphy-react-native-sdk/blob/abf0de2f834b19e41d5399465ec46d95405d0a01/android/src/main/java/com/giphyreactnativesdk/RTNGiphySdkPackage.kt",
      "fileContent": "package com.giphyreactnativesdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\n@Suppress(\"unused\")\nclass RTNGiphySdkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      RTNGiphySdkModule.NAME -> {\n        RTNGiphySdkModule(reactContext)\n      }\n\n      RTNGiphyDialogModule.NAME -> {\n        RTNGiphyDialogModule(reactContext)\n      }\n\n      RTNGiphyVideoManager.NAME -> {\n        RTNGiphyVideoManager(reactContext)\n      }\n\n      else -> {\n        null\n      }\n    }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    val viewManagers: MutableList<ViewManager<*, *>> = ArrayList()\n    viewManagers.add(RTNGiphyMediaViewManager())\n    viewManagers.add(RTNGiphyVideoViewManager())\n    viewManagers.add(RTNGiphyGridViewManager())\n    return viewManagers\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RTNGiphySdkModule.NAME] = ReactModuleInfo(\n        RTNGiphySdkModule.NAME,\n        RTNGiphySdkModule.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n      moduleInfos[RTNGiphyDialogModule.NAME] = ReactModuleInfo(\n        RTNGiphyDialogModule.NAME,\n        RTNGiphyDialogModule.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n      moduleInfos[RTNGiphyVideoManager.NAME] = ReactModuleInfo(\n        RTNGiphyVideoManager.NAME,\n        RTNGiphyVideoManager.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 69,
      "lastCommitDate": "2024-11-12T18:46:01Z"
    },
    {
      "repository": "braze-inc/braze-react-native-sdk",
      "file": "android/src/main/java/com/braze/reactbridge/BrazeReactBridgePackage.kt",
      "url": "https://github.com/braze-inc/braze-react-native-sdk/blob/74b185ab3b7fb3b3345b36ff24f2b255fb83f5de/android/src/main/java/com/braze/reactbridge/BrazeReactBridgePackage.kt",
      "fileContent": "package com.braze.reactbridge\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass BrazeReactBridgePackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == BrazeReactBridgeImpl.NAME) {\n            BrazeReactBridge(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[BrazeReactBridgeImpl.NAME] = ReactModuleInfo(\n                BrazeReactBridgeImpl.NAME,\n                BrazeReactBridgeImpl.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 64,
      "lastCommitDate": "2024-10-28T14:07:12Z"
    },
    {
      "repository": "CleverTap/clevertap-react-native",
      "file": "android/src/main/java/com/clevertap/react/CleverTapPackage.kt",
      "url": "https://github.com/CleverTap/clevertap-react-native/blob/2c2ab9664b9e83cde936d14b511896d7edd5ecdc/android/src/main/java/com/clevertap/react/CleverTapPackage.kt",
      "fileContent": "package com.clevertap.react\n\nimport com.clevertap.react.Constants.REACT_MODULE_NAME\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass CleverTapPackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == REACT_MODULE_NAME) {\n            CleverTapModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[REACT_MODULE_NAME] = ReactModuleInfo(\n                REACT_MODULE_NAME,\n                REACT_MODULE_NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 61,
      "lastCommitDate": "2024-11-06T10:20:11Z"
    },
    {
      "repository": "callstackincubator/ai",
      "file": "android/src/main/java/com/ai/AiPackage.kt",
      "url": "https://github.com/callstackincubator/ai/blob/01f3a17061800d2bcd61a77564a15d5c2c0af9e5/android/src/main/java/com/ai/AiPackage.kt",
      "fileContent": "package com.ai\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AiPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AiModule.NAME) {\n      AiModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AiModule.NAME] = ReactModuleInfo(\n        AiModule.NAME,\n        AiModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 56,
      "lastCommitDate": "2024-07-24T11:57:24Z"
    },
    {
      "repository": "cipolleschi/InAppModule",
      "file": "android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "url": "https://github.com/cipolleschi/InAppModule/blob/82989bb2c441fa6da9208f763f4f3062e33b33e7/android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "fileContent": "package com.nativelocalstorage;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeLocalStoragePackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == NativeLocalStorageModule.NAME) {\n      NativeLocalStorageModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      NativeLocalStorageModule.NAME to ReactModuleInfo(\n        NativeLocalStorageModule.NAME,\n        NativeLocalStorageModule.NAME,\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        false, // isCxxModule\n        true // isTurboModule\n      )\n    )\n  }\n}\n",
      "stars": 56,
      "lastCommitDate": "2024-09-10T15:53:15Z"
    },
    {
      "repository": "atlj/react-native-background-remover",
      "file": "packages/react-native-background-remover/android/src/main/java/com/backgroundremover/BackgroundRemoverPackage.kt",
      "url": "https://github.com/atlj/react-native-background-remover/blob/0b964b107f9d9952749b9218d809125b17ade15d/packages/react-native-background-remover/android/src/main/java/com/backgroundremover/BackgroundRemoverPackage.kt",
      "fileContent": "package com.backgroundremover\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass BackgroundRemoverPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == BackgroundRemoverModule.NAME) {\n      BackgroundRemoverModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[BackgroundRemoverModule.NAME] = ReactModuleInfo(\n        BackgroundRemoverModule.NAME,\n        BackgroundRemoverModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 54,
      "lastCommitDate": "2024-12-17T20:52:12Z"
    },
    {
      "repository": "huextrat/react-native-rate-app",
      "file": "android/src/main/java/com/rateapp/RateAppPackage.kt",
      "url": "https://github.com/huextrat/react-native-rate-app/blob/919a3b5cb16e91e8fa4b3a8d345e994ee39e661e/android/src/main/java/com/rateapp/RateAppPackage.kt",
      "fileContent": "package com.rateapp\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RateAppPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RateAppModule.NAME) {\n      RateAppModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[RateAppModule.NAME] = ReactModuleInfo(\n        RateAppModule.NAME,\n        RateAppModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 52,
      "lastCommitDate": "2024-12-18T19:55:06Z"
    },
    {
      "repository": "pnthach95/react-native-root-view-background",
      "file": "android/src/main/java/vn/pnthach95/reactnativerootviewbackground/RootViewBackgroundPackage.kt",
      "url": "https://github.com/pnthach95/react-native-root-view-background/blob/7af4570fc0a26a5739580b3f6fbe0ecde1f1b8e8/android/src/main/java/vn/pnthach95/reactnativerootviewbackground/RootViewBackgroundPackage.kt",
      "fileContent": "package vn.pnthach95.reactnativerootviewbackground\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RootViewBackgroundPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RootViewBackgroundModule.NAME) {\n      RootViewBackgroundModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RootViewBackgroundModule.NAME] = ReactModuleInfo(\n        RootViewBackgroundModule.NAME,\n        RootViewBackgroundModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 47,
      "lastCommitDate": "2024-11-06T01:28:15Z"
    },
    {
      "repository": "gutenye/ocr",
      "file": "packages/react-native/android/src/main/java/com/ocr/RNOcrPackage.kt",
      "url": "https://github.com/gutenye/ocr/blob/7a951693ca4e5a550f3162e1710cfde9f29f5373/packages/react-native/android/src/main/java/com/ocr/RNOcrPackage.kt",
      "fileContent": "package com.ocr\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RNOcrPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNOcrModule.NAME) {\n      RNOcrModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNOcrModule.NAME] = ReactModuleInfo(\n        RNOcrModule.NAME,\n        RNOcrModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}",
      "stars": 45,
      "lastCommitDate": "2024-12-13T09:18:37Z"
    },
    {
      "repository": "samitha9125/react-native-timezone",
      "file": "android/src/main/java/com/samitha/timezone/TimezonePackage.kt",
      "url": "https://github.com/samitha9125/react-native-timezone/blob/67aebe064b0ad255165ecb44d28687c6334daaf0/android/src/main/java/com/samitha/timezone/TimezonePackage.kt",
      "fileContent": "package com.samitha.timezone\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass TimezonePackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TimezoneModule.NAME) {\n      TimezoneModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[TimezoneModule.NAME] = ReactModuleInfo(\n        TimezoneModule.NAME,\n        TimezoneModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 40,
      "lastCommitDate": "2024-12-15T12:22:28Z"
    },
    {
      "repository": "vantuan88291/react-native-ota-hot-update",
      "file": "android/src/main/java/com/otahotupdate/OtaHotUpdate.kt",
      "url": "https://github.com/vantuan88291/react-native-ota-hot-update/blob/503467c2439acee72c5d04bfda8875448381dd09/android/src/main/java/com/otahotupdate/OtaHotUpdate.kt",
      "fileContent": "package com.otahotupdate\n\nimport android.content.Context\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.rnhotupdate.Common.DEFAULT_BUNDLE\nimport com.rnhotupdate.Common.PATH\nimport com.rnhotupdate.SharedPrefs\n\n\nclass OtaHotUpdate(context: Context?) : TurboReactPackage() {\n  init {\n    mContext = context\n  }\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == OtaHotUpdateModule.NAME) {\n      OtaHotUpdateModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[OtaHotUpdateModule.NAME] = ReactModuleInfo(\n        OtaHotUpdateModule.NAME,\n        OtaHotUpdateModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n  companion object {\n    private var mContext: Context? = null\n    val bundleJS: String\n      get() {\n        if (mContext == null) {\n          return DEFAULT_BUNDLE\n        }\n        val sharedPrefs = SharedPrefs(mContext!!)\n        val pathBundle = sharedPrefs.getString(PATH)\n        if (pathBundle == \"\") {\n          return DEFAULT_BUNDLE\n        }\n        return pathBundle!!\n      }\n  }\n}\n",
      "stars": 40,
      "lastCommitDate": "2024-12-19T01:52:48Z"
    },
    {
      "repository": "mattermost/react-native-network-client",
      "file": "android/src/main/java/com/mattermost/networkclient/NetworkClientPackage.kt",
      "url": "https://github.com/mattermost/react-native-network-client/blob/3a5ff038b3e671ec52f86ddc53fe225ad0bdc92b/android/src/main/java/com/mattermost/networkclient/NetworkClientPackage.kt",
      "fileContent": "package com.mattermost.networkclient\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NetworkClientPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n            when (name) {\n                GenericClientModuleImpl.NAME -> {\n                    GenericClientModule(reactContext)\n                }\n                ApiClientModuleImpl.NAME -> {\n                    ApiClientModule(reactContext)\n                }\n                WebSocketClientModuleImpl.NAME -> {\n                    WebSocketClientModule(reactContext)\n                }\n                else -> {\n                    null\n                }\n            }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n                GenericClientModuleImpl.NAME to ReactModuleInfo(\n                        GenericClientModuleImpl.NAME,\n                        GenericClientModuleImpl.NAME,\n                        false,\n                        false,\n                        false,\n                        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                ),\n                ApiClientModuleImpl.NAME to ReactModuleInfo(\n                        ApiClientModuleImpl.NAME,\n                        ApiClientModuleImpl.NAME,\n                        false,\n                        false,\n                        false,\n                        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                ),\n                WebSocketClientModuleImpl.NAME to ReactModuleInfo(\n                        WebSocketClientModuleImpl.NAME,\n                        WebSocketClientModuleImpl.NAME,\n                        false,\n                        false,\n                        false,\n                        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                )\n        )\n    }\n}\n",
      "stars": 35,
      "lastCommitDate": "2024-12-17T12:03:05Z"
    },
    {
      "repository": "birdofpreyru/react-native-audio",
      "file": "android/src/main/java/com/drpogodin/reactnativeaudio/ReactNativeAudioPackage.kt",
      "url": "https://github.com/birdofpreyru/react-native-audio/blob/3e4cf205ede709a08ab9d54a932d3e29bd67a72b/android/src/main/java/com/drpogodin/reactnativeaudio/ReactNativeAudioPackage.kt",
      "fileContent": "package com.drpogodin.reactnativeaudio\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ReactNativeAudioPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeAudioModule.NAME) {\n      ReactNativeAudioModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ReactNativeAudioModule.NAME] = ReactModuleInfo(\n        ReactNativeAudioModule.NAME,\n        ReactNativeAudioModule.NAME,\n        canOverrideExistingModule = false,  // canOverrideExistingModule\n        needsEagerInit = false,  // needsEagerInit\n        hasConstants = true,  // hasConstants\n        isCxxModule = false,  // isCxxModule\n        isTurboModule = isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 35,
      "lastCommitDate": "2024-10-30T23:05:10Z"
    },
    {
      "repository": "AndrewDongminYoo/react-native-step-counter",
      "file": "android/src/main/java/com/stepcounter/StepCounterPackage.kt",
      "url": "https://github.com/AndrewDongminYoo/react-native-step-counter/blob/85ff62b833dc16cb827eaa446a60c76301d38117/android/src/main/java/com/stepcounter/StepCounterPackage.kt",
      "fileContent": "package com.stepcounter\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\n/**\n * This class is responsible for the creation of the ReactNative package.\n * @see com.facebook.react.ReactPackage\n * @see TurboReactPackage\n * @see ReactApplicationContext\n * @see ReactModuleInfo\n * @see ReactModuleInfoProvider\n */\nclass StepCounterPackage : TurboReactPackage() {\n    /**\n     * This method is responsible for the creation of the ReactNative module.\n     * @param name The name of the module\n     * @param reactContext The context of the react-native application\n     * @return [com.facebook.react.module.model.ReactModuleInfo] ]The ReactNative module\n     * @see NativeModule\n     * @see ReactApplicationContext\n     * @see StepCounterModule\n     * @see StepCounterModule.NAME\n     */\n    override fun getModule(\n        name: String,\n        reactContext: ReactApplicationContext\n    ): NativeModule? = if (name == StepCounterModule.NAME) StepCounterModule(reactContext) else null\n\n    /**\n     * This method is responsible for the creation of the ReactNative module info provider.\n     * @return The ReactNative module info provider\n     * @see ReactModuleInfoProvider\n     * @see ReactModuleInfo\n     * @see BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n     * @see ReactModuleInfo.mCanOverrideExistingModule\n     * @see ReactModuleInfo.mNeedsEagerInit\n     * @see ReactModuleInfo.mHasConstants\n     * @see ReactModuleInfo.mIsCxxModule\n     * @see ReactModuleInfo.mIsTurboModule\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n        ReactModuleInfoProvider {\n            val moduleInfo: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfo[StepCounterModule.NAME] =\n                ReactModuleInfo(\n                    StepCounterModule.NAME,\n                    StepCounterModule.NAME,\n                    false, // canOverrideExistingModule\n                    false, // needsEagerInit\n                    true, // hasConstants\n                    false, // isCxxModule\n                    isTurboModule // isTurboModule\n                )\n            moduleInfo\n        }\n}",
      "stars": 32,
      "lastCommitDate": "2024-11-16T15:05:08Z"
    },
    {
      "repository": "IvanIhnatsiuk/react-native-fast-secure-storage",
      "file": "android/src/main/java/com/fastsecurestorage/FastSecureStoragePackage.kt",
      "url": "https://github.com/IvanIhnatsiuk/react-native-fast-secure-storage/blob/29c775eebb8fe8556d2abb4b574d3edc9b00785f/android/src/main/java/com/fastsecurestorage/FastSecureStoragePackage.kt",
      "fileContent": "package com.fastsecurestorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass FastSecureStoragePackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == FastSecureStorageModule.NAME) {\n      FastSecureStorageModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> =\n        HashMap()\n      moduleInfos[FastSecureStorageModule.NAME] =\n        ReactModuleInfo(\n          FastSecureStorageModule.NAME,\n          FastSecureStorageModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          true, // hasConstants\n          false, // isCxxModule\n          true, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 31,
      "lastCommitDate": "2024-12-06T12:13:39Z"
    },
    {
      "repository": "dcangulo/react-native-pkce-challenge",
      "file": "android/src/main/java/com/pkcechallenge/PkceChallengePackage.kt",
      "url": "https://github.com/dcangulo/react-native-pkce-challenge/blob/d3fbd4309b52d0845c6bd09a6ed45d531c530741/android/src/main/java/com/pkcechallenge/PkceChallengePackage.kt",
      "fileContent": "package com.pkcechallenge\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass PkceChallengePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == PkceChallengeModule.NAME) {\n      PkceChallengeModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[PkceChallengeModule.NAME] = ReactModuleInfo(\n        PkceChallengeModule.NAME,\n        PkceChallengeModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 30,
      "lastCommitDate": "2024-12-15T13:04:49Z"
    },
    {
      "repository": "itsramiel/react-native-audio-playback",
      "file": "android/src/main/java/com/audioplayback/AudioPlaybackPackage.kt",
      "url": "https://github.com/itsramiel/react-native-audio-playback/blob/777f9bd27e3e7973ac54c736e80b610a51e7bd31/android/src/main/java/com/audioplayback/AudioPlaybackPackage.kt",
      "fileContent": "package com.audioplayback\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AudioPlaybackPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AudioPlaybackModule.NAME) {\n      AudioPlaybackModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AudioPlaybackModule.NAME] = ReactModuleInfo(\n        AudioPlaybackModule.NAME,\n        AudioPlaybackModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 30,
      "lastCommitDate": "2024-12-13T20:47:25Z"
    },
    {
      "repository": "orbital-systems/react-native-esp-idf-provisioning",
      "file": "android/src/main/java/com/espidfprovisioning/EspIdfProvisioningPackage.kt",
      "url": "https://github.com/orbital-systems/react-native-esp-idf-provisioning/blob/a4c25c77780e01b35b8e08cbf208159e1491e2ce/android/src/main/java/com/espidfprovisioning/EspIdfProvisioningPackage.kt",
      "fileContent": "package com.espidfprovisioning\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass EspIdfProvisioningPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == EspIdfProvisioningModule.NAME) {\n      EspIdfProvisioningModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[EspIdfProvisioningModule.NAME] = ReactModuleInfo(\n                  EspIdfProvisioningModule.NAME,\n                  EspIdfProvisioningModule.NAME,\n                  false,  // canOverrideExistingModule\n                  false,  // needsEagerInit\n                  true,  // hasConstants\n                  false,  // isCxxModule\n                  isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 30,
      "lastCommitDate": "2024-11-22T08:49:51Z"
    },
    {
      "repository": "callstack/react-native-rapier",
      "file": "android/src/main/java/com/callstack/reactnativerapier/ReactNativeRapierPackage.kt",
      "url": "https://github.com/callstack/react-native-rapier/blob/533182886223aea1d773d01877671edf8c09c644/android/src/main/java/com/callstack/reactnativerapier/ReactNativeRapierPackage.kt",
      "fileContent": "package com.callstack.reactnativerapier\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ReactNativeRapierPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeRapierModule.NAME) {\n      ReactNativeRapierModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ReactNativeRapierModule.NAME] = ReactModuleInfo(\n        ReactNativeRapierModule.NAME,\n        ReactNativeRapierModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 29,
      "lastCommitDate": "2024-11-08T20:55:45Z"
    },
    {
      "repository": "vokhuyetOz/react-native-concurrent-sound",
      "file": "android/src/main/java/com/concurrentsound/ConcurrentSoundPackage.kt",
      "url": "https://github.com/vokhuyetOz/react-native-concurrent-sound/blob/ae16acbb4d80e206674fc84968d8fa66f1a25fac/android/src/main/java/com/concurrentsound/ConcurrentSoundPackage.kt",
      "fileContent": "package com.concurrentsound\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ConcurrentSoundPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ConcurrentSoundModule.NAME) {\n      ConcurrentSoundModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ConcurrentSoundModule.NAME] = ReactModuleInfo(\n        ConcurrentSoundModule.NAME,\n        ConcurrentSoundModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 28,
      "lastCommitDate": "2024-11-18T09:05:15Z"
    },
    {
      "repository": "trieulongben/react-native-wallpaper-manager",
      "file": "android/src/main/java/com/rtn_device_wallpaper/DeviceWallpaperPackage.kt",
      "url": "https://github.com/trieulongben/react-native-wallpaper-manager/blob/ba22e33167282f847b8e5a2074a5e08826c560dc/android/src/main/java/com/rtn_device_wallpaper/DeviceWallpaperPackage.kt",
      "fileContent": "package com.rtn_device_wallpaper;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.SupervisorJob\n\nval myPluginScope = CoroutineScope(SupervisorJob() + Dispatchers.Main.immediate)\n\nenum class DESTINATION(val value:String){\n  BOTH(\"both\"),\n  LOCK(\"lock\"),\n  SYSTEM(\"system\")\n}\n\nclass DeviceWallpaperPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactAppContext: ReactApplicationContext): NativeModule? {\n    if(name==DeviceWallpaperModule.NAME){\n      return DeviceWallpaperModule(reactAppContext)\n    }\n    else{\n    return null\n\n    }\n  }\n  override fun getReactModuleInfoProvider()=ReactModuleInfoProvider {\n    mapOf(\n      DeviceWallpaperModule.NAME to ReactModuleInfo(\n        DeviceWallpaperModule.NAME,DeviceWallpaperModule.NAME,false,false,true,false,true\n      )\n    )\n  }\n}\n",
      "stars": 27,
      "lastCommitDate": "2024-10-06T13:38:08Z"
    },
    {
      "repository": "gladiuscode/react-native-orientation-director",
      "file": "android/src/main/java/com/orientationdirector/OrientationDirectorPackage.kt",
      "url": "https://github.com/gladiuscode/react-native-orientation-director/blob/4931029c8ac89ed78b19ca2d21bb486317e0d3dc/android/src/main/java/com/orientationdirector/OrientationDirectorPackage.kt",
      "fileContent": "package com.orientationdirector\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.orientationdirector.implementation.OrientationDirectorModuleImpl\nimport java.util.HashMap\n\nclass OrientationDirectorPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == OrientationDirectorModuleImpl.NAME) {\n      OrientationDirectorModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[OrientationDirectorModuleImpl.NAME] = ReactModuleInfo(\n        OrientationDirectorModuleImpl.NAME,\n        OrientationDirectorModuleImpl.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 27,
      "lastCommitDate": "2024-11-10T16:23:02Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-maps",
      "file": "packages/core/android/src/main/java/com/openmobilehub/android/rn/maps/core/RNOmhMapsCorePackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-maps/blob/c2b6ec914b917d2dfdc5f58cb93dbefa49c5bb53/packages/core/android/src/main/java/com/openmobilehub/android/rn/maps/core/RNOmhMapsCorePackage.kt",
      "fileContent": "package com.openmobilehub.android.rn.maps.core\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass RNOmhMapsCoreTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            RNOmhMapsCoreModule.NAME -> RNOmhMapsCoreModule(reactContext)\n            RNOmhMapsLocationModule.NAME -> RNOmhMapsLocationModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            RNOmhMapsCoreModule::class.java,\n            RNOmhMapsLocationModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf(\n            RNOmhMapsCoreViewManager(),\n            RNOmhMapsMarkerViewManager(),\n            RNOmhMapsPolylineViewManager(),\n            RNOmhMapsPolygonViewManager()\n        )\n    }\n}\n",
      "stars": 25,
      "lastCommitDate": "2024-10-25T10:35:38Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-maps",
      "file": "packages/plugin-googlemaps/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/googlemaps/RNOmhMapsPluginGooglemapsPackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-maps/blob/c2b6ec914b917d2dfdc5f58cb93dbefa49c5bb53/packages/plugin-googlemaps/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/googlemaps/RNOmhMapsPluginGooglemapsPackage.kt",
      "fileContent": "package com.openmobilehub.android.rn.maps.plugin.googlemaps\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass RNOmhMapsPluginGooglemapsTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return null\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = emptyArray()\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf()\n    }\n}\n",
      "stars": 25,
      "lastCommitDate": "2024-10-25T10:35:38Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-maps",
      "file": "packages/plugin-mapbox/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/mapbox/RNOmhMapsPluginMapboxPackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-maps/blob/c2b6ec914b917d2dfdc5f58cb93dbefa49c5bb53/packages/plugin-mapbox/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/mapbox/RNOmhMapsPluginMapboxPackage.kt",
      "fileContent": "package com.openmobilehub.android.rn.maps.plugin.mapbox\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass OmhMapsPluginMapboxTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            RNOmhMapsPluginMapboxModule.NAME -> RNOmhMapsPluginMapboxModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            RNOmhMapsPluginMapboxModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf()\n    }\n}\n",
      "stars": 25,
      "lastCommitDate": "2024-10-25T10:35:38Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-maps",
      "file": "packages/plugin-openstreetmap/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/openstreetmap/RNOmhMapsPluginOpenstreetmapPackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-maps/blob/c2b6ec914b917d2dfdc5f58cb93dbefa49c5bb53/packages/plugin-openstreetmap/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/openstreetmap/RNOmhMapsPluginOpenstreetmapPackage.kt",
      "fileContent": "package com.openmobilehub.android.rn.maps.plugin.openstreetmap\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\nimport com.openmobilehub.android.rn.maps.plugin.openstreetmap.RNOmhMapsPluginOpenstreetmapModule\n\nclass OmhMapsPluginOpenstreetmapTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            RNOmhMapsPluginOpenstreetmapModule.NAME -> RNOmhMapsPluginOpenstreetmapModule(\n                reactContext\n            )\n\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            RNOmhMapsPluginOpenstreetmapModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf()\n    }\n}\n",
      "stars": 25,
      "lastCommitDate": "2024-10-25T10:35:38Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-maps",
      "file": "packages/plugin-azuremaps/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/azuremaps/RNOmhMapsPluginAzuremapsPackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-maps/blob/c2b6ec914b917d2dfdc5f58cb93dbefa49c5bb53/packages/plugin-azuremaps/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/azuremaps/RNOmhMapsPluginAzuremapsPackage.kt",
      "fileContent": "package com.openmobilehub.android.rn.maps.plugin.azuremaps\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass OmhMapsPluginAzuremapsTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            RNOmhMapsPluginAzuremapsModule.NAME -> RNOmhMapsPluginAzuremapsModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            RNOmhMapsPluginAzuremapsModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf()\n    }\n}\n",
      "stars": 25,
      "lastCommitDate": "2024-10-25T10:35:38Z"
    },
    {
      "repository": "gronxb/hot-updater",
      "file": "packages/react-native/android/src/main/java/com/hotupdater/HotUpdaterPackage.kt",
      "url": "https://github.com/gronxb/hot-updater/blob/26298f2392040ee9600286716262a1899fc5dc38/packages/react-native/android/src/main/java/com/hotupdater/HotUpdaterPackage.kt",
      "fileContent": "package com.hotupdater\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass HotUpdaterPackage : TurboReactPackage() {\n    override fun getModule(\n        name: String,\n        reactContext: ReactApplicationContext,\n    ): NativeModule? =\n        if (name == HotUpdaterModule.NAME) {\n            HotUpdaterModule(reactContext)\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n        ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[HotUpdaterModule.NAME] =\n                ReactModuleInfo(\n                    HotUpdaterModule.NAME,\n                    HotUpdaterModule.NAME,\n                    false, // canOverrideExistingModule\n                    false, // needsEagerInit\n                    true, // hasConstants\n                    false, // isCxxModule\n                    isTurboModule, // isTurboModule\n                )\n            moduleInfos\n        }\n}\n",
      "stars": 21,
      "lastCommitDate": "2024-12-04T10:51:47Z"
    },
    {
      "repository": "unomed-dev/react-native-matrix-sdk",
      "file": "android/src/main/java/com/unomed/reactnativematrixsdk/ReactNativeMatrixSdkPackage.kt",
      "url": "https://github.com/unomed-dev/react-native-matrix-sdk/blob/af45eb3c8b2c886cc51331f7970da867d18fe1ee/android/src/main/java/com/unomed/reactnativematrixsdk/ReactNativeMatrixSdkPackage.kt",
      "fileContent": "// Generated by uniffi-bindgen-react-native\npackage com.unomed.reactnativematrixsdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass ReactNativeMatrixSdkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeMatrixSdkModule.NAME) {\n      ReactNativeMatrixSdkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[ReactNativeMatrixSdkModule.NAME] = ReactModuleInfo(\n        ReactNativeMatrixSdkModule.NAME,\n        ReactNativeMatrixSdkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}",
      "stars": 21,
      "lastCommitDate": "2024-12-19T07:43:39Z"
    }
  ]
}