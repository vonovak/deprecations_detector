{
  "query": "ReactModuleInfo( NOT is:fork language:Kotlin",
  "totalCount": 406,
  "matches": [
    {
      "repository": "facebook/react-native",
      "file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/module/model/ReactModuleInfo.kt",
      "url": "https://github.com/facebook/react-native/blob/b8f3f919cc9ebbd086d9ac79c93fffd532c55b09/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/module/model/ReactModuleInfo.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.module.model\n\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\n/**\n * Data holder class holding native module specifications. [ReactModuleSpecProcessor] creates these\n * so Java modules don't have to be instantiated at React Native start up.\n */\npublic class ReactModuleInfo(\n    @get:JvmName(\"name\") public val name: String,\n    @get:JvmName(\"className\") public val className: String,\n    @get:JvmName(\"canOverrideExistingModule\") public val canOverrideExistingModule: Boolean,\n    @get:JvmName(\"needsEagerInit\") public val needsEagerInit: Boolean,\n    public val isCxxModule: Boolean,\n    public val isTurboModule: Boolean\n) {\n\n  @Deprecated(\n      \"This constructor is deprecated and will be removed in the future. Use ReactModuleInfo(String, String, boolean, boolean, boolean, boolean)]\",\n      replaceWith =\n          ReplaceWith(\n              expression =\n                  \"ReactModuleInfo(name, className, canOverrideExistingModule, needsEagerInit, isCxxModule, isTurboModule)\"),\n      level = DeprecationLevel.WARNING)\n  public constructor(\n      name: String,\n      className: String,\n      canOverrideExistingModule: Boolean,\n      needsEagerInit: Boolean,\n      @Suppress(\"UNUSED_PARAMETER\") hasConstants: Boolean,\n      isCxxModule: Boolean,\n      isTurboModule: Boolean\n  ) : this(name, className, canOverrideExistingModule, needsEagerInit, isCxxModule, isTurboModule)\n\n  public companion object {\n    /**\n     * Checks if the passed class is a TurboModule. Useful to populate the parameter [isTurboModule]\n     * in the constructor of ReactModuleInfo.\n     */\n    @JvmStatic\n    public fun classIsTurboModule(clazz: Class<*>): Boolean =\n        TurboModule::class.java.isAssignableFrom(clazz)\n  }\n}\n",
      "stars": 119775,
      "lastCommitDate": "2024-12-19T01:39:30Z"
    },
    {
      "repository": "teslamotors/react-native-camera-kit",
      "file": "android/src/main/java/com/rncamerakit/RNCameraKitPackage.kt",
      "url": "https://github.com/teslamotors/react-native-camera-kit/blob/55bdd972f5eab95c8a61c0d0194ed66bfdce7aeb/android/src/main/java/com/rncamerakit/RNCameraKitPackage.kt",
      "fileContent": "package com.rncamerakit\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport java.util.*\n\n@ReactModuleList(nativeModules = [RNCameraKitModule::class])\nclass RNCameraKitPackage : TurboReactPackage() {\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        val viewManagers: MutableList<ViewManager<*, *>> = ArrayList()\n        viewManagers.add(CKCameraManager())\n        return viewManagers\n    }\n\n    override fun getModule(s: String, reactApplicationContext: ReactApplicationContext): NativeModule? {\n        when (s) {\n            RNCameraKitModule.REACT_CLASS -> return RNCameraKitModule(reactApplicationContext)\n        }\n        return null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[RNCameraKitModule.REACT_CLASS] = ReactModuleInfo(\n                RNCameraKitModule.REACT_CLASS,\n                RNCameraKitModule.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 2499,
      "lastCommitDate": "2024-11-14T23:27:20Z"
    },
    {
      "repository": "expo/expo",
      "file": "apps/bare-expo/modules/benchmarking/android/src/main/java/expo/modules/benchmark/BenchmarkingTurboPackage.kt",
      "url": "https://github.com/expo/expo/blob/13889cda0dc0a8da88e88c13943b252f2b625a65/apps/bare-expo/modules/benchmarking/android/src/main/java/expo/modules/benchmark/BenchmarkingTurboPackage.kt",
      "fileContent": "package expo.modules.benchmark\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass BenchmarkingTurboPackage : TurboReactPackage() {\n  override fun getModule(name: String, context: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      \"BenchmarkingTurboModule\" -> BenchmarkingTurboModule(context)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      \"BenchmarkingTurboModule\" to ReactModuleInfo(\n        \"BenchmarkingTurboModule\",\n        \"BenchmarkingTurboModule\",\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        true, // hasConstants\n        false, // isCxxModule\n        true // isTurboModule\n      )\n    )\n  }\n}\n",
      "stars": 35538,
      "lastCommitDate": "2024-12-18T21:28:11Z"
    },
    {
      "repository": "oblador/react-native-vector-icons",
      "file": "packages/common/android/src/main/java/com/reactnativevectoricons/common/VectorIconsPackage.kt",
      "url": "https://github.com/oblador/react-native-vector-icons/blob/d43de84ddbcea93d96b021a6cf0d5009d795624f/packages/common/android/src/main/java/com/reactnativevectoricons/common/VectorIconsPackage.kt",
      "fileContent": "package com.reactnativevectoricons.common\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass VectorIconsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == VectorIconsModule.NAME) {\n      VectorIconsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[VectorIconsModule.NAME] = ReactModuleInfo(\n        VectorIconsModule.NAME, // name\n        VectorIconsModule.NAME, // className\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false, // hasConstants NOTE: This is deprecated but we need it to keep compatability with RN <= 0.72\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 17481,
      "lastCommitDate": "2024-12-15T00:09:36Z"
    },
    {
      "repository": "rnmapbox/maps",
      "file": "android/src/main/java/com/rnmapbox/rnmbx/RNMBXPackage.kt",
      "url": "https://github.com/rnmapbox/maps/blob/fa80ae549a65d8473cd731f79f57a65fcc9c9fbc/android/src/main/java/com/rnmapbox/rnmbx/RNMBXPackage.kt",
      "fileContent": "package com.rnmapbox.rnmbx\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.JavaScriptModule\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport com.rnmapbox.rnmbx.components.annotation.RNMBXCalloutManager\nimport com.rnmapbox.rnmbx.components.annotation.RNMBXMarkerViewContentManager\nimport com.rnmapbox.rnmbx.components.annotation.RNMBXMarkerViewManager\nimport com.rnmapbox.rnmbx.components.annotation.RNMBXPointAnnotationManager\nimport com.rnmapbox.rnmbx.components.annotation.RNMBXPointAnnotationModule\nimport com.rnmapbox.rnmbx.components.camera.RNMBXCameraManager\nimport com.rnmapbox.rnmbx.components.camera.RNMBXCameraModule\nimport com.rnmapbox.rnmbx.components.camera.RNMBXViewport\nimport com.rnmapbox.rnmbx.components.camera.RNMBXViewportManager\nimport com.rnmapbox.rnmbx.components.camera.RNMBXViewportModule\nimport com.rnmapbox.rnmbx.components.images.RNMBXImageManager\nimport com.rnmapbox.rnmbx.components.images.RNMBXImageModule\nimport com.rnmapbox.rnmbx.components.images.RNMBXImagesManager\nimport com.rnmapbox.rnmbx.components.location.RNMBXCustomLocationProviderManager\nimport com.rnmapbox.rnmbx.components.location.RNMBXNativeUserLocationManager\nimport com.rnmapbox.rnmbx.components.mapview.NativeMapViewModule\nimport com.rnmapbox.rnmbx.components.mapview.RNMBXMapViewManager\nimport com.rnmapbox.rnmbx.components.styles.RNMBXStyleImportManager\nimport com.rnmapbox.rnmbx.components.styles.atmosphere.RNMBXAtmosphereManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXBackgroundLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXCircleLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXFillExtrusionLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXFillLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXHeatmapLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXLineLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXModelLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXRasterLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXSkyLayerManager\nimport com.rnmapbox.rnmbx.components.styles.layers.RNMBXSymbolLayerManager\nimport com.rnmapbox.rnmbx.components.styles.light.RNMBXLightManager\nimport com.rnmapbox.rnmbx.components.styles.model.RNMBXModelsManager\nimport com.rnmapbox.rnmbx.components.styles.sources.RNMBXImageSourceManager\nimport com.rnmapbox.rnmbx.components.styles.sources.RNMBXRasterDemSourceManager\nimport com.rnmapbox.rnmbx.components.styles.sources.RNMBXRasterSourceManager\nimport com.rnmapbox.rnmbx.components.styles.sources.RNMBXShapeSourceManager\nimport com.rnmapbox.rnmbx.components.styles.sources.RNMBXShapeSourceModule\nimport com.rnmapbox.rnmbx.components.styles.sources.RNMBXVectorSourceManager\nimport com.rnmapbox.rnmbx.components.styles.terrain.RNMBXTerrainManager\nimport com.rnmapbox.rnmbx.modules.RNMBXLocationModule\nimport com.rnmapbox.rnmbx.modules.RNMBXLogging\nimport com.rnmapbox.rnmbx.modules.RNMBXModule\nimport com.rnmapbox.rnmbx.modules.RNMBXOfflineModule\nimport com.rnmapbox.rnmbx.modules.RNMBXOfflineModuleLegacy\nimport com.rnmapbox.rnmbx.modules.RNMBXSnapshotModule\nimport com.rnmapbox.rnmbx.modules.RNMBXTileStoreModule\nimport com.rnmapbox.rnmbx.shapeAnimators.RNMBXChangeLineOffsetsShapeAnimatorModule\nimport com.rnmapbox.rnmbx.shapeAnimators.RNMBXMovePointShapeAnimatorModule\nimport com.rnmapbox.rnmbx.shapeAnimators.ShapeAnimatorManager\nimport com.rnmapbox.rnmbx.utils.ViewTagResolver\n\nclass RNMBXPackage : TurboReactPackage() {\n\n    var viewTagResolver: ViewTagResolver? = null\n    fun getViewTagResolver(context: ReactApplicationContext, module: String) : ViewTagResolver {\n        val viewTagResolver = viewTagResolver\n        if (viewTagResolver == null) {\n            val result = ViewTagResolver(context)\n            this.viewTagResolver = result\n            return result\n        }\n        return viewTagResolver\n    }\n\n    var shapeAnimators: ShapeAnimatorManager? = null\n    fun getShapeAnimators(module: String): ShapeAnimatorManager {\n        val shapeAnimators = shapeAnimators\n        if (shapeAnimators == null) {\n            val result = ShapeAnimatorManager()\n            this.shapeAnimators = result\n            return result\n        }\n        return shapeAnimators\n    }\n\n    fun resetViewTagResolver() {\n        viewTagResolver = null\n    }\n\n    override fun getModule(\n        s: String,\n        reactApplicationContext: ReactApplicationContext\n    ): NativeModule? {\n        when (s) {\n            RNMBXModule.REACT_CLASS -> return RNMBXModule(reactApplicationContext)\n            RNMBXLocationModule.REACT_CLASS -> return RNMBXLocationModule(reactApplicationContext)\n            RNMBXOfflineModule.REACT_CLASS -> return RNMBXOfflineModule(reactApplicationContext)\n            RNMBXTileStoreModule.REACT_CLASS -> return RNMBXTileStoreModule(reactApplicationContext)\n            RNMBXOfflineModuleLegacy.REACT_CLASS -> return RNMBXOfflineModuleLegacy(reactApplicationContext)\n            RNMBXSnapshotModule.REACT_CLASS -> return RNMBXSnapshotModule(reactApplicationContext)\n            RNMBXLogging.REACT_CLASS -> return RNMBXLogging(reactApplicationContext)\n            NativeMapViewModule.NAME -> return NativeMapViewModule(reactApplicationContext, getViewTagResolver(reactApplicationContext, s))\n            RNMBXCameraModule.NAME -> return RNMBXCameraModule(reactApplicationContext, getViewTagResolver(reactApplicationContext, s))\n            RNMBXViewportModule.NAME -> return RNMBXViewportModule(reactApplicationContext, getViewTagResolver(reactApplicationContext, s))\n            RNMBXShapeSourceModule.NAME -> return RNMBXShapeSourceModule(reactApplicationContext, getViewTagResolver(reactApplicationContext, s))\n            RNMBXImageModule.NAME -> return RNMBXImageModule(reactApplicationContext, getViewTagResolver(reactApplicationContext, s))\n            RNMBXPointAnnotationModule.NAME -> return RNMBXPointAnnotationModule(reactApplicationContext, getViewTagResolver(reactApplicationContext, s))\n            RNMBXMovePointShapeAnimatorModule.NAME -> return RNMBXMovePointShapeAnimatorModule(reactApplicationContext, getShapeAnimators(s))\n            RNMBXChangeLineOffsetsShapeAnimatorModule.NAME -> return RNMBXChangeLineOffsetsShapeAnimatorModule(reactApplicationContext, getShapeAnimators(s))\n        }\n        return null\n    }\n\n    @Deprecated(\"\")\n    fun createJSModules(): List<Class<out JavaScriptModule?>> {\n        return emptyList()\n    }\n\n    override fun createViewManagers(reactApplicationContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        val managers: MutableList<ViewManager<*, *>> = ArrayList()\n\n        // components\n        managers.add(RNMBXCameraManager(reactApplicationContext, getViewTagResolver(reactApplicationContext, \"RNMBXCameraManager\")))\n        managers.add(RNMBXViewportManager(reactApplicationContext, getViewTagResolver(reactApplicationContext, \"RNMBXViewportManager\")))\n        managers.add(RNMBXMapViewManager(reactApplicationContext, getViewTagResolver(reactApplicationContext, \"RNMBXMapViewManager\")))\n        managers.add(RNMBXStyleImportManager(reactApplicationContext))\n        managers.add(RNMBXModelsManager(reactApplicationContext))\n\n        // annotations\n        managers.add(RNMBXMarkerViewManager(reactApplicationContext))\n        managers.add(RNMBXMarkerViewContentManager(reactApplicationContext))\n        managers.add(RNMBXPointAnnotationManager(reactApplicationContext, getViewTagResolver(reactApplicationContext, \"RNMBXPointAnnotationManager\")))\n        managers.add(RNMBXCalloutManager())\n        managers.add(RNMBXNativeUserLocationManager())\n        managers.add(RNMBXCustomLocationProviderManager())\n\n        // sources\n        managers.add(RNMBXVectorSourceManager(reactApplicationContext))\n        managers.add(RNMBXShapeSourceManager(reactApplicationContext,\n            getViewTagResolver(reactApplicationContext, \"RNMBXShapeSourceManager\"),\n            getShapeAnimators(\"RNMBXShapeSourceManager\")\n            ))\n        managers.add(RNMBXRasterDemSourceManager(reactApplicationContext))\n        managers.add(RNMBXRasterSourceManager(reactApplicationContext))\n        managers.add(RNMBXImageSourceManager())\n\n        // images\n        managers.add(RNMBXImagesManager(reactApplicationContext))\n        managers.add(RNMBXImageManager(reactApplicationContext, getViewTagResolver(reactApplicationContext, \"RNMBXImageManager\")))\n\n        // layers\n        managers.add(RNMBXFillLayerManager())\n        managers.add(RNMBXFillExtrusionLayerManager())\n        managers.add(RNMBXHeatmapLayerManager())\n        managers.add(RNMBXLineLayerManager())\n        managers.add(RNMBXCircleLayerManager())\n        managers.add(RNMBXSymbolLayerManager())\n        managers.add(RNMBXRasterLayerManager())\n        managers.add(RNMBXSkyLayerManager())\n        managers.add(RNMBXTerrainManager())\n        managers.add(RNMBXAtmosphereManager())\n        managers.add(RNMBXBackgroundLayerManager())\n        managers.add(RNMBXLightManager())\n        managers.add(RNMBXModelLayerManager())\n        return managers\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        resetViewTagResolver()\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[RNMBXModule.REACT_CLASS] = ReactModuleInfo(\n                RNMBXModule.REACT_CLASS,\n                RNMBXModule.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[RNMBXLocationModule.REACT_CLASS] = ReactModuleInfo(\n                RNMBXLocationModule.REACT_CLASS,\n                RNMBXLocationModule.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[RNMBXOfflineModule.REACT_CLASS] = ReactModuleInfo(\n                RNMBXOfflineModule.REACT_CLASS,\n                RNMBXOfflineModule.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[RNMBXTileStoreModule.REACT_CLASS] = ReactModuleInfo(\n                RNMBXTileStoreModule.REACT_CLASS,\n                RNMBXTileStoreModule.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[RNMBXOfflineModuleLegacy.REACT_CLASS] = ReactModuleInfo(\n                RNMBXOfflineModuleLegacy.REACT_CLASS,\n                RNMBXOfflineModuleLegacy.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[RNMBXSnapshotModule.REACT_CLASS] = ReactModuleInfo(\n                RNMBXSnapshotModule.REACT_CLASS,\n                RNMBXSnapshotModule.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[RNMBXLogging.REACT_CLASS] = ReactModuleInfo(\n                RNMBXLogging.REACT_CLASS,\n                RNMBXLogging.REACT_CLASS,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                false // isTurboModule\n            )\n            moduleInfos[NativeMapViewModule.NAME] = ReactModuleInfo(\n                NativeMapViewModule.NAME,\n                NativeMapViewModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos[RNMBXViewportModule.NAME] = ReactModuleInfo(\n                RNMBXViewportModule.NAME,\n                RNMBXViewportModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos[RNMBXCameraModule.NAME] = ReactModuleInfo(\n                RNMBXCameraModule.NAME,\n                RNMBXCameraModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos[RNMBXShapeSourceModule.NAME] = ReactModuleInfo(\n                RNMBXShapeSourceModule.NAME,\n                RNMBXShapeSourceModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos[RNMBXImageModule.NAME] = ReactModuleInfo(\n                RNMBXImageModule.NAME,\n                RNMBXImageModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos[RNMBXPointAnnotationModule.NAME] = ReactModuleInfo(\n                RNMBXPointAnnotationModule.NAME,\n                RNMBXPointAnnotationModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos[RNMBXMovePointShapeAnimatorModule.NAME] = ReactModuleInfo(\n                RNMBXMovePointShapeAnimatorModule.NAME,\n                RNMBXMovePointShapeAnimatorModule.NAME,\n                false,\n                false,\n                false,\n                false,\n                isTurboModule\n            )\n            moduleInfos[RNMBXChangeLineOffsetsShapeAnimatorModule.NAME] = ReactModuleInfo(\n                RNMBXChangeLineOffsetsShapeAnimatorModule.NAME,\n                RNMBXChangeLineOffsetsShapeAnimatorModule.NAME,\n                false,\n                false,\n                false,\n                false,\n                isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}",
      "stars": 2307,
      "lastCommitDate": "2024-11-27T04:59:46Z"
    },
    {
      "repository": "zoontek/react-native-permissions",
      "file": "android/src/main/java/com/zoontek/rnpermissions/RNPermissionsPackage.kt",
      "url": "https://github.com/zoontek/react-native-permissions/blob/852524c31fef3f181855e66fcc12f7b4013daf5b/android/src/main/java/com/zoontek/rnpermissions/RNPermissionsPackage.kt",
      "fileContent": "package com.zoontek.rnpermissions\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNPermissionsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      RNPermissionsModuleImpl.NAME -> RNPermissionsModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      val moduleInfo = ReactModuleInfo(\n        RNPermissionsModuleImpl.NAME,\n        RNPermissionsModuleImpl.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n\n      moduleInfos[RNPermissionsModuleImpl.NAME] = moduleInfo\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 4127,
      "lastCommitDate": "2024-11-28T16:16:28Z"
    },
    {
      "repository": "mattermost/mattermost-mobile",
      "file": "libraries/@mattermost/rnutils/android/src/main/java/com/mattermost/rnutils/RNUtilsPackage.kt",
      "url": "https://github.com/mattermost/mattermost-mobile/blob/32453b320c31ec98a8936b9d4192c41d90fd050a/libraries/@mattermost/rnutils/android/src/main/java/com/mattermost/rnutils/RNUtilsPackage.kt",
      "fileContent": "package com.mattermost.rnutils\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNUtilsPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == RNUtilsModuleImpl.NAME) {\n            RNUtilsModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n                RNUtilsModuleImpl.NAME to ReactModuleInfo(\n                        RNUtilsModuleImpl.NAME,\n                        RNUtilsModuleImpl.NAME,\n                        false,\n                        false,\n                        false,\n                        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                )\n        )\n    }\n}\n",
      "stars": 2269,
      "lastCommitDate": "2024-12-19T08:45:03Z"
    },
    {
      "repository": "software-mansion/react-native-gesture-handler",
      "file": "android/package77/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt",
      "url": "https://github.com/software-mansion/react-native-gesture-handler/blob/abfaa4f3b74dd4ad2be0e01881b512a7053c6cf5/android/package77/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt",
      "fileContent": "package com.swmansion.gesturehandler\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport com.swmansion.gesturehandler.react.RNGestureHandlerButtonViewManager\nimport com.swmansion.gesturehandler.react.RNGestureHandlerModule\nimport com.swmansion.gesturehandler.react.RNGestureHandlerRootViewManager\n\n@ReactModuleList(\n  nativeModules = [\n    RNGestureHandlerModule::class\n  ]\n)\nclass RNGestureHandlerPackage : BaseReactPackage(), ViewManagerOnDemandReactPackage {\n  private val viewManagers: Map<String, ModuleSpec> by lazy {\n    mapOf(\n      RNGestureHandlerRootViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec {\n        RNGestureHandlerRootViewManager()\n      },\n      RNGestureHandlerButtonViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec {\n        RNGestureHandlerButtonViewManager()\n      }\n    )\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext) =\n    listOf<ViewManager<*, *>>(\n      RNGestureHandlerRootViewManager(),\n      RNGestureHandlerButtonViewManager()\n    )\n\n  override fun getViewManagerNames(reactContext: ReactApplicationContext) =\n    viewManagers.keys.toList()\n\n  override fun getViewManagers(reactContext: ReactApplicationContext): MutableList<ModuleSpec> =\n    viewManagers.values.toMutableList()\n\n  override fun createViewManager(\n    reactContext: ReactApplicationContext,\n    viewManagerName: String\n  ) = viewManagers[viewManagerName]?.provider?.get() as? ViewManager<*, *>\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNGestureHandlerModule.NAME) {\n      RNGestureHandlerModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    try {\n      val reactModuleInfoProviderClass =\n        Class.forName(\"com.swmansion.gesturehandler.RNGestureHandlerPackage$\\$ReactModuleInfoProvider\")\n      return reactModuleInfoProviderClass.getDeclaredConstructor().newInstance() as ReactModuleInfoProvider\n    } catch (e: ClassNotFoundException) {\n      return ReactModuleInfoProvider {\n        val reactModule: ReactModule = RNGestureHandlerModule::class.java.getAnnotation(ReactModule::class.java)!!\n\n        mutableMapOf(\n          RNGestureHandlerModule.NAME to ReactModuleInfo(\n            reactModule.name,\n            RNGestureHandlerModule::class.java.name,\n            reactModule.canOverrideExistingModule,\n            reactModule.needsEagerInit,\n            reactModule.isCxxModule,\n            true\n          )\n        )\n      }\n    } catch (e: InstantiationException) {\n      throw RuntimeException(\"No ReactModuleInfoProvider for RNGestureHandlerPackage$\\$ReactModuleInfoProvider\", e)\n    } catch (e: IllegalAccessException) {\n      throw RuntimeException(\"No ReactModuleInfoProvider for RNGestureHandlerPackage$\\$ReactModuleInfoProvider\", e)\n    }\n  }\n}\n",
      "stars": 6163,
      "lastCommitDate": "2024-12-19T08:29:12Z"
    },
    {
      "repository": "callstack/repack",
      "file": "packages/repack/android/src/main/java/com/callstack/repack/ScriptManagerPackage.kt",
      "url": "https://github.com/callstack/repack/blob/617c5018e1f2b0520f6f978b2c1440239196f662/packages/repack/android/src/main/java/com/callstack/repack/ScriptManagerPackage.kt",
      "fileContent": "package com.callstack.repack\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass ScriptManagerPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == ScriptManagerModule.NAME) {\n            ScriptManagerModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            // Use deprecated constructor for backwards compatibility\n            moduleInfos[ScriptManagerModule.NAME] = ReactModuleInfo(\n                    ScriptManagerModule.NAME,\n                    ScriptManagerModule.NAME,\n                    false,\n                    true,\n                    false,\n                    false,\n                    isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 1508,
      "lastCommitDate": "2024-12-18T14:54:11Z"
    },
    {
      "repository": "alpha0010/react-native-file-access",
      "file": "android/src/main/java/com/alpha0010/fs/FileAccessPackage.kt",
      "url": "https://github.com/alpha0010/react-native-file-access/blob/4b30d89ee720ee488a8db727bae04c29f8dc93a0/android/src/main/java/com/alpha0010/fs/FileAccessPackage.kt",
      "fileContent": "package com.alpha0010.fs\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass FileAccessPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == FileAccessModule.NAME) {\n      FileAccessModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[FileAccessModule.NAME] = ReactModuleInfo(\n        FileAccessModule.NAME,\n        FileAccessModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 314,
      "lastCommitDate": "2024-09-24T13:51:50Z"
    },
    {
      "repository": "Doko-Demo-Doa/react-native-shake",
      "file": "android/src/main/java/com/shake/ShakePackage.kt",
      "url": "https://github.com/Doko-Demo-Doa/react-native-shake/blob/0e002154d42638c704671796653120b1ddcdfed2/android/src/main/java/com/shake/ShakePackage.kt",
      "fileContent": "package com.shake\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ShakePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ShakeModule.NAME) {\n      ShakeModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ShakeModule.NAME] = ReactModuleInfo(\n        ShakeModule.NAME,\n        ShakeModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 278,
      "lastCommitDate": "2024-11-22T15:40:46Z"
    },
    {
      "repository": "Giphy/giphy-react-native-sdk",
      "file": "android/src/main/java/com/giphyreactnativesdk/RTNGiphySdkPackage.kt",
      "url": "https://github.com/Giphy/giphy-react-native-sdk/blob/abf0de2f834b19e41d5399465ec46d95405d0a01/android/src/main/java/com/giphyreactnativesdk/RTNGiphySdkPackage.kt",
      "fileContent": "package com.giphyreactnativesdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\n@Suppress(\"unused\")\nclass RTNGiphySdkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      RTNGiphySdkModule.NAME -> {\n        RTNGiphySdkModule(reactContext)\n      }\n\n      RTNGiphyDialogModule.NAME -> {\n        RTNGiphyDialogModule(reactContext)\n      }\n\n      RTNGiphyVideoManager.NAME -> {\n        RTNGiphyVideoManager(reactContext)\n      }\n\n      else -> {\n        null\n      }\n    }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    val viewManagers: MutableList<ViewManager<*, *>> = ArrayList()\n    viewManagers.add(RTNGiphyMediaViewManager())\n    viewManagers.add(RTNGiphyVideoViewManager())\n    viewManagers.add(RTNGiphyGridViewManager())\n    return viewManagers\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RTNGiphySdkModule.NAME] = ReactModuleInfo(\n        RTNGiphySdkModule.NAME,\n        RTNGiphySdkModule.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n      moduleInfos[RTNGiphyDialogModule.NAME] = ReactModuleInfo(\n        RTNGiphyDialogModule.NAME,\n        RTNGiphyDialogModule.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n      moduleInfos[RTNGiphyVideoManager.NAME] = ReactModuleInfo(\n        RTNGiphyVideoManager.NAME,\n        RTNGiphyVideoManager.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 69,
      "lastCommitDate": "2024-11-12T18:46:01Z"
    },
    {
      "repository": "lukaszkurantdev/react-native-fast-opencv",
      "file": "android/src/main/java/com/fastopencv/FastOpencvPackage.kt",
      "url": "https://github.com/lukaszkurantdev/react-native-fast-opencv/blob/831f8dc0f9b152ebc52ef75a08f967b63bf71a9e/android/src/main/java/com/fastopencv/FastOpencvPackage.kt",
      "fileContent": "package com.fastopencv\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass FastOpencvPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == FastOpencvModule.NAME) {\n      FastOpencvModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[FastOpencvModule.NAME] = ReactModuleInfo(\n        FastOpencvModule.NAME,\n        FastOpencvModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 87,
      "lastCommitDate": "2024-12-09T05:21:18Z"
    },
    {
      "repository": "callstackincubator/ai",
      "file": "android/src/main/java/com/ai/AiPackage.kt",
      "url": "https://github.com/callstackincubator/ai/blob/01f3a17061800d2bcd61a77564a15d5c2c0af9e5/android/src/main/java/com/ai/AiPackage.kt",
      "fileContent": "package com.ai\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AiPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AiModule.NAME) {\n      AiModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AiModule.NAME] = ReactModuleInfo(\n        AiModule.NAME,\n        AiModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 56,
      "lastCommitDate": "2024-07-24T11:57:24Z"
    },
    {
      "repository": "th3rdwave/react-native-safe-area-context",
      "file": "android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaContextPackage.kt",
      "url": "https://github.com/th3rdwave/react-native-safe-area-context/blob/29d12106ea19180b6c898812796b14c703090b61/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaContextPackage.kt",
      "fileContent": "package com.th3rdwave.safeareacontext\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\n// Fool autolinking for older versions that do not support BaseReactPackage.\n// public class SafeAreaContextPackage implements ReactPackage {\nclass SafeAreaContextPackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      SafeAreaContextModule.NAME -> SafeAreaContextModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(SafeAreaContextModule::class.java)\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n          ReactModuleInfo(\n              reactModule.name,\n              moduleClass.name,\n              true,\n              reactModule.needsEagerInit,\n              reactModule.isCxxModule,\n              BuildConfig.IS_NEW_ARCHITECTURE_ENABLED)\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf<ViewManager<*, *>>(SafeAreaProviderManager(), SafeAreaViewManager())\n  }\n}\n",
      "stars": 2200,
      "lastCommitDate": "2024-12-09T03:34:01Z"
    },
    {
      "repository": "powersync-ja/powersync-js",
      "file": "packages/powersync-op-sqlite/android/src/main/java/com/powersync/opsqlite/PowerSyncOpSqlitePackage.kt",
      "url": "https://github.com/powersync-ja/powersync-js/blob/4a262cd89ac2f9f643cf2c165c0256fc481dd5ed/packages/powersync-op-sqlite/android/src/main/java/com/powersync/opsqlite/PowerSyncOpSqlitePackage.kt",
      "fileContent": "package com.powersync.opsqlite\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass PowerSyncOpSqlitePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == PowerSyncOpSqliteModule.NAME) {\n      PowerSyncOpSqliteModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[PowerSyncOpSqliteModule.NAME] = ReactModuleInfo(\n        PowerSyncOpSqliteModule.NAME,\n        PowerSyncOpSqliteModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 337,
      "lastCommitDate": "2024-12-18T12:58:20Z"
    },
    {
      "repository": "facebook/react-native",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "url": "https://github.com/facebook/react-native/blob/b8f3f919cc9ebbd086d9ac79c93fffd532c55b09/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.app.Application\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.ReactApplication\nimport com.facebook.react.ReactHost\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.assets.ReactFontManager\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultReactHost\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.osslibraryexample.OSSLibraryExamplePackage\nimport com.facebook.react.popupmenu.PopupMenuPackage\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.soloader.OpenSourceMergedSoMapping\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ReactShadowNode\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.soloader.SoLoader\n\ninternal class RNTesterApplication : Application(), ReactApplication {\n  override val reactNativeHost: ReactNativeHost by lazy {\n    object : DefaultReactNativeHost(this) {\n      public override fun getJSMainModuleName(): String = BuildConfig.JS_MAIN_MODULE_NAME\n\n      public override fun getBundleAssetName(): String = BuildConfig.BUNDLE_ASSET_NAME\n\n      override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n      public override fun getPackages(): List<ReactPackage> {\n        return listOf(\n            MainReactPackage(),\n            PopupMenuPackage(),\n            OSSLibraryExamplePackage(),\n            object : BaseReactPackage() {\n              override fun getModule(\n                  name: String,\n                  reactContext: ReactApplicationContext\n              ): NativeModule? {\n                if (!isNewArchEnabled) {\n                  return null\n                }\n                if (SampleTurboModule.NAME == name) {\n                  return SampleTurboModule(reactContext)\n                }\n                if (SampleLegacyModule.NAME == name) {\n                  return SampleLegacyModule(reactContext)\n                }\n                return null\n              }\n\n              // Note: Specialized annotation processor for @ReactModule isn't configured in OSS\n              // yet. For now, hardcode this information, though it's not necessary for most\n              // modules.\n              override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n                  ReactModuleInfoProvider {\n                    if (isNewArchEnabled) {\n                      mapOf(\n                          SampleTurboModule.NAME to\n                              ReactModuleInfo(\n                                  SampleTurboModule.NAME,\n                                  \"SampleTurboModule\",\n                                  canOverrideExistingModule = false,\n                                  needsEagerInit = false,\n                                  isCxxModule = false,\n                                  isTurboModule = true),\n                          SampleLegacyModule.NAME to\n                              ReactModuleInfo(\n                                  SampleLegacyModule.NAME,\n                                  \"SampleLegacyModule\",\n                                  canOverrideExistingModule = false,\n                                  needsEagerInit = false,\n                                  isCxxModule = false,\n                                  isTurboModule = false))\n                    } else {\n                      emptyMap()\n                    }\n                  }\n            },\n            object : ReactPackage, ViewManagerOnDemandReactPackage {\n              override fun createNativeModules(\n                  reactContext: ReactApplicationContext\n              ): List<NativeModule> = emptyList()\n\n              override fun getViewManagerNames(reactContext: ReactApplicationContext) =\n                  listOf(\"RNTMyNativeView\", \"RNTMyLegacyNativeView\")\n\n              override fun createViewManagers(\n                  reactContext: ReactApplicationContext\n              ): List<ViewManager<*, *>> =\n                  listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n\n              override fun createViewManager(\n                  reactContext: ReactApplicationContext,\n                  viewManagerName: String\n              ): ViewManager<*, out ReactShadowNode<*>>? =\n                  when (viewManagerName) {\n                    \"RNTMyNativeView\" -> MyNativeViewManager()\n                    \"RNTMyLegacyNativeView\" -> MyLegacyViewManager(reactContext)\n                    else -> null\n                  }\n            })\n      }\n\n      override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED_IN_FLAVOR\n    }\n  }\n\n  override val reactHost: ReactHost\n    get() = DefaultReactHost.getDefaultReactHost(applicationContext, reactNativeHost)\n\n  override fun onCreate() {\n    ReactFontManager.getInstance().addCustomFont(this, \"Rubik\", R.font.rubik)\n    super.onCreate()\n\n    if (BuildConfig.IS_INTERNAL_BUILD) {\n      // For Buck we call the simple init() as the SoMapping is built-from-source inside SoLoader\n      SoLoader.init(this, false)\n    } else {\n      // For Gradle instead, we need to specify it as constructor parameter.\n      SoLoader.init(this, OpenSourceMergedSoMapping)\n    }\n\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      load()\n    }\n  }\n}\n",
      "stars": 119775,
      "lastCommitDate": "2024-12-19T01:39:30Z"
    },
    {
      "repository": "AndrewDongminYoo/react-native-step-counter",
      "file": "android/src/main/java/com/stepcounter/StepCounterPackage.kt",
      "url": "https://github.com/AndrewDongminYoo/react-native-step-counter/blob/85ff62b833dc16cb827eaa446a60c76301d38117/android/src/main/java/com/stepcounter/StepCounterPackage.kt",
      "fileContent": "package com.stepcounter\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\n/**\n * This class is responsible for the creation of the ReactNative package.\n * @see com.facebook.react.ReactPackage\n * @see TurboReactPackage\n * @see ReactApplicationContext\n * @see ReactModuleInfo\n * @see ReactModuleInfoProvider\n */\nclass StepCounterPackage : TurboReactPackage() {\n    /**\n     * This method is responsible for the creation of the ReactNative module.\n     * @param name The name of the module\n     * @param reactContext The context of the react-native application\n     * @return [com.facebook.react.module.model.ReactModuleInfo] ]The ReactNative module\n     * @see NativeModule\n     * @see ReactApplicationContext\n     * @see StepCounterModule\n     * @see StepCounterModule.NAME\n     */\n    override fun getModule(\n        name: String,\n        reactContext: ReactApplicationContext\n    ): NativeModule? = if (name == StepCounterModule.NAME) StepCounterModule(reactContext) else null\n\n    /**\n     * This method is responsible for the creation of the ReactNative module info provider.\n     * @return The ReactNative module info provider\n     * @see ReactModuleInfoProvider\n     * @see ReactModuleInfo\n     * @see BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n     * @see ReactModuleInfo.mCanOverrideExistingModule\n     * @see ReactModuleInfo.mNeedsEagerInit\n     * @see ReactModuleInfo.mHasConstants\n     * @see ReactModuleInfo.mIsCxxModule\n     * @see ReactModuleInfo.mIsTurboModule\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n        ReactModuleInfoProvider {\n            val moduleInfo: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfo[StepCounterModule.NAME] =\n                ReactModuleInfo(\n                    StepCounterModule.NAME,\n                    StepCounterModule.NAME,\n                    false, // canOverrideExistingModule\n                    false, // needsEagerInit\n                    true, // hasConstants\n                    false, // isCxxModule\n                    isTurboModule // isTurboModule\n                )\n            moduleInfo\n        }\n}",
      "stars": 32,
      "lastCommitDate": "2024-11-16T15:05:08Z"
    },
    {
      "repository": "zoontek/react-native-bootsplash",
      "file": "android/src/main/java/com/zoontek/rnbootsplash/RNBootSplashPackage.kt",
      "url": "https://github.com/zoontek/react-native-bootsplash/blob/9dab2dadd6164d6c332399bbd6a136ef0740a96b/android/src/main/java/com/zoontek/rnbootsplash/RNBootSplashPackage.kt",
      "fileContent": "package com.zoontek.rnbootsplash\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNBootSplashPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      RNBootSplashModuleImpl.NAME -> RNBootSplashModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      val moduleInfo = ReactModuleInfo(\n        RNBootSplashModuleImpl.NAME,\n        RNBootSplashModuleImpl.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n\n      moduleInfos[RNBootSplashModuleImpl.NAME] = moduleInfo\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 3768,
      "lastCommitDate": "2024-11-28T09:15:25Z"
    },
    {
      "repository": "microsoft/rnx-kit",
      "file": "packages/react-native-auth/android/src/main/java/com/microsoft/reactnativesdk/auth/ReactNativeAuthModule.kt",
      "url": "https://github.com/microsoft/rnx-kit/blob/363cef72f9173fcccc559ef85a0a42380f92a0ac/packages/react-native-auth/android/src/main/java/com/microsoft/reactnativesdk/auth/ReactNativeAuthModule.kt",
      "fileContent": "package com.microsoft.reactnativesdk.auth\n\nimport com.facebook.react.bridge.Promise\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.ReactContextBaseJavaModule\nimport com.facebook.react.bridge.ReactMethod\nimport com.facebook.react.bridge.ReactModuleWithSpec\nimport com.facebook.react.bridge.ReadableArray\nimport com.facebook.react.module.model.ReactModuleInfo\n\ntypealias OnTokenAcquired = (result: AuthResult?, error: AuthError?) -> Unit\n\n/**\n * A partial implementation of the RNXAuth native module. Implementers of this\n * module must implement all public methods, and register itself as `RNXAuth`.\n *\n * An example implementation can be found in `react-native-test-app-msal`:\n *\n * ```kotlin\n * // android/src/rnx/java/com/microsoft/reacttestapp/msal/ReactNativeAuthMSALModule.kt\n * @ReactModule(name = ReactNativeAuthModule.NAME, hasConstants = false)\n * class ReactNativeAuthMSALModule(context: ReactApplicationContext?) : ReactNativeAuthModule(context) {\n *     override fun acquireTokenWithScopes(\n *         scopes: Array<String>,\n *         userPrincipalName: String,\n *         accountType: RnxAccountType,\n *         onTokenAcquired: OnTokenAcquired\n *     ) {\n *         TODO(\"Implement me!\")\n *     }\n * }\n * ```\n */\nabstract class ReactNativeAuthModule(context: ReactApplicationContext?) :\n    ReactContextBaseJavaModule(context),\n    ReactModuleWithSpec {\n\n    companion object {\n        const val NAME = \"RNXAuth\"\n\n        fun <T> moduleInfo(klass: Class<T>): ReactModuleInfo = ReactModuleInfo(\n            NAME,\n            klass.name,\n            false,\n            false,\n            false,\n            false\n        )\n    }\n\n    abstract fun acquireTokenWithResource(\n        resource: String,\n        userPrincipalName: String,\n        accountType: AccountType,\n        onTokenAcquired: OnTokenAcquired\n    )\n\n    abstract fun acquireTokenWithScopes(\n        scopes: Array<String>,\n        userPrincipalName: String,\n        accountType: AccountType,\n        onTokenAcquired: OnTokenAcquired\n    )\n\n    override fun getName(): String = NAME\n\n    @ReactMethod\n    fun acquireTokenWithResource(\n        resource: String,\n        userPrincipalName: String,\n        accountType: String,\n        promise: Promise\n    ) {\n        acquireTokenWithResource(\n            resource,\n            userPrincipalName,\n            AccountType.from(accountType)\n        ) { result, error ->\n            when {\n                error != null -> promise.reject(error.type.type, error.toWritableMap())\n                result == null -> promise.reject(\n                    AuthErrorType.UNKNOWN.type,\n                    AuthError.unknown().toWritableMap()\n                )\n                else -> promise.resolve(result.toWritableMap())\n            }\n        }\n    }\n\n    @ReactMethod\n    fun acquireTokenWithScopes(\n        scopes: ReadableArray,\n        userPrincipalName: String,\n        accountType: String,\n        promise: Promise\n    ) {\n        acquireTokenWithScopes(\n            scopes.toStringArray(),\n            userPrincipalName,\n            AccountType.from(accountType)\n        ) { result, error ->\n            when {\n                error != null -> promise.reject(error.type.type, error.toWritableMap())\n                result == null -> promise.reject(\n                    AuthErrorType.UNKNOWN.type,\n                    AuthError.unknown().toWritableMap()\n                )\n                else -> promise.resolve(result.toWritableMap())\n            }\n        }\n    }\n}\n\nfun ReadableArray.toStringArray(): Array<String> {\n    val strings = mutableListOf<String>().apply {\n        for (i in 0 until size()) {\n            add(getString(i))\n        }\n    }\n    return strings.toTypedArray()\n}\n",
      "stars": 1541,
      "lastCommitDate": "2024-12-18T07:46:11Z"
    },
    {
      "repository": "tconns/react-native-util-dpi",
      "file": "android/src/main/java/com/utildpi/UtilDpiPackage.kt",
      "url": "https://github.com/tconns/react-native-util-dpi/blob/db2cd3f87e667b79b66ed4045d2d89fe8ca35321/android/src/main/java/com/utildpi/UtilDpiPackage.kt",
      "fileContent": "package com.utildpi\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass UtilDpiPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == UtilDpiModule.NAME) {\n      UtilDpiModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[UtilDpiModule.NAME] = ReactModuleInfo(\n        UtilDpiModule.NAME,\n        UtilDpiModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-30T14:01:05Z"
    },
    {
      "repository": "callstack/react-native-image-editor",
      "file": "android/src/main/java/com/reactnativecommunity/imageeditor/ImageEditorPackage.kt",
      "url": "https://github.com/callstack/react-native-image-editor/blob/07e555b241426cf55fb22fce1eb064ab0a5d34cd/android/src/main/java/com/reactnativecommunity/imageeditor/ImageEditorPackage.kt",
      "fileContent": "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the LICENSE file in the root\n * directory of this source tree.\n */\npackage com.reactnativecommunity.imageeditor\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass ImageEditorPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == ImageEditorModule.NAME) {\n            ImageEditorModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(ImageEditorModule::class.java)\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}\n",
      "stars": 386,
      "lastCommitDate": "2024-08-20T18:53:13Z"
    },
    {
      "repository": "openwallet-foundation/bifold-wallet",
      "file": "packages/react-native-attestation/android/src/main/java/com/attestation/AttestationPackage.kt",
      "url": "https://github.com/openwallet-foundation/bifold-wallet/blob/054a63ba643266fe88fc0c49464815f501aeb1d0/packages/react-native-attestation/android/src/main/java/com/attestation/AttestationPackage.kt",
      "fileContent": "package com.attestation\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AttestationPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AttestationModule.NAME) {\n      AttestationModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AttestationModule.NAME] = ReactModuleInfo(\n        AttestationModule.NAME,\n        AttestationModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 157,
      "lastCommitDate": "2024-12-18T17:51:27Z"
    },
    {
      "repository": "vokhuyetOz/react-native-concurrent-sound",
      "file": "android/src/main/java/com/concurrentsound/ConcurrentSoundPackage.kt",
      "url": "https://github.com/vokhuyetOz/react-native-concurrent-sound/blob/ae16acbb4d80e206674fc84968d8fa66f1a25fac/android/src/main/java/com/concurrentsound/ConcurrentSoundPackage.kt",
      "fileContent": "package com.concurrentsound\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ConcurrentSoundPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ConcurrentSoundModule.NAME) {\n      ConcurrentSoundModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ConcurrentSoundModule.NAME] = ReactModuleInfo(\n        ConcurrentSoundModule.NAME,\n        ConcurrentSoundModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 28,
      "lastCommitDate": "2024-11-18T09:05:15Z"
    },
    {
      "repository": "dziamidchyk/react-native-request-review",
      "file": "android/src/main/java/com/requestreview/RequestReviewPackage.kt",
      "url": "https://github.com/dziamidchyk/react-native-request-review/blob/b8a95770c1a0017e4e4522d5a87eb8769f7df827/android/src/main/java/com/requestreview/RequestReviewPackage.kt",
      "fileContent": "package com.requestreview\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RequestReviewPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RequestReviewModuleImpl.NAME) {\n      RequestReviewModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RequestReviewModuleImpl.NAME] = ReactModuleInfo(\n        RequestReviewModuleImpl.NAME,\n        RequestReviewModuleImpl.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 4,
      "lastCommitDate": "2024-08-05T18:46:20Z"
    },
    {
      "repository": "Notificare/notificare-sdk-react-native",
      "file": "packages/react-native-notificare-assets/android/src/main/java/re/notifica/assets/react_native/NotificareAssetsPackage.kt",
      "url": "https://github.com/Notificare/notificare-sdk-react-native/blob/8d9f7b299835b6b67050e1a1562e02b26e814b19/packages/react-native-notificare-assets/android/src/main/java/re/notifica/assets/react_native/NotificareAssetsPackage.kt",
      "fileContent": "package re.notifica.assets.react_native\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\npublic class NotificareAssetsPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NotificareAssetsModule.NAME) {\n            NotificareAssetsModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n            @Suppress(\"DEPRECATION\")\n            moduleInfos[NotificareAssetsModule.NAME] = ReactModuleInfo(\n                NotificareAssetsModule.NAME,\n                NotificareAssetsModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 6,
      "lastCommitDate": "2024-10-30T16:49:15Z"
    },
    {
      "repository": "zeevl/react-native-split-file",
      "file": "android/src/main/java/com/splitfile/SplitFilePackage.kt",
      "url": "https://github.com/zeevl/react-native-split-file/blob/240e11c9606efc4b0cc2e8cad892b6b62832d8a5/android/src/main/java/com/splitfile/SplitFilePackage.kt",
      "fileContent": "package com.splitfile\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass SplitFilePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == SplitFileModule.NAME) {\n      SplitFileModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[SplitFileModule.NAME] = ReactModuleInfo(\n        SplitFileModule.NAME,\n        SplitFileModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-25T03:10:21Z"
    },
    {
      "repository": "dcangulo/react-native-pkce-challenge",
      "file": "android/src/main/java/com/pkcechallenge/PkceChallengePackage.kt",
      "url": "https://github.com/dcangulo/react-native-pkce-challenge/blob/d3fbd4309b52d0845c6bd09a6ed45d531c530741/android/src/main/java/com/pkcechallenge/PkceChallengePackage.kt",
      "fileContent": "package com.pkcechallenge\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass PkceChallengePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == PkceChallengeModule.NAME) {\n      PkceChallengeModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[PkceChallengeModule.NAME] = ReactModuleInfo(\n        PkceChallengeModule.NAME,\n        PkceChallengeModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 30,
      "lastCommitDate": "2024-12-15T13:04:49Z"
    },
    {
      "repository": "JKobrynski/BridgingTutorial",
      "file": "battery-events-package/android/src/main/java/com/batteryeventspackage/BatteryEventsTurboPackage.kt",
      "url": "https://github.com/JKobrynski/BridgingTutorial/blob/94fd8c7d3d5496687a8f0572bf179303954c35dd/battery-events-package/android/src/main/java/com/batteryeventspackage/BatteryEventsTurboPackage.kt",
      "fileContent": "package com.batteryeventspackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass BatteryEventsTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            BatteryEventsModule.NAME -> BatteryEventsModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n                BatteryEventsModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-02-19T13:09:52Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/share/android/src/main/java/net/mjstudio/rnkakao/share/RNCKakaoSharePackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/share/android/src/main/java/net/mjstudio/rnkakao/share/RNCKakaoSharePackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.share\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass RNCKakaoSharePackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoShareModule.NAME) {\n      RNCKakaoShareModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoShareModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoShareModule.NAME,\n          RNCKakaoShareModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "devAdrish/rn-headless",
      "file": "RTNPurevpn/android/src/main/java/com/purevpn/PurevpnPackage.kt",
      "url": "https://github.com/devAdrish/rn-headless/blob/a98fac08443ebe07ec1abb1f8aa2037595031e6c/RTNPurevpn/android/src/main/java/com/purevpn/PurevpnPackage.kt",
      "fileContent": "package com.purevpn\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\nclass PurevpnPackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == PurevpnModule.NAME) {\n            PurevpnModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            mapOf(\n                PurevpnModule.NAME to ReactModuleInfo(\n                    PurevpnModule.NAME,\n                    PurevpnModule.NAME,\n                    false, // canOverrideExistingModule\n                    false, // needsEagerInit\n                    true,  // hasConstants\n                    false, // isCxxModule\n                    true   // isTurboModule\n                )\n            )\n        }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        return emptyList()\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-08-12T13:12:34Z"
    },
    {
      "repository": "Leo5661/LoanApp",
      "file": "RTNBioAuth/android/src/main/java/com/rtnbioauth/BioAuthPackage.kt",
      "url": "https://github.com/Leo5661/LoanApp/blob/f2dd6984b4cc4d9e60f4c56089d2dfef31c66a87/RTNBioAuth/android/src/main/java/com/rtnbioauth/BioAuthPackage.kt",
      "fileContent": "package com.rtnbioauth;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass BioAuthPackage : TurboReactPackage() {\n  override fun getModule(name: String?, reactContext: ReactApplicationContext): NativeModule? {\n    return if(name == BioAuthModule.NAME) {\n      BioAuthModule(reactContext);\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      BioAuthModule.NAME to ReactModuleInfo(\n        BioAuthModule.NAME,\n        BioAuthModule.NAME,\n        false,  //canOverrideExistingModule\n        false,  //needsEagerInit\n        true, //hasConstants\n        false,  //isCxxModule\n        true, //isTurboModule \n      )\n    )\n  }\n}",
      "stars": 0,
      "lastCommitDate": "2023-08-25T12:34:33Z"
    },
    {
      "repository": "scantarbian/rn-schedule-clear-cache",
      "file": "android/src/main/java/com/rnscheduleclearcache/RnScheduleClearCachePackage.kt",
      "url": "https://github.com/scantarbian/rn-schedule-clear-cache/blob/2ab722290a54d763e446cdaf22f53631a653934b/android/src/main/java/com/rnscheduleclearcache/RnScheduleClearCachePackage.kt",
      "fileContent": "package com.rnscheduleclearcache\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass RnScheduleClearCachePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnScheduleClearCacheModule.NAME) {\n      RnScheduleClearCacheModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnScheduleClearCacheModule.NAME] =\n              ReactModuleInfo(\n                      RnScheduleClearCacheModule.NAME,\n                      RnScheduleClearCacheModule.NAME,\n                      false, // canOverrideExistingModule\n                      false, // needsEagerInit\n                      true, // hasConstants\n                      false, // isCxxModule\n                      isTurboModule // isTurboModule\n              )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-10T15:49:20Z"
    },
    {
      "repository": "imgly/camera-react-native",
      "file": "android/src/main/kotlin/ly/img/camera/reactnative/module/IMGLYCameraPackage.kt",
      "url": "https://github.com/imgly/camera-react-native/blob/605d045a47abb70314f187ed5a6c1183a7b2dce5/android/src/main/kotlin/ly/img/camera/reactnative/module/IMGLYCameraPackage.kt",
      "fileContent": "package ly.img.camera.reactnative.module\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass IMGLYCameraPackage : TurboReactPackage() {\n    override fun getModule(\n        name: String,\n        reactContext: ReactApplicationContext,\n    ): NativeModule? =\n        if (name == IMGLYCameraModule.NAME) {\n            IMGLYCameraModule(reactContext)\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider() =\n        ReactModuleInfoProvider {\n            mapOf(\n                IMGLYCameraModule.NAME to\n                    ReactModuleInfo(\n                        IMGLYCameraModule.NAME,\n                        IMGLYCameraModule.NAME,\n                        false, // canOverrideExistingModule\n                        false, // needsEagerInit\n                        true, // hasConstants\n                        false, // isCxxModule\n                        true, // isTurboModule\n                    ),\n            )\n        }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-05T09:11:40Z"
    },
    {
      "repository": "chargebee/chargebee-react-native",
      "file": "android/src/main/java/com/chargebee/android/reactnative/ChargebeeReactNativePackage.kt",
      "url": "https://github.com/chargebee/chargebee-react-native/blob/39d753134039031ad02d80a161cc93667c28c4b8/android/src/main/java/com/chargebee/android/reactnative/ChargebeeReactNativePackage.kt",
      "fileContent": "package com.chargebee.android.reactnative\n\nimport com.chargebee.android.reactnative.BuildConfig\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ChargebeeReactNativePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ChargebeeReactNativeModule.NAME) {\n      ChargebeeReactNativeModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ChargebeeReactNativeModule.NAME] = ReactModuleInfo(\n        ChargebeeReactNativeModule.NAME,\n        ChargebeeReactNativeModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 8,
      "lastCommitDate": "2024-07-20T06:39:13Z"
    },
    {
      "repository": "IvanIhnatsiuk/react-native-fast-secure-storage",
      "file": "android/src/main/java/com/fastsecurestorage/FastSecureStoragePackage.kt",
      "url": "https://github.com/IvanIhnatsiuk/react-native-fast-secure-storage/blob/29c775eebb8fe8556d2abb4b574d3edc9b00785f/android/src/main/java/com/fastsecurestorage/FastSecureStoragePackage.kt",
      "fileContent": "package com.fastsecurestorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass FastSecureStoragePackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == FastSecureStorageModule.NAME) {\n      FastSecureStorageModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> =\n        HashMap()\n      moduleInfos[FastSecureStorageModule.NAME] =\n        ReactModuleInfo(\n          FastSecureStorageModule.NAME,\n          FastSecureStorageModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          true, // hasConstants\n          false, // isCxxModule\n          true, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 31,
      "lastCommitDate": "2024-12-06T12:13:39Z"
    },
    {
      "repository": "mrousavy/nitro",
      "file": "example/android/app/src/main/java/com/nitroexample/exampleturbomodule/ExampleTurboModulePackage.kt",
      "url": "https://github.com/mrousavy/nitro/blob/82ccff24bcd1ffd408d459609cc1fb94227c4023/example/android/app/src/main/java/com/nitroexample/exampleturbomodule/ExampleTurboModulePackage.kt",
      "fileContent": "package com.nitroexample.exampleturbomodule\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass ExampleTurboModulePackage: TurboReactPackage() {\n    override fun getModule(name: String, context: ReactApplicationContext): NativeModule? {\n        if (name == ExampleTurboModuleModule.NAME) {\n            return ExampleTurboModuleModule(context)\n        } else {\n            return null\n        }\n    }\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            ExampleTurboModuleModule.NAME to ReactModuleInfo(\n                ExampleTurboModuleModule.NAME,\n                ExampleTurboModuleModule.NAME,\n                false, // canOverrideExistingModule\n                false, // needsEagerInit\n                true, // hasConstants\n                false, // isCxxModule\n                true // isTurboModule\n            )\n        )\n    }\n}",
      "stars": 731,
      "lastCommitDate": "2024-12-18T15:59:06Z"
    },
    {
      "repository": "matinzd/react-native-health-connect",
      "file": "android/src/main/java/dev/matinzd/healthconnect/HealthConnectPackage.kt",
      "url": "https://github.com/matinzd/react-native-health-connect/blob/851c65bd05a34399a77cbc885172852a5bb7aadf/android/src/main/java/dev/matinzd/healthconnect/HealthConnectPackage.kt",
      "fileContent": "package dev.matinzd.healthconnect\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass HealthConnectPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == HealthConnectModule.NAME) {\n      HealthConnectModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[HealthConnectModule.NAME] = ReactModuleInfo(\n        HealthConnectModule.NAME,\n        HealthConnectModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 237,
      "lastCommitDate": "2024-11-23T16:25:08Z"
    },
    {
      "repository": "mateusz1913/rnbridgingtutorial",
      "file": "range-slider-package/android/src/main/java/com/rangesliderpackage/RangeSliderTurboPackage.kt",
      "url": "https://github.com/mateusz1913/rnbridgingtutorial/blob/5ffbcb451066cd43807337a3c1a42c26402a814f/range-slider-package/android/src/main/java/com/rangesliderpackage/RangeSliderTurboPackage.kt",
      "fileContent": "package com.rangesliderpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass RangeSliderTurboPackage : TurboReactPackage() {\n    /**\n    * Initialize and export modules based on the name of the required module\n    */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return null\n    }\n\n    /**\n    * Declare info about exported modules\n    */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n        * Here declare the array of exported modules\n        */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n        * And here just iterate on that array and produce the info provider instance\n        */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n        * Here declare the list of exported native components\n        */\n        return listOf(RangeSliderViewManager())\n    }\n}\n",
      "stars": 70,
      "lastCommitDate": "2024-06-02T08:49:10Z"
    },
    {
      "repository": "trieulongben/react-native-wallpaper-manager",
      "file": "android/src/main/java/com/rtn_device_wallpaper/DeviceWallpaperPackage.kt",
      "url": "https://github.com/trieulongben/react-native-wallpaper-manager/blob/ba22e33167282f847b8e5a2074a5e08826c560dc/android/src/main/java/com/rtn_device_wallpaper/DeviceWallpaperPackage.kt",
      "fileContent": "package com.rtn_device_wallpaper;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.SupervisorJob\n\nval myPluginScope = CoroutineScope(SupervisorJob() + Dispatchers.Main.immediate)\n\nenum class DESTINATION(val value:String){\n  BOTH(\"both\"),\n  LOCK(\"lock\"),\n  SYSTEM(\"system\")\n}\n\nclass DeviceWallpaperPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactAppContext: ReactApplicationContext): NativeModule? {\n    if(name==DeviceWallpaperModule.NAME){\n      return DeviceWallpaperModule(reactAppContext)\n    }\n    else{\n    return null\n\n    }\n  }\n  override fun getReactModuleInfoProvider()=ReactModuleInfoProvider {\n    mapOf(\n      DeviceWallpaperModule.NAME to ReactModuleInfo(\n        DeviceWallpaperModule.NAME,DeviceWallpaperModule.NAME,false,false,true,false,true\n      )\n    )\n  }\n}\n",
      "stars": 27,
      "lastCommitDate": "2024-10-06T13:38:08Z"
    },
    {
      "repository": "alchemyplatform/aa-sdk",
      "file": "account-kit/rn-signer/android/src/main/java/com/accountkit/reactnativesigner/ReactNativeSignerPackage.kt",
      "url": "https://github.com/alchemyplatform/aa-sdk/blob/bccb6e7172fed90a24b5a875502cef3d0f660a8b/account-kit/rn-signer/android/src/main/java/com/accountkit/reactnativesigner/ReactNativeSignerPackage.kt",
      "fileContent": "package com.accountkit.reactnativesigner\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass ReactNativeSignerPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == NativeTEKStamperModule.NAME) {\n      NativeTEKStamperModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[NativeTEKStamperModule.NAME] = ReactModuleInfo(\n        NativeTEKStamperModule.NAME,\n        NativeTEKStamperModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true  // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 237,
      "lastCommitDate": "2024-12-18T17:04:30Z"
    },
    {
      "repository": "Dhanish2603/test-1",
      "file": "android/src/main/java/com/locationmodule/LocationModulePackage.kt",
      "url": "https://github.com/Dhanish2603/test-1/blob/91da054202ce91d39db15cbc680f6c12cb1cdff4/android/src/main/java/com/locationmodule/LocationModulePackage.kt",
      "fileContent": "package com.locationmodule\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass LocationModulePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == LocationModuleModule.NAME) {\n      LocationModuleModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[LocationModuleModule.NAME] = ReactModuleInfo(\n        LocationModuleModule.NAME,\n        LocationModuleModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-10T08:36:29Z"
    },
    {
      "repository": "ospfranco/quack-cxx-tm",
      "file": "android/src/main/java/com/quack/QuackPackage.kt",
      "url": "https://github.com/ospfranco/quack-cxx-tm/blob/01dcae9c2a5334cda44f17e5c190edb92edb7ab8/android/src/main/java/com/quack/QuackPackage.kt",
      "fileContent": "package com.quack\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass QuackPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == QuackModule.NAME) {\n      QuackModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[QuackModule.NAME] = ReactModuleInfo(\n        QuackModule.NAME,\n        QuackModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-12T16:00:07Z"
    },
    {
      "repository": "itsramiel/react-native-audio-playback",
      "file": "android/src/main/java/com/audioplayback/AudioPlaybackPackage.kt",
      "url": "https://github.com/itsramiel/react-native-audio-playback/blob/777f9bd27e3e7973ac54c736e80b610a51e7bd31/android/src/main/java/com/audioplayback/AudioPlaybackPackage.kt",
      "fileContent": "package com.audioplayback\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AudioPlaybackPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AudioPlaybackModule.NAME) {\n      AudioPlaybackModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AudioPlaybackModule.NAME] = ReactModuleInfo(\n        AudioPlaybackModule.NAME,\n        AudioPlaybackModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 30,
      "lastCommitDate": "2024-12-13T20:47:25Z"
    },
    {
      "repository": "fireblocks/react-native-ncw-sdk",
      "file": "android/src/main/java/com/fireblocks/reactnativencwsdk/ReactNativeNcwSdkPackage.kt",
      "url": "https://github.com/fireblocks/react-native-ncw-sdk/blob/21daf307e110a6c441ea492c91187e2d0894c8ea/android/src/main/java/com/fireblocks/reactnativencwsdk/ReactNativeNcwSdkPackage.kt",
      "fileContent": "package com.fireblocks.reactnativencwsdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ReactNativeNcwSdkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeNcwSdkModule.NAME) {\n      ReactNativeNcwSdkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ReactNativeNcwSdkModule.NAME] = ReactModuleInfo(\n        ReactNativeNcwSdkModule.NAME,\n        ReactNativeNcwSdkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 3,
      "lastCommitDate": "2024-11-14T15:02:32Z"
    },
    {
      "repository": "beanchips/facebookreactnative",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "url": "https://github.com/beanchips/facebookreactnative/blob/da6272106124376c94efde38177469a774fe0a40/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.app.Application\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.ReactApplication\nimport com.facebook.react.ReactHost\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.assets.ReactFontManager\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultReactHost\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.osslibraryexample.OSSLibraryExamplePackage\nimport com.facebook.react.popupmenu.PopupMenuPackage\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.soloader.OpenSourceMergedSoMapping\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ReactShadowNode\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.soloader.SoLoader\n\ninternal class RNTesterApplication : Application(), ReactApplication {\n  override val reactNativeHost: ReactNativeHost by lazy {\n    object : DefaultReactNativeHost(this) {\n      public override fun getJSMainModuleName(): String = BuildConfig.JS_MAIN_MODULE_NAME\n\n      public override fun getBundleAssetName(): String = BuildConfig.BUNDLE_ASSET_NAME\n\n      override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n      public override fun getPackages(): List<ReactPackage> {\n        return listOf(\n            MainReactPackage(),\n            PopupMenuPackage(),\n            OSSLibraryExamplePackage(),\n            object : BaseReactPackage() {\n              override fun getModule(\n                  name: String,\n                  reactContext: ReactApplicationContext\n              ): NativeModule? {\n                if (!isNewArchEnabled) {\n                  return null\n                }\n                if (SampleTurboModule.NAME == name) {\n                  return SampleTurboModule(reactContext)\n                }\n                if (SampleLegacyModule.NAME == name) {\n                  return SampleLegacyModule(reactContext)\n                }\n                return null\n              }\n\n              // Note: Specialized annotation processor for @ReactModule isn't configured in OSS\n              // yet. For now, hardcode this information, though it's not necessary for most\n              // modules.\n              override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n                  ReactModuleInfoProvider {\n                    if (isNewArchEnabled) {\n                      mapOf(\n                          SampleTurboModule.NAME to\n                              ReactModuleInfo(\n                                  SampleTurboModule.NAME,\n                                  \"SampleTurboModule\",\n                                  _canOverrideExistingModule = false,\n                                  _needsEagerInit = false,\n                                  isCxxModule = false,\n                                  isTurboModule = true),\n                          SampleLegacyModule.NAME to\n                              ReactModuleInfo(\n                                  SampleLegacyModule.NAME,\n                                  \"SampleLegacyModule\",\n                                  _canOverrideExistingModule = false,\n                                  _needsEagerInit = false,\n                                  isCxxModule = false,\n                                  isTurboModule = false))\n                    } else {\n                      emptyMap()\n                    }\n                  }\n            },\n            object : ReactPackage, ViewManagerOnDemandReactPackage {\n              override fun createNativeModules(\n                  reactContext: ReactApplicationContext\n              ): List<NativeModule> = emptyList()\n\n              override fun getViewManagerNames(reactContext: ReactApplicationContext) =\n                  listOf(\"RNTMyNativeView\", \"RNTMyLegacyNativeView\")\n\n              override fun createViewManagers(\n                  reactContext: ReactApplicationContext\n              ): List<ViewManager<*, *>> =\n                  listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n\n              override fun createViewManager(\n                  reactContext: ReactApplicationContext,\n                  viewManagerName: String\n              ): ViewManager<*, out ReactShadowNode<*>>? =\n                  when (viewManagerName) {\n                    \"RNTMyNativeView\" -> MyNativeViewManager()\n                    \"RNTMyLegacyNativeView\" -> MyLegacyViewManager(reactContext)\n                    else -> null\n                  }\n            })\n      }\n\n      override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED_IN_FLAVOR\n    }\n  }\n\n  override val reactHost: ReactHost\n    get() = DefaultReactHost.getDefaultReactHost(applicationContext, reactNativeHost)\n\n  override fun onCreate() {\n    ReactFontManager.getInstance().addCustomFont(this, \"Rubik\", R.font.rubik)\n    super.onCreate()\n\n    if (BuildConfig.IS_INTERNAL_BUILD) {\n      // For Buck we call the simple init() as the SoMapping is built-from-source inside SoLoader\n      SoLoader.init(this, false)\n    } else {\n      // For Gradle instead, we need to specify it as constructor parameter.\n      SoLoader.init(this, OpenSourceMergedSoMapping)\n    }\n\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      load()\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-18T23:14:02Z"
    },
    {
      "repository": "sendbird/sendbird-calls-sdk-react-native",
      "file": "android/src/main/java/com/sendbird/calls/reactnative/RNSendbirdCallsPackage.kt",
      "url": "https://github.com/sendbird/sendbird-calls-sdk-react-native/blob/f6f0c1cc261090627c52415a6e509592e0e7a34a/android/src/main/java/com/sendbird/calls/reactnative/RNSendbirdCallsPackage.kt",
      "fileContent": "package com.sendbird.calls.reactnative\n\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.uimanager.ViewManager\n\n//import com.facebook.react.BuildConfig\n//import com.facebook.react.TurboReactPackage\n//import com.facebook.react.module.model.ReactModuleInfo\n//import com.facebook.react.module.model.ReactModuleInfoProvider\n\n//class RNSendbirdCallsPackage() : TurboReactPackage() {\nclass RNSendbirdCallsPackage : ReactPackage {\n    override fun createNativeModules(reactContext: ReactApplicationContext): List<NativeModule> {\n        return listOf(RNSendbirdCallsModule(reactContext))\n    }\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*,*>> {\n        return listOf(RNSBDirectCallVideoViewManager(reactContext), RNSBGroupCallVideoViewManager(reactContext))\n    }\n\n//    override fun getModule(name: String?, reactContext: ReactApplicationContext): NativeModule? {\n//        return if (name.equals(RNSendbirdCallsModuleImpl.NAME)) {\n//            RNSendbirdCallsModule(reactContext);\n//        } else {\n//            null;\n//        }\n//    }\n//\n//    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n//        return ReactModuleInfoProvider {\n//            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED;\n//            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap();\n//            moduleInfos[RNSendbirdCallsModuleImpl.NAME] = ReactModuleInfo(\n//                    RNSendbirdCallsModuleImpl.NAME,\n//                    RNSendbirdCallsModuleImpl.NAME,\n//                    false,  // canOverrideExistingModule\n//                    false,  // needsEagerInit\n//                    true,  // hasConstants\n//                    false,  // isCxxModule\n//                    isTurboModule // isTurboModule\n//            )\n//            moduleInfos\n//        }\n//    }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-12-12T07:26:05Z"
    },
    {
      "repository": "BILDIT-Platform/react-native-bildit-flybuy",
      "file": "mono/packages/presence/android/src/main/java/com/bilditplatform/rnflybuypresence/RnFlybuyPresencePackage.kt",
      "url": "https://github.com/BILDIT-Platform/react-native-bildit-flybuy/blob/b31e9b1be1b57fd04507ccf3c047f12a0a13e1e5/mono/packages/presence/android/src/main/java/com/bilditplatform/rnflybuypresence/RnFlybuyPresencePackage.kt",
      "fileContent": "package com.bilditplatform.rnflybuypresence\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnFlybuyPresencePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnFlybuyPresenceModule.NAME) {\n      RnFlybuyPresenceModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnFlybuyPresenceModule.NAME] = ReactModuleInfo(\n        RnFlybuyPresenceModule.NAME,\n        RnFlybuyPresenceModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 9,
      "lastCommitDate": "2024-11-21T12:11:09Z"
    },
    {
      "repository": "muhammedyasirmt/react-native-temp-storage",
      "file": "android/src/main/java/com/tempstorage/TempStoragePackage.kt",
      "url": "https://github.com/muhammedyasirmt/react-native-temp-storage/blob/08ec1d191208057d81160891e9ae3c594c830cb2/android/src/main/java/com/tempstorage/TempStoragePackage.kt",
      "fileContent": "package com.tempstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass TempStoragePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TempStorageModule.NAME) {\n      TempStorageModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[TempStorageModule.NAME] = ReactModuleInfo(\n        TempStorageModule.NAME,\n        TempStorageModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-07-30T13:45:08Z"
    },
    {
      "repository": "olieinar/rn-record-pcm",
      "file": "android/src/main/java/com/rnrecordpcm/RNRecordPCMPackage.kt",
      "url": "https://github.com/olieinar/rn-record-pcm/blob/1d8086c002b14178c7a939da347521cdd163b4c7/android/src/main/java/com/rnrecordpcm/RNRecordPCMPackage.kt",
      "fileContent": "package com.rnrecordpcm\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass RNRecordPCMPackage : BaseReactPackage() {\n\toverride fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n\t\treturn if (name == RNRecordPCMModule.NAME) {\n\t\t\tRNRecordPCMModule(reactContext)\n\t\t} else {\n\t\t\tnull\n\t\t}\n\t}\n\n\toverride fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n\t\treturn ReactModuleInfoProvider {\n\t\tval moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n\t\tmoduleInfos[RNRecordPCMModule.NAME] = ReactModuleInfo(\n\t\t\tRNRecordPCMModule.NAME,\n\t\t\tRNRecordPCMModule.NAME,\n\t\t\tfalse,  // canOverrideExistingModule\n\t\t\tfalse,  // needsEagerInit\n\t\t\ttrue,  // hasConstants\n\t\t\tfalse,  // isCxxModule\n\t\t\ttrue // isTurboModule\n\t\t)\n\t\tmoduleInfos\n\t\t}\n\t}\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-17T03:07:54Z"
    },
    {
      "repository": "adrian-koczen/react-native-unique-identifier",
      "file": "android/src/main/java/com/UniqueIdentifier/UniqueIdentifierPackage.kt",
      "url": "https://github.com/adrian-koczen/react-native-unique-identifier/blob/f11dc9071e8767e31d9de51c789dd19197e5d437/android/src/main/java/com/UniqueIdentifier/UniqueIdentifierPackage.kt",
      "fileContent": "package com.uniqueidentifier\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass UniqueIdentifierPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n        if (name == UniqueIdentifierModule.NAME) {\n            UniqueIdentifierModule(reactContext)\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            UniqueIdentifierModule.NAME to ReactModuleInfo(\n            UniqueIdentifierModule.NAME,\n            UniqueIdentifierModule.NAME,\n            false, // canOverrideExistingModule\n            false, // needsEagerInit\n            true, // hasConstants\n            false, // isCxxModule\n            true // isTurboModule\n          )\n        )\n    }\n}\n",
      "stars": 3,
      "lastCommitDate": "2024-03-21T10:44:39Z"
    },
    {
      "repository": "moengage/React-Native",
      "file": "sdk/inbox/android/src/main/java/com/moengage/react/inbox/MoengageInboxPackage.kt",
      "url": "https://github.com/moengage/React-Native/blob/b37abdf4c36f099d5b2497a276cc8f3a5483c4fa/sdk/inbox/android/src/main/java/com/moengage/react/inbox/MoengageInboxPackage.kt",
      "fileContent": "/*\n * Copyright (c) 2014-2024 MoEngage Inc.\n *\n * All rights reserved.\n *\n *  Use of source code or binaries contained within MoEngage SDK is permitted only to enable use of the MoEngage platform by customers of MoEngage.\n *  Modification of source code and inclusion in mobile apps is explicitly allowed provided that all other conditions are met.\n *  Neither the name of MoEngage nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *  Redistribution of source code or binaries is disallowed except with specific prior written permission. Any such redistribution must retain the above copyright notice, this list of conditions and the following disclaimer.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n \npackage com.moengage.react.inbox\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass MoengageInboxPackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == MoEngageInboxHandler.NAME) {\n            MoEReactInbox(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[MoEngageInboxHandler.NAME] = ReactModuleInfo(\n                MoEngageInboxHandler.NAME,\n                MoEngageInboxHandler.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}",
      "stars": 3,
      "lastCommitDate": "2024-11-25T08:46:55Z"
    },
    {
      "repository": "malgorzatamaz/react-native-garmin-connect",
      "file": "android/src/main/java/com/garminconnect/GarminConnectPackage.kt",
      "url": "https://github.com/malgorzatamaz/react-native-garmin-connect/blob/6e8d258e2857c8dd3347e15d8b0975b2100bb833/android/src/main/java/com/garminconnect/GarminConnectPackage.kt",
      "fileContent": "package com.garminconnect\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass GarminConnectPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == GarminConnectModule.NAME) {\n      GarminConnectModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[GarminConnectModule.NAME] = ReactModuleInfo(\n        GarminConnectModule.NAME,\n        GarminConnectModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 18,
      "lastCommitDate": "2024-08-20T14:01:03Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-storage",
      "file": "packages/googledrive/android/src/main/java/com/openmobilehub/reactnative/storage/googledrive/StorageGoogleDrivePackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-storage/blob/32252635fa01a80aa80a38a7a7a6203beebf2952/packages/googledrive/android/src/main/java/com/openmobilehub/reactnative/storage/googledrive/StorageGoogleDrivePackage.kt",
      "fileContent": "package com.openmobilehub.reactnative.storage.googledrive\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass StorageGoogleDrivePackage : TurboReactPackage() {\n  /**\n   * Initialize and export modules based on the name of the required module\n   */\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      StorageGoogleDriveModuleImpl.NAME -> StorageGoogleDriveModule(reactContext)\n      else -> null\n    }\n  }\n\n  /**\n   * Declare info about exported modules\n   */\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    /**\n     * Here declare the array of exported modules\n     */\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n      StorageGoogleDriveModule::class.java,\n    )\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    /**\n     * And here just iterate on that array and produce the info provider instance\n     */\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n        ReactModuleInfo(\n          reactModule.name,\n          moduleClass.name,\n          true,\n          reactModule.needsEagerInit,\n          reactModule.hasConstants,\n          reactModule.isCxxModule,\n          TurboModule::class.java.isAssignableFrom(moduleClass)\n        )\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n}\n",
      "stars": 7,
      "lastCommitDate": "2024-10-28T12:32:53Z"
    },
    {
      "repository": "circlefin/w3s-react-native-sdk",
      "file": "android/src/main/java/com/circlefin/programmablewalletrnsdk/ProgrammablewalletRnSdkPackage.kt",
      "url": "https://github.com/circlefin/w3s-react-native-sdk/blob/314f2e37ff25c349891f04c0af06ccf232aaa216/android/src/main/java/com/circlefin/programmablewalletrnsdk/ProgrammablewalletRnSdkPackage.kt",
      "fileContent": "// Copyright (c) 2024, Circle Internet Financial, LTD. All rights reserved.\n//\n// SPDX-License-Identifier: Apache-2.0\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\npackage com.circlefin.programmablewalletrnsdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass ProgrammablewalletRnSdkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ProgrammablewalletRnSdkModule.NAME) {\n      ProgrammablewalletRnSdkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ProgrammablewalletRnSdkModule.NAME] = ReactModuleInfo(\n        ProgrammablewalletRnSdkModule.NAME,\n        ProgrammablewalletRnSdkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 3,
      "lastCommitDate": "2024-10-09T07:39:05Z"
    },
    {
      "repository": "JKobrynski/BridgingTutorial",
      "file": "save-file-picker-package/android/src/main/java/com/savefilepickerpackage/SaveFilePickerTurboPackage.kt",
      "url": "https://github.com/JKobrynski/BridgingTutorial/blob/94fd8c7d3d5496687a8f0572bf179303954c35dd/save-file-picker-package/android/src/main/java/com/savefilepickerpackage/SaveFilePickerTurboPackage.kt",
      "fileContent": "package com.savefilepickerpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass SaveFilePickerTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            SaveFilePickerModule.NAME -> SaveFilePickerModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n                SaveFilePickerModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-02-19T13:09:52Z"
    },
    {
      "repository": "72days/react-native-volume-listener",
      "file": "android/src/main/java/com/volumelistener/RTNVolumeListenerPackage.kt",
      "url": "https://github.com/72days/react-native-volume-listener/blob/b6f92fa77d9d454fdecf211289e301f68754ab13/android/src/main/java/com/volumelistener/RTNVolumeListenerPackage.kt",
      "fileContent": "package com.volumelistener\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass RTNVolumeListenerPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RTNVolumeListenerModule.NAME) {\n      RTNVolumeListenerModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[RTNVolumeListenerModule.NAME] = ReactModuleInfo(\n        RTNVolumeListenerModule.NAME,\n        RTNVolumeListenerModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-17T14:37:07Z"
    },
    {
      "repository": "DriveQuantPublic/react-native-drivekit",
      "file": "packages/core/android/src/main/java/com/reactnativedrivekitcore/DriveKitCorePackage.kt",
      "url": "https://github.com/DriveQuantPublic/react-native-drivekit/blob/ee404f7befe29f2f7b704bfcebe07b4486f435de/packages/core/android/src/main/java/com/reactnativedrivekitcore/DriveKitCorePackage.kt",
      "fileContent": "package com.reactnativedrivekitcore\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass DriveKitCorePackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == DriveKitCoreModule.NAME) {\n            DriveKitCoreModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[DriveKitCoreModule.NAME] = ReactModuleInfo(\n                DriveKitCoreModule.NAME,\n                DriveKitCoreModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 3,
      "lastCommitDate": "2024-12-16T11:15:02Z"
    },
    {
      "repository": "suradisworkspace/react-native-calendar-add-event",
      "file": "android/src/main/java/com/calendaraddevent/CalendarAddEventPackage.kt",
      "url": "https://github.com/suradisworkspace/react-native-calendar-add-event/blob/0c46173d6986d01bf100430267ca76eef48adc7f/android/src/main/java/com/calendaraddevent/CalendarAddEventPackage.kt",
      "fileContent": "package com.calendaraddevent\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass CalendarAddEventPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == CalendarAddEventModule.NAME) {\n      CalendarAddEventModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[CalendarAddEventModule.NAME] = ReactModuleInfo(\n        CalendarAddEventModule.NAME,\n        CalendarAddEventModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-04T07:47:06Z"
    },
    {
      "repository": "klaviyo/klaviyo-react-native-sdk",
      "file": "android/src/main/java/com/klaviyoreactnativesdk/KlaviyoReactNativeSdkPackage.kt",
      "url": "https://github.com/klaviyo/klaviyo-react-native-sdk/blob/667913cb74537d3899b9c9953ab11b57b23f99fa/android/src/main/java/com/klaviyoreactnativesdk/KlaviyoReactNativeSdkPackage.kt",
      "fileContent": "package com.klaviyoreactnativesdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass KlaviyoReactNativeSdkPackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? {\n    return if (name == KlaviyoReactNativeSdkModule.NAME) {\n      KlaviyoReactNativeSdkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[KlaviyoReactNativeSdkModule.NAME] =\n        ReactModuleInfo(\n          KlaviyoReactNativeSdkModule.NAME,\n          KlaviyoReactNativeSdkModule.NAME,\n          false,\n          false,\n          true,\n          false,\n          isTurboModule,\n        )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 5,
      "lastCommitDate": "2024-12-17T18:47:38Z"
    },
    {
      "repository": "thesparklaboratory/react-native-system-tones",
      "file": "android/src/main/java/com/systemtones/SystemTonesPackage.kt",
      "url": "https://github.com/thesparklaboratory/react-native-system-tones/blob/6e3721b8869c9ca8e49411cecf94c2ba271dcd35/android/src/main/java/com/systemtones/SystemTonesPackage.kt",
      "fileContent": "package com.sparklaboratory.systemtones\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass SystemTonesPackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == SystemTonesModule.NAME) {\n      SystemTonesModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[SystemTonesModule.NAME] = ReactModuleInfo(\n        SystemTonesModule.NAME,\n        SystemTonesModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-12T19:03:39Z"
    },
    {
      "repository": "farzinmirzaie/react-native-module-bundle-loader",
      "file": "android/src/main/java/com/modulebundleloader/ModuleBundleLoaderPackage.kt",
      "url": "https://github.com/farzinmirzaie/react-native-module-bundle-loader/blob/ace0fb0d2ef7f07ad1238dd093c7a2e0a4a47397/android/src/main/java/com/modulebundleloader/ModuleBundleLoaderPackage.kt",
      "fileContent": "package com.modulebundleloader\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass ModuleBundleLoaderPackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ModuleBundleLoaderModule.NAME) {\n      ModuleBundleLoaderModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[ModuleBundleLoaderModule.NAME] = ReactModuleInfo(\n        ModuleBundleLoaderModule.NAME,\n        ModuleBundleLoaderModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-16T08:56:27Z"
    },
    {
      "repository": "bitdriftlabs/capture-es",
      "file": "packages/react-native/android/src/main/java/com/bdreactnative/BdReactNativePackage.kt",
      "url": "https://github.com/bitdriftlabs/capture-es/blob/568f3844d5efc6677245f6129c2adfaa9d30ac62/packages/react-native/android/src/main/java/com/bdreactnative/BdReactNativePackage.kt",
      "fileContent": "// capture-es - bitdrift's ES SDK\n// Copyright Bitdrift, Inc. All rights reserved.\n//\n// Use of this source code is governed by a source available license that can be found in the\n// LICENSE file or at:\n// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt\n\npackage com.bdreactnative\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass BdReactNativePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == BdReactNativeModule.NAME) {\n      BdReactNativeModule(reactContext) as NativeModule\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[BdReactNativeModule.NAME] = ReactModuleInfo(\n        BdReactNativeModule.NAME,\n        BdReactNativeModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-17T19:26:04Z"
    },
    {
      "repository": "gutenye/ocr",
      "file": "packages/react-native/android/src/main/java/com/ocr/RNOcrPackage.kt",
      "url": "https://github.com/gutenye/ocr/blob/7a951693ca4e5a550f3162e1710cfde9f29f5373/packages/react-native/android/src/main/java/com/ocr/RNOcrPackage.kt",
      "fileContent": "package com.ocr\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RNOcrPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNOcrModule.NAME) {\n      RNOcrModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNOcrModule.NAME] = ReactModuleInfo(\n        RNOcrModule.NAME,\n        RNOcrModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}",
      "stars": 45,
      "lastCommitDate": "2024-12-13T09:18:37Z"
    },
    {
      "repository": "thien-magenest/MyApp",
      "file": "android/app/src/main/java/com/myapp/NativeAppIconManagerPackage.kt",
      "url": "https://github.com/thien-magenest/MyApp/blob/ab99b10445d9528ce0d70170ce25d83154c2d0c2/android/app/src/main/java/com/myapp/NativeAppIconManagerPackage.kt",
      "fileContent": "package com.myapp\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeLocalStoragePackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n        if (name == NativeAppIconManagerModule.NAME) {\n            NativeAppIconManagerModule(reactContext)\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            NativeAppIconManagerModule.NAME to ReactModuleInfo(\n                _name = NativeAppIconManagerModule.NAME,\n                _className = NativeAppIconManagerModule.NAME,\n                _canOverrideExistingModule = false,\n                _needsEagerInit = false,\n                isCxxModule = false,\n                isTurboModule = true\n            )\n        )\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-10T08:50:31Z"
    },
    {
      "repository": "jakex7/react-native-localization-settings",
      "file": "android/src/main/java/com/localizationsettings/LocalizationSettingsPackage.kt",
      "url": "https://github.com/jakex7/react-native-localization-settings/blob/96e5bd3559bb0c2c6926c5aeae8e2ad68824dfe3/android/src/main/java/com/localizationsettings/LocalizationSettingsPackage.kt",
      "fileContent": "package com.localizationsettings\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass LocalizationSettingsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == LocalizationSettingsModule.NAME) {\n      LocalizationSettingsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[LocalizationSettingsModule.NAME] = ReactModuleInfo(\n        LocalizationSettingsModule.NAME,\n        LocalizationSettingsModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 76,
      "lastCommitDate": "2024-11-12T17:47:59Z"
    },
    {
      "repository": "rrcaddick/vision-camera-plugin-anpr",
      "file": "android/src/main/java/com/visioncamerapluginanpr/VisionCameraPluginAnprPackage.kt",
      "url": "https://github.com/rrcaddick/vision-camera-plugin-anpr/blob/fe8575607eba842114aca81dadf747670ff7a2f7/android/src/main/java/com/visioncamerapluginanpr/VisionCameraPluginAnprPackage.kt",
      "fileContent": "package com.visioncamerapluginanpr\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass VisionCameraPluginAnprPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == VisionCameraPluginAnprModule.NAME) {\n      VisionCameraPluginAnprModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[VisionCameraPluginAnprModule.NAME] = ReactModuleInfo(\n        VisionCameraPluginAnprModule.NAME,\n        VisionCameraPluginAnprModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-26T13:22:07Z"
    },
    {
      "repository": "chlee1001/react-native-simple-heic2jpg",
      "file": "android/src/main/java/com/simpleheic2jpg/SimpleHeic2jpgPackage.kt",
      "url": "https://github.com/chlee1001/react-native-simple-heic2jpg/blob/34a8a8f31d8c8c3e9ee12dba9cd5be1204d8cede/android/src/main/java/com/simpleheic2jpg/SimpleHeic2jpgPackage.kt",
      "fileContent": "package com.simpleheic2jpg\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass SimpleHeic2jpgPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      SimpleHeic2jpgModuleImpl.NAME -> SimpleHeic2jpgModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      val moduleInfo = ReactModuleInfo(\n        SimpleHeic2jpgModuleImpl.NAME,\n        SimpleHeic2jpgModuleImpl.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule,\n      )\n\n      moduleInfos[SimpleHeic2jpgModuleImpl.NAME] = moduleInfo\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 10,
      "lastCommitDate": "2024-12-11T09:08:07Z"
    },
    {
      "repository": "atlj/react-native-kotlin-swift-backward-compatible-module",
      "file": "android/src/main/java/com/kotlinswiftbackwardcompatiblemodule/KotlinSwiftBackwardCompatibleModulePackage.kt",
      "url": "https://github.com/atlj/react-native-kotlin-swift-backward-compatible-module/blob/7d41b0045e521ecef406b8bab6226defeb07e5d7/android/src/main/java/com/kotlinswiftbackwardcompatiblemodule/KotlinSwiftBackwardCompatibleModulePackage.kt",
      "fileContent": "package com.kotlinswiftbackwardcompatiblemodule\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass KotlinSwiftBackwardCompatibleModulePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == KotlinSwiftBackwardCompatibleModuleModule.NAME) {\n      KotlinSwiftBackwardCompatibleModuleModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[KotlinSwiftBackwardCompatibleModuleModule.NAME] = ReactModuleInfo(\n        KotlinSwiftBackwardCompatibleModuleModule.NAME,\n        KotlinSwiftBackwardCompatibleModuleModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2023-11-24T11:18:59Z"
    },
    {
      "repository": "Gautamshah1/TurboModuleExamples",
      "file": "android/app/src/main/java/com/turbomoduleexamples/NativeLoalStoragePackage.kt",
      "url": "https://github.com/Gautamshah1/TurboModuleExamples/blob/fb6ba8f9194973c6d84ba08a6a39996750cc2801/android/app/src/main/java/com/turbomoduleexamples/NativeLoalStoragePackage.kt",
      "fileContent": "package com.turbomoduleexamples\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeLocalStoragePackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == NativeLocalStorageModule.NAME) {\n      NativeLocalStorageModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      NativeLocalStorageModule.NAME to ReactModuleInfo(\n        _name = NativeLocalStorageModule.NAME,\n        _className = NativeLocalStorageModule.NAME,\n        _canOverrideExistingModule = false,\n        _needsEagerInit = false,\n        isCxxModule = false,\n        isTurboModule = true\n      )\n    )\n  }\n}",
      "stars": 0,
      "lastCommitDate": "2024-12-11T12:09:25Z"
    },
    {
      "repository": "devamitch/native-module-start",
      "file": "android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "url": "https://github.com/devamitch/native-module-start/blob/0c6129d4eade575e65b7d9ffc29f206f67f0a0a0/android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "fileContent": "package com.nativelocalstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeLocalStoragePackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == NativeLocalStorageModule.NAME) {\n      NativeLocalStorageModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      NativeLocalStorageModule.NAME to ReactModuleInfo(\n        _name = NativeLocalStorageModule.NAME,\n        _className = NativeLocalStorageModule.NAME,\n        _canOverrideExistingModule = false,\n        _needsEagerInit = false,\n        isCxxModule = false,\n        isTurboModule = true\n      )\n    )\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-25T10:43:15Z"
    },
    {
      "repository": "react-native-tvos/react-native-tvos",
      "file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/module/model/ReactModuleInfo.kt",
      "url": "https://github.com/react-native-tvos/react-native-tvos/blob/f5004239e33bb527c26303addb8eecb2a9e72534/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/module/model/ReactModuleInfo.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.module.model\n\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\n/**\n * Data holder class holding native module specifications. [ReactModuleSpecProcessor] creates these\n * so Java modules don't have to be instantiated at React Native start up.\n */\npublic class ReactModuleInfo(\n    private val _name: String,\n    private val _className: String,\n    private val _canOverrideExistingModule: Boolean,\n    private val _needsEagerInit: Boolean,\n    public val isCxxModule: Boolean,\n    public val isTurboModule: Boolean\n) {\n\n  @Deprecated(\"use ReactModuleInfo(String, String, boolean, boolean, boolean, boolean)]\")\n  public constructor(\n      name: String,\n      className: String,\n      canOverrideExistingModule: Boolean,\n      needsEagerInit: Boolean,\n      @Suppress(\"UNUSED_PARAMETER\") hasConstants: Boolean,\n      isCxxModule: Boolean,\n      isTurboModule: Boolean\n  ) : this(name, className, canOverrideExistingModule, needsEagerInit, isCxxModule, isTurboModule)\n\n  public fun name(): String = _name\n\n  public fun className(): String = _className\n\n  public fun canOverrideExistingModule(): Boolean = _canOverrideExistingModule\n\n  public fun needsEagerInit(): Boolean = _needsEagerInit\n\n  @Deprecated(\"this is hardcoded to return true, regardless if the module has constants or not\")\n  public fun hasConstants(): Boolean = true\n\n  public companion object {\n    /**\n     * Checks if the passed class is a TurboModule. Useful to populate the parameter [isTurboModule]\n     * in the constructor of ReactModuleInfo.\n     */\n    @JvmStatic\n    public fun classIsTurboModule(clazz: Class<*>): Boolean =\n        TurboModule::class.java.isAssignableFrom(clazz)\n  }\n}\n",
      "stars": 988,
      "lastCommitDate": "2024-12-11T07:42:46Z"
    },
    {
      "repository": "chohra-med/rnNewArchitecture",
      "file": "android/app/src/main/java/com/newarchitecturern/NativeDeviceInfoTestPackage.kt",
      "url": "https://github.com/chohra-med/rnNewArchitecture/blob/c3ebb08a59dffde6a4e409035f18afdadb60c0bf/android/app/src/main/java/com/newarchitecturern/NativeDeviceInfoTestPackage.kt",
      "fileContent": "package com.newarchitecturern\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeDeviceInfoTestPackage : TurboReactPackage() {\n\n  // Returns a NativeModule instance based on the requested module name\n  // If the name matches our module, return a new instance; otherwise return null\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == NativeDeviceInfoTestModule.NAME) {\n      NativeDeviceInfoTestModule(reactContext)\n      \n    } else {\n      null\n    }\n\n  // Provides metadata about the native module to the React Native runtime\n  // This information helps React Native understand how to interact with our module\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      NativeDeviceInfoTestModule.NAME to ReactModuleInfo(\n        _name = NativeDeviceInfoTestModule.NAME,          // Module name for identification\n        _className = NativeDeviceInfoTestModule.NAME,     // Class name of the module\n        _canOverrideExistingModule = false,              // Whether this module can be overridden\n        _needsEagerInit = false,                         // Whether to initialize at startup\n        isCxxModule = false,                             // Not a C++ module\n        isTurboModule = true                             // Uses the TurboModules architecture\n      )\n    )\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-12-02T07:29:50Z"
    },
    {
      "repository": "mattermost/react-native-network-client",
      "file": "android/src/main/java/com/mattermost/networkclient/NetworkClientPackage.kt",
      "url": "https://github.com/mattermost/react-native-network-client/blob/3a5ff038b3e671ec52f86ddc53fe225ad0bdc92b/android/src/main/java/com/mattermost/networkclient/NetworkClientPackage.kt",
      "fileContent": "package com.mattermost.networkclient\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NetworkClientPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n            when (name) {\n                GenericClientModuleImpl.NAME -> {\n                    GenericClientModule(reactContext)\n                }\n                ApiClientModuleImpl.NAME -> {\n                    ApiClientModule(reactContext)\n                }\n                WebSocketClientModuleImpl.NAME -> {\n                    WebSocketClientModule(reactContext)\n                }\n                else -> {\n                    null\n                }\n            }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n                GenericClientModuleImpl.NAME to ReactModuleInfo(\n                        GenericClientModuleImpl.NAME,\n                        GenericClientModuleImpl.NAME,\n                        false,\n                        false,\n                        false,\n                        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                ),\n                ApiClientModuleImpl.NAME to ReactModuleInfo(\n                        ApiClientModuleImpl.NAME,\n                        ApiClientModuleImpl.NAME,\n                        false,\n                        false,\n                        false,\n                        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                ),\n                WebSocketClientModuleImpl.NAME to ReactModuleInfo(\n                        WebSocketClientModuleImpl.NAME,\n                        WebSocketClientModuleImpl.NAME,\n                        false,\n                        false,\n                        false,\n                        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                )\n        )\n    }\n}\n",
      "stars": 35,
      "lastCommitDate": "2024-12-17T12:03:05Z"
    },
    {
      "repository": "AmazonAppDev/reactnative-turbo-module-demo",
      "file": "RTNDeviceName/android/src/main/java/com/rtndevice/DevicePackage.kt",
      "url": "https://github.com/AmazonAppDev/reactnative-turbo-module-demo/blob/c8c6ede1c3646454518daed8a10c7b4a5a5b1421/RTNDeviceName/android/src/main/java/com/rtndevice/DevicePackage.kt",
      "fileContent": "/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: MIT-0\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\n * software and associated documentation files (the \"Software\"), to deal in the Software\n * without restriction, including without limitation the rights to use, copy, modify,\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\npackage com.rtndevice;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\n\nclass DevicePackage : TurboReactPackage() {\n    override fun getModule(name: String?, reactContext: ReactApplicationContext): NativeModule? =\n       if (name == DeviceModule.NAME) {\n        DeviceModule(reactContext)\n       } else {\n         null\n       }\n    \n     override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n       mapOf(\n         DeviceModule.NAME to ReactModuleInfo(\n           DeviceModule.NAME,\n           DeviceModule.NAME,\n           false, // canOverrideExistingModule\n           false, // needsEagerInit\n           true, // hasConstants\n           false, // isCxxModule\n           true // isTurboModule\n         )\n       )\n     }\n}",
      "stars": 9,
      "lastCommitDate": "2024-09-26T12:53:14Z"
    },
    {
      "repository": "orbital-systems/react-native-esp-idf-provisioning",
      "file": "android/src/main/java/com/espidfprovisioning/EspIdfProvisioningPackage.kt",
      "url": "https://github.com/orbital-systems/react-native-esp-idf-provisioning/blob/a4c25c77780e01b35b8e08cbf208159e1491e2ce/android/src/main/java/com/espidfprovisioning/EspIdfProvisioningPackage.kt",
      "fileContent": "package com.espidfprovisioning\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass EspIdfProvisioningPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == EspIdfProvisioningModule.NAME) {\n      EspIdfProvisioningModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[EspIdfProvisioningModule.NAME] = ReactModuleInfo(\n                  EspIdfProvisioningModule.NAME,\n                  EspIdfProvisioningModule.NAME,\n                  false,  // canOverrideExistingModule\n                  false,  // needsEagerInit\n                  true,  // hasConstants\n                  false,  // isCxxModule\n                  isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 30,
      "lastCommitDate": "2024-11-22T08:49:51Z"
    },
    {
      "repository": "urbanairship/react-native-airship",
      "file": "android/src/main/java/com/urbanairship/reactnative/AirshipPackage.kt",
      "url": "https://github.com/urbanairship/react-native-airship/blob/17eaa0e7a8137659f0af207f969774e046b32def/android/src/main/java/com/urbanairship/reactnative/AirshipPackage.kt",
      "fileContent": "package com.urbanairship.reactnative\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.uimanager.ViewManager\nimport java.util.HashMap\n\nclass AirshipPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AirshipModule.NAME) {\n      AirshipModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AirshipModule.NAME] = ReactModuleInfo(\n        AirshipModule.NAME,\n        AirshipModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf<ViewManager<*, *>>(ReactMessageViewManager(), ReactEmbeddedViewManager())\n  }\n}\n",
      "stars": 88,
      "lastCommitDate": "2024-12-17T23:16:11Z"
    },
    {
      "repository": "cristiangu/fabric-component-swift",
      "file": "android/src/main/java/com/newlib/NewLibPackage.kt",
      "url": "https://github.com/cristiangu/fabric-component-swift/blob/91b64768bb1cd2d6fa9d2aa21c57acceb4abeeed/android/src/main/java/com/newlib/NewLibPackage.kt",
      "fileContent": "package com.newlib\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass NewLibPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == NewLibModule.NAME) {\n      NewLibModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[NewLibModule.NAME] = ReactModuleInfo(\n        NewLibModule.NAME,\n        NewLibModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 4,
      "lastCommitDate": "2024-05-05T18:08:16Z"
    },
    {
      "repository": "KusStar/react-native-db-inspector",
      "file": "android/src/main/java/com/dbinspector/DbInspectorPackage.kt",
      "url": "https://github.com/KusStar/react-native-db-inspector/blob/8552427abad15a926cd57b8a6b0f367ff77fbbc6/android/src/main/java/com/dbinspector/DbInspectorPackage.kt",
      "fileContent": "package com.dbinspector\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass DbInspectorPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == DbInspectorModule.NAME) {\n      DbInspectorModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[DbInspectorModule.NAME] = ReactModuleInfo(\n        DbInspectorModule.NAME,\n        DbInspectorModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2023-03-14T11:54:06Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/channel/android/src/main/java/net/mjstudio/rnkakao/channel/RNCKakaoChannelPackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/channel/android/src/main/java/net/mjstudio/rnkakao/channel/RNCKakaoChannelPackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.channel\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNCKakaoChannelPackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoChannelModule.NAME) {\n      RNCKakaoChannelModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoChannelModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoChannelModule.NAME,\n          RNCKakaoChannelModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "SourcePointUSA/react-native-sourcepoint-cmp",
      "file": "android/src/main/java/com/sourcepoint/reactnativecmp/RNSourcepointCmpPackage.kt",
      "url": "https://github.com/SourcePointUSA/react-native-sourcepoint-cmp/blob/ff99531e6e5467bb8f7170ae2799a97e9508372d/android/src/main/java/com/sourcepoint/reactnativecmp/RNSourcepointCmpPackage.kt",
      "fileContent": "package com.sourcepoint.reactnativecmp\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RNSourcepointCmpPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNSourcepointCmpModule.NAME) {\n      RNSourcepointCmpModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNSourcepointCmpModule.NAME] = ReactModuleInfo(\n        RNSourcepointCmpModule.NAME,\n        RNSourcepointCmpModule.NAME,\n        false,\n        false,\n        false,\n        isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-12T14:33:36Z"
    },
    {
      "repository": "VIVEK-SUTHAR/react-native-tron-sdk",
      "file": "android/src/main/java/com/tronsdk/TronSdkPackage.kt",
      "url": "https://github.com/VIVEK-SUTHAR/react-native-tron-sdk/blob/059821b68328aa847ae019ec64ba9327baebc64a/android/src/main/java/com/tronsdk/TronSdkPackage.kt",
      "fileContent": "package com.tronsdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass TronSdkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TronSdkModule.NAME) {\n      TronSdkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[TronSdkModule.NAME] = ReactModuleInfo(\n        TronSdkModule.NAME,\n        TronSdkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-07-19T13:33:05Z"
    },
    {
      "repository": "Mhp23/react-native-tf",
      "file": "android/src/main/java/com/tf/TfPackage.kt",
      "url": "https://github.com/Mhp23/react-native-tf/blob/6ad5b5cb7276bb3f43a531b3e22fe7898b45ca07/android/src/main/java/com/tf/TfPackage.kt",
      "fileContent": "package com.tf\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass TfPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TfModule.NAME) {\n      TfModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[TfModule.NAME] = ReactModuleInfo(\n        TfModule.NAME,\n        TfModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-01-24T14:45:39Z"
    },
    {
      "repository": "zoontek/react-native-edge-to-edge",
      "file": "android/src/main/java/com/zoontek/rnedgetoedge/EdgeToEdgePackage.kt",
      "url": "https://github.com/zoontek/react-native-edge-to-edge/blob/7b80de64da98e46f36d6007b73eac476b2ec3b6c/android/src/main/java/com/zoontek/rnedgetoedge/EdgeToEdgePackage.kt",
      "fileContent": "package com.zoontek.rnedgetoedge\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass EdgeToEdgePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      EdgeToEdgeModuleImpl.NAME -> EdgeToEdgeModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      val moduleInfo = ReactModuleInfo(\n        EdgeToEdgeModuleImpl.NAME,\n        EdgeToEdgeModuleImpl.NAME,\n        false,\n        true,\n        true,\n        false,\n        isTurboModule\n      )\n\n      moduleInfos[EdgeToEdgeModuleImpl.NAME] = moduleInfo\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 646,
      "lastCommitDate": "2024-11-21T18:10:03Z"
    },
    {
      "repository": "niteshbalusu11/react-native-tor",
      "file": "android/src/main/java/com/tor/TorPackage.kt",
      "url": "https://github.com/niteshbalusu11/react-native-tor/blob/2bf3f14c26bef88dc7b02767553eebfab8aeb11b/android/src/main/java/com/tor/TorPackage.kt",
      "fileContent": "package com.tor\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass TorPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == TorModule.NAME) {\n            TorModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[TorModule.NAME] = ReactModuleInfo(\n                TorModule.NAME,\n                TorModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-10-12T00:21:13Z"
    },
    {
      "repository": "BogiKay/native-gradient",
      "file": "conic-gradient-package/android/src/main/java/com/conicgradientpackage/ConicGradientTurboPackage.kt",
      "url": "https://github.com/BogiKay/native-gradient/blob/d147d9db269e6ab20ff6e8595e2a58f77552358a/conic-gradient-package/android/src/main/java/com/conicgradientpackage/ConicGradientTurboPackage.kt",
      "fileContent": "package com.conicgradientpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass ConicGradientTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return null\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf(ConicGradientViewManager())\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-11-18T17:06:00Z"
    },
    {
      "repository": "suradisworkspace/react-native-checksum",
      "file": "android/src/main/java/com/ntlchecksum/NtlChecksumPackage.kt",
      "url": "https://github.com/suradisworkspace/react-native-checksum/blob/6dda5e217c871552178789a44a048045611dde66/android/src/main/java/com/ntlchecksum/NtlChecksumPackage.kt",
      "fileContent": "package com.ntlchecksum\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass NtlChecksumPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == NtlChecksumModule.NAME) {\n      NtlChecksumModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[NtlChecksumModule.NAME] = ReactModuleInfo(\n        NtlChecksumModule.NAME,\n        NtlChecksumModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-09-22T07:42:52Z"
    },
    {
      "repository": "Notificare/notificare-sdk-react-native",
      "file": "packages/react-native-notificare/android/src/main/java/re/notifica/react_native/NotificarePackage.kt",
      "url": "https://github.com/Notificare/notificare-sdk-react-native/blob/8d9f7b299835b6b67050e1a1562e02b26e814b19/packages/react-native-notificare/android/src/main/java/re/notifica/react_native/NotificarePackage.kt",
      "fileContent": "package re.notifica.react_native\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\npublic class NotificarePackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NotificareModule.NAME) {\n            NotificareModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n            @Suppress(\"DEPRECATION\")\n            moduleInfos[NotificareModule.NAME] = ReactModuleInfo(\n                NotificareModule.NAME,\n                NotificareModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 6,
      "lastCommitDate": "2024-10-30T16:49:15Z"
    },
    {
      "repository": "gladiuscode/react-native-orientation-director",
      "file": "android/src/main/java/com/orientationdirector/OrientationDirectorPackage.kt",
      "url": "https://github.com/gladiuscode/react-native-orientation-director/blob/4931029c8ac89ed78b19ca2d21bb486317e0d3dc/android/src/main/java/com/orientationdirector/OrientationDirectorPackage.kt",
      "fileContent": "package com.orientationdirector\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.orientationdirector.implementation.OrientationDirectorModuleImpl\nimport java.util.HashMap\n\nclass OrientationDirectorPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == OrientationDirectorModuleImpl.NAME) {\n      OrientationDirectorModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[OrientationDirectorModuleImpl.NAME] = ReactModuleInfo(\n        OrientationDirectorModuleImpl.NAME,\n        OrientationDirectorModuleImpl.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 27,
      "lastCommitDate": "2024-11-10T16:23:02Z"
    },
    {
      "repository": "VIVEK-SUTHAR/rn-video-thumbnails",
      "file": "android/src/main/java/com/rnvideothumbnails/RnVideoThumbnailsPackage.kt",
      "url": "https://github.com/VIVEK-SUTHAR/rn-video-thumbnails/blob/460ba5bbd39309f44d41ee07ed48a931c494ec46/android/src/main/java/com/rnvideothumbnails/RnVideoThumbnailsPackage.kt",
      "fileContent": "package com.rnvideothumbnails\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnVideoThumbnailsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnVideoThumbnailsModule.NAME) {\n      RnVideoThumbnailsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnVideoThumbnailsModule.NAME] = ReactModuleInfo(\n        RnVideoThumbnailsModule.NAME,\n        RnVideoThumbnailsModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-01-01T14:28:10Z"
    },
    {
      "repository": "zsien/react-native-quit-app",
      "file": "android/src/main/java/tech/zsien/RNQuitApp/QuitAppPackage.kt",
      "url": "https://github.com/zsien/react-native-quit-app/blob/4512ac314b33edbbbac142ec92b258943ea26849/android/src/main/java/tech/zsien/RNQuitApp/QuitAppPackage.kt",
      "fileContent": "package tech.zsien.RNQuitApp\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass QuitAppPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == QuitAppModuleImpl.NAME) {\n      QuitAppModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      QuitAppModuleImpl.NAME to ReactModuleInfo(\n        QuitAppModuleImpl.NAME,\n        QuitAppModuleImpl.NAME,\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        false, // isCxxModule\n        true // isTurboModule\n      )\n    )\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-02-27T11:50:05Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/map/android/src/main/java/net/mjstudio/rnkakao/map/RNCKakaoMapPackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/map/android/src/main/java/net/mjstudio/rnkakao/map/RNCKakaoMapPackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.map\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNCKakaoMapPackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoMapModule.NAME) {\n      RNCKakaoMapModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoMapModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoMapModule.NAME,\n          RNCKakaoMapModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "software-mansion/react-native-gesture-handler",
      "file": "android/packageDeprecated/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt",
      "url": "https://github.com/software-mansion/react-native-gesture-handler/blob/abfaa4f3b74dd4ad2be0e01881b512a7053c6cf5/android/packageDeprecated/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt",
      "fileContent": "package com.swmansion.gesturehandler\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport com.swmansion.gesturehandler.react.RNGestureHandlerButtonViewManager\nimport com.swmansion.gesturehandler.react.RNGestureHandlerModule\nimport com.swmansion.gesturehandler.react.RNGestureHandlerRootViewManager\n\n@ReactModuleList(\n  nativeModules = [\n    RNGestureHandlerModule::class\n  ]\n)\nclass RNGestureHandlerPackage : BaseReactPackage(), ViewManagerOnDemandReactPackage {\n  private val viewManagers: Map<String, ModuleSpec> by lazy {\n    mapOf(\n      RNGestureHandlerRootViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec {\n        RNGestureHandlerRootViewManager()\n      },\n      RNGestureHandlerButtonViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec {\n        RNGestureHandlerButtonViewManager()\n      }\n    )\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext) =\n    listOf<ViewManager<*, *>>(\n      RNGestureHandlerRootViewManager(),\n      RNGestureHandlerButtonViewManager()\n    )\n\n  override fun getViewManagerNames(reactContext: ReactApplicationContext?) =\n    viewManagers.keys.toList()\n\n  override fun getViewManagers(reactContext: ReactApplicationContext?): MutableList<ModuleSpec> =\n    viewManagers.values.toMutableList()\n\n  override fun createViewManager(\n    reactContext: ReactApplicationContext?,\n    viewManagerName: String?\n  ) = viewManagers[viewManagerName]?.provider?.get() as? ViewManager<*, *>\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNGestureHandlerModule.NAME) {\n      RNGestureHandlerModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    try {\n      val reactModuleInfoProviderClass =\n        Class.forName(\"com.swmansion.gesturehandler.RNGestureHandlerPackage$\\$ReactModuleInfoProvider\")\n      return reactModuleInfoProviderClass.getDeclaredConstructor().newInstance() as ReactModuleInfoProvider\n    } catch (e: ClassNotFoundException) {\n      return ReactModuleInfoProvider {\n        val reactModule: ReactModule = RNGestureHandlerModule::class.java.getAnnotation(ReactModule::class.java)!!\n\n        mutableMapOf(\n          RNGestureHandlerModule.NAME to ReactModuleInfo(\n            reactModule.name,\n            RNGestureHandlerModule::class.java.name,\n            reactModule.canOverrideExistingModule,\n            reactModule.needsEagerInit,\n            reactModule.isCxxModule,\n            true\n          )\n        )\n      }\n    } catch (e: InstantiationException) {\n      throw RuntimeException(\"No ReactModuleInfoProvider for RNGestureHandlerPackage$\\$ReactModuleInfoProvider\", e)\n    } catch (e: IllegalAccessException) {\n      throw RuntimeException(\"No ReactModuleInfoProvider for RNGestureHandlerPackage$\\$ReactModuleInfoProvider\", e)\n    }\n  }\n}\n",
      "stars": 6163,
      "lastCommitDate": "2024-12-19T08:29:12Z"
    },
    {
      "repository": "kloudfuse/react-native-sdk",
      "file": "android/src/main/java/com/sdk/SdkPackage.kt",
      "url": "https://github.com/kloudfuse/react-native-sdk/blob/3157673ba2215c0ba29c79f6f08366db957305e7/android/src/main/java/com/sdk/SdkPackage.kt",
      "fileContent": "package com.sdk\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass SdkPackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == SdkModule.NAME) {\n      SdkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[SdkModule.NAME] = ReactModuleInfo(\n        SdkModule.NAME,\n        SdkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-09T05:45:20Z"
    },
    {
      "repository": "pmu-tech/react-native-piano-analytics",
      "file": "android/src/main/java/com/reactnative/pianoanalytics/PianoAnalyticsPackage.kt",
      "url": "https://github.com/pmu-tech/react-native-piano-analytics/blob/ab5e714299592739c00bb52343bc645492e77b5a/android/src/main/java/com/reactnative/pianoanalytics/PianoAnalyticsPackage.kt",
      "fileContent": "package com.reactnative.pianoanalytics\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.reactnative.pianoanalytics.RNPianoAnalyticsModule\nimport java.util.HashMap\n\nclass RNPianoAnalyticsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNPianoAnalyticsModule.NAME) {\n      RNPianoAnalyticsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNPianoAnalyticsModule.NAME] = ReactModuleInfo(\n        RNPianoAnalyticsModule.NAME,\n        RNPianoAnalyticsModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-09-23T09:28:38Z"
    },
    {
      "repository": "BILDIT-Platform/react-native-bildit-flybuy",
      "file": "mono/packages/pickup/android/src/main/java/com/bilditplatform/rnflybuypickup/RnFlybuyPickupPackage.kt",
      "url": "https://github.com/BILDIT-Platform/react-native-bildit-flybuy/blob/b31e9b1be1b57fd04507ccf3c047f12a0a13e1e5/mono/packages/pickup/android/src/main/java/com/bilditplatform/rnflybuypickup/RnFlybuyPickupPackage.kt",
      "fileContent": "package com.bilditplatform.rnflybuypickup\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnFlybuyPickupPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnFlybuyPickupModule.NAME) {\n      RnFlybuyPickupModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnFlybuyPickupModule.NAME] = ReactModuleInfo(\n        RnFlybuyPickupModule.NAME,\n        RnFlybuyPickupModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 9,
      "lastCommitDate": "2024-11-21T12:11:09Z"
    },
    {
      "repository": "felipecornejo1/react-native-iovation-2",
      "file": "android/src/main/java/com/iovation/IovationPackage.kt",
      "url": "https://github.com/felipecornejo1/react-native-iovation-2/blob/933c854323a6d901b3caa2a25d1cfd6ae8930d09/android/src/main/java/com/iovation/IovationPackage.kt",
      "fileContent": "package com.reactnativeiovation\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass IovationPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == IovationModule.NAME) {\n      IovationModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[IovationModule.NAME] = ReactModuleInfo(\n        IovationModule.NAME,\n        IovationModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isIovation\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-06-21T20:07:53Z"
    },
    {
      "repository": "trinsic-id/sdk",
      "file": "ui-react-native/sdk/android/src/main/java/com/trinsic/reactnativeui/ReactNativeUiPackage.kt",
      "url": "https://github.com/trinsic-id/sdk/blob/8b0474f0b05ef3079e7b09578d41771932e3989b/ui-react-native/sdk/android/src/main/java/com/trinsic/reactnativeui/ReactNativeUiPackage.kt",
      "fileContent": "package com.trinsic.reactnativeui\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ReactNativeUiPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeUiModule.NAME) {\n      ReactNativeUiModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ReactNativeUiModule.NAME] = ReactModuleInfo(\n        ReactNativeUiModule.NAME,\n        ReactNativeUiModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-12-16T16:19:34Z"
    },
    {
      "repository": "Notificare/notificare-sdk-react-native",
      "file": "packages/react-native-notificare-scannables/android/src/main/java/re/notifica/scannables/react_native/NotificareScannablesPackage.kt",
      "url": "https://github.com/Notificare/notificare-sdk-react-native/blob/8d9f7b299835b6b67050e1a1562e02b26e814b19/packages/react-native-notificare-scannables/android/src/main/java/re/notifica/scannables/react_native/NotificareScannablesPackage.kt",
      "fileContent": "package re.notifica.scannables.react_native\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\npublic class NotificareScannablesPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NotificareScannablesModule.NAME) {\n            NotificareScannablesModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n            @Suppress(\"DEPRECATION\")\n            moduleInfos[NotificareScannablesModule.NAME] = ReactModuleInfo(\n                NotificareScannablesModule.NAME,\n                NotificareScannablesModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 6,
      "lastCommitDate": "2024-10-30T16:49:15Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-storage",
      "file": "packages/onedrive/android/src/main/java/com/openmobilehub/reactnative/storage/onedrive/StorageOneDrivePackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-storage/blob/32252635fa01a80aa80a38a7a7a6203beebf2952/packages/onedrive/android/src/main/java/com/openmobilehub/reactnative/storage/onedrive/StorageOneDrivePackage.kt",
      "fileContent": "package com.openmobilehub.reactnative.storage.onedrive\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass StorageOneDrivePackage : TurboReactPackage() {\n  /**\n   * Initialize and export modules based on the name of the required module\n   */\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      StorageOneDriveModuleImpl.NAME -> StorageOneDriveModule(reactContext)\n      else -> null\n    }\n  }\n\n  /**\n   * Declare info about exported modules\n   */\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    /**\n     * Here declare the array of exported modules\n     */\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n      StorageOneDriveModule::class.java,\n    )\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    /**\n     * And here just iterate on that array and produce the info provider instance\n     */\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n        ReactModuleInfo(\n          reactModule.name,\n          moduleClass.name,\n          true,\n          reactModule.needsEagerInit,\n          reactModule.hasConstants,\n          reactModule.isCxxModule,\n          TurboModule::class.java.isAssignableFrom(moduleClass)\n        )\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n}\n",
      "stars": 7,
      "lastCommitDate": "2024-10-28T12:32:53Z"
    },
    {
      "repository": "haianh286/mattermost-mobile",
      "file": "libraries/@mattermost/rnutils/android/src/main/java/com/mattermost/rnutils/RNUtilsPackage.kt",
      "url": "https://github.com/haianh286/mattermost-mobile/blob/629683a310a3bd186b17b958b0969a54273d9528/libraries/@mattermost/rnutils/android/src/main/java/com/mattermost/rnutils/RNUtilsPackage.kt",
      "fileContent": "package com.mattermost.rnutils\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNUtilsPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == RNUtilsModuleImpl.NAME) {\n            RNUtilsModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n                RNUtilsModuleImpl.NAME to ReactModuleInfo(\n                        RNUtilsModuleImpl.NAME,\n                        RNUtilsModuleImpl.NAME,\n                        false,\n                        false,\n                        false,\n                        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                )\n        )\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-25T22:40:46Z"
    },
    {
      "repository": "NJITBlockchainLab/bifold",
      "file": "packages/react-native-attestation/android/src/main/java/com/attestation/AttestationPackage.kt",
      "url": "https://github.com/NJITBlockchainLab/bifold/blob/c8d91286782825cbb4c32f80305b443b37b46168/packages/react-native-attestation/android/src/main/java/com/attestation/AttestationPackage.kt",
      "fileContent": "package com.attestation\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AttestationPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AttestationModule.NAME) {\n      AttestationModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AttestationModule.NAME] = ReactModuleInfo(\n        AttestationModule.NAME,\n        AttestationModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-07-12T05:10:45Z"
    },
    {
      "repository": "sedessapi/bifold",
      "file": "packages/react-native-attestation/android/src/main/java/com/attestation/AttestationPackage.kt",
      "url": "https://github.com/sedessapi/bifold/blob/2fdf2428b7f01741364b897d5802d0db56d407a5/packages/react-native-attestation/android/src/main/java/com/attestation/AttestationPackage.kt",
      "fileContent": "package com.attestation\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AttestationPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AttestationModule.NAME) {\n      AttestationModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AttestationModule.NAME] = ReactModuleInfo(\n        AttestationModule.NAME,\n        AttestationModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-02-08T07:48:25Z"
    },
    {
      "repository": "suvasanpui/projectReact",
      "file": "react-native-health-connect-main/android/src/main/java/dev/matinzd/healthconnect/HealthConnectPackage.kt",
      "url": "https://github.com/suvasanpui/projectReact/blob/8e023923b7f9b5289866cc57c6c73b421eea1715/react-native-health-connect-main/android/src/main/java/dev/matinzd/healthconnect/HealthConnectPackage.kt",
      "fileContent": "package dev.matinzd.healthconnect\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass HealthConnectPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == HealthConnectModule.NAME) {\n      HealthConnectModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[HealthConnectModule.NAME] = ReactModuleInfo(\n        HealthConnectModule.NAME,\n        HealthConnectModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-10T17:05:33Z"
    },
    {
      "repository": "Maxdev18/powersync_app",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "url": "https://github.com/Maxdev18/powersync_app/blob/276520bb11d8e787b832e5ad3db9bed74444a4d3/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.app.Application\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.ReactApplication\nimport com.facebook.react.ReactHost\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.assets.ReactFontManager\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultReactHost\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.osslibraryexample.OSSLibraryExamplePackage\nimport com.facebook.react.popupmenu.PopupMenuPackage\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.soloader.OpenSourceMergedSoMapping\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ReactShadowNode\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.soloader.SoLoader\n\ninternal class RNTesterApplication : Application(), ReactApplication {\n  override val reactNativeHost: ReactNativeHost by lazy {\n    object : DefaultReactNativeHost(this) {\n      public override fun getJSMainModuleName(): String = BuildConfig.JS_MAIN_MODULE_NAME\n\n      public override fun getBundleAssetName(): String = BuildConfig.BUNDLE_ASSET_NAME\n\n      override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n      public override fun getPackages(): List<ReactPackage> {\n        return listOf(\n            MainReactPackage(),\n            PopupMenuPackage(),\n            OSSLibraryExamplePackage(),\n            object : BaseReactPackage() {\n              override fun getModule(\n                  name: String,\n                  reactContext: ReactApplicationContext\n              ): NativeModule? {\n                if (!isNewArchEnabled) {\n                  return null\n                }\n                if (SampleTurboModule.NAME == name) {\n                  return SampleTurboModule(reactContext)\n                }\n                if (SampleLegacyModule.NAME == name) {\n                  return SampleLegacyModule(reactContext)\n                }\n                return null\n              }\n\n              // Note: Specialized annotation processor for @ReactModule isn't configured in OSS\n              // yet. For now, hardcode this information, though it's not necessary for most\n              // modules.\n              override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n                  ReactModuleInfoProvider {\n                    if (isNewArchEnabled) {\n                      mapOf(\n                          SampleTurboModule.NAME to\n                              ReactModuleInfo(\n                                  SampleTurboModule.NAME,\n                                  \"SampleTurboModule\",\n                                  _canOverrideExistingModule = false,\n                                  _needsEagerInit = false,\n                                  isCxxModule = false,\n                                  isTurboModule = true),\n                          SampleLegacyModule.NAME to\n                              ReactModuleInfo(\n                                  SampleLegacyModule.NAME,\n                                  \"SampleLegacyModule\",\n                                  _canOverrideExistingModule = false,\n                                  _needsEagerInit = false,\n                                  isCxxModule = false,\n                                  isTurboModule = false))\n                    } else {\n                      emptyMap()\n                    }\n                  }\n            },\n            object : ReactPackage, ViewManagerOnDemandReactPackage {\n              override fun createNativeModules(\n                  reactContext: ReactApplicationContext\n              ): List<NativeModule> = emptyList()\n\n              override fun getViewManagerNames(reactContext: ReactApplicationContext) =\n                  listOf(\"RNTMyNativeView\", \"RNTMyLegacyNativeView\")\n\n              override fun createViewManagers(\n                  reactContext: ReactApplicationContext\n              ): List<ViewManager<*, *>> =\n                  listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n\n              override fun createViewManager(\n                  reactContext: ReactApplicationContext,\n                  viewManagerName: String\n              ): ViewManager<*, out ReactShadowNode<*>>? =\n                  when (viewManagerName) {\n                    \"RNTMyNativeView\" -> MyNativeViewManager()\n                    \"RNTMyLegacyNativeView\" -> MyLegacyViewManager(reactContext)\n                    else -> null\n                  }\n            })\n      }\n\n      override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED_IN_FLAVOR\n    }\n  }\n\n  override val reactHost: ReactHost\n    get() = DefaultReactHost.getDefaultReactHost(applicationContext, reactNativeHost)\n\n  override fun onCreate() {\n    ReactFontManager.getInstance().addCustomFont(this, \"Rubik\", R.font.rubik)\n    super.onCreate()\n\n    if (BuildConfig.IS_INTERNAL_BUILD) {\n      // For Buck we call the simple init() as the SoMapping is built-from-source inside SoLoader\n      SoLoader.init(this, false)\n    } else {\n      // For Gradle instead, we need to specify it as constructor parameter.\n      SoLoader.init(this, OpenSourceMergedSoMapping)\n    }\n\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      load()\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-14T03:05:21Z"
    },
    {
      "repository": "BILDIT-Platform/rn-flybuy",
      "file": "mono/packages/presence/android/src/main/java/com/bilditplatform/rnflybuypresence/RnFlybuyPresencePackage.kt",
      "url": "https://github.com/BILDIT-Platform/rn-flybuy/blob/822359f21a16681f72d0d3d203b9f5595183b9ee/mono/packages/presence/android/src/main/java/com/bilditplatform/rnflybuypresence/RnFlybuyPresencePackage.kt",
      "fileContent": "package com.bilditplatform.rnflybuypresence\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnFlybuyPresencePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnFlybuyPresenceModule.NAME) {\n      RnFlybuyPresenceModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnFlybuyPresenceModule.NAME] = ReactModuleInfo(\n        RnFlybuyPresenceModule.NAME,\n        RnFlybuyPresenceModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-07-31T15:50:41Z"
    },
    {
      "repository": "nuagoz/react-native",
      "file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/module/model/ReactModuleInfo.kt",
      "url": "https://github.com/nuagoz/react-native/blob/9a884d2d3f8c42f66f58486c0c6d2e7248194ab4/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/module/model/ReactModuleInfo.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.module.model\n\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\n/**\n * Data holder class holding native module specifications. [ReactModuleSpecProcessor] creates these\n * so Java modules don't have to be instantiated at React Native start up.\n */\npublic class ReactModuleInfo(\n    private val _name: String,\n    private val _className: String,\n    private val _canOverrideExistingModule: Boolean,\n    private val _needsEagerInit: Boolean,\n    public val isCxxModule: Boolean,\n    public val isTurboModule: Boolean\n) {\n\n  @Deprecated(\"use ReactModuleInfo(String, String, boolean, boolean, boolean, boolean)]\")\n  public constructor(\n      name: String,\n      className: String,\n      canOverrideExistingModule: Boolean,\n      needsEagerInit: Boolean,\n      @Suppress(\"UNUSED_PARAMETER\") hasConstants: Boolean,\n      isCxxModule: Boolean,\n      isTurboModule: Boolean\n  ) : this(name, className, canOverrideExistingModule, needsEagerInit, isCxxModule, isTurboModule)\n\n  public fun name(): String = _name\n\n  public fun className(): String = _className\n\n  public fun canOverrideExistingModule(): Boolean = _canOverrideExistingModule\n\n  public fun needsEagerInit(): Boolean = _needsEagerInit\n\n  @Deprecated(\"this is hardcoded to return true, regardless if the module has constants or not\")\n  public fun hasConstants(): Boolean = true\n\n  public companion object {\n    /**\n     * Checks if the passed class is a TurboModule. Useful to populate the parameter [isTurboModule]\n     * in the constructor of ReactModuleInfo.\n     */\n    @JvmStatic\n    public fun classIsTurboModule(clazz: Class<*>): Boolean =\n        TurboModule::class.java.isAssignableFrom(clazz)\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-13T22:41:22Z"
    },
    {
      "repository": "pvinis/react-native---investigation",
      "file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/module/model/ReactModuleInfo.kt",
      "url": "https://github.com/pvinis/react-native---investigation/blob/932ede506d498f46b109795aba33fd06127b4600/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/module/model/ReactModuleInfo.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.module.model\n\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\n/**\n * Data holder class holding native module specifications. [ReactModuleSpecProcessor] creates these\n * so Java modules don't have to be instantiated at React Native start up.\n */\npublic class ReactModuleInfo(\n    private val _name: String,\n    private val _className: String,\n    private val _canOverrideExistingModule: Boolean,\n    private val _needsEagerInit: Boolean,\n    public val isCxxModule: Boolean,\n    public val isTurboModule: Boolean\n) {\n\n  @Deprecated(\"use ReactModuleInfo(String, String, boolean, boolean, boolean, boolean)]\")\n  public constructor(\n      name: String,\n      className: String,\n      canOverrideExistingModule: Boolean,\n      needsEagerInit: Boolean,\n      @Suppress(\"UNUSED_PARAMETER\") hasConstants: Boolean,\n      isCxxModule: Boolean,\n      isTurboModule: Boolean\n  ) : this(name, className, canOverrideExistingModule, needsEagerInit, isCxxModule, isTurboModule)\n\n  public fun name(): String = _name\n\n  public fun className(): String = _className\n\n  public fun canOverrideExistingModule(): Boolean = _canOverrideExistingModule\n\n  public fun needsEagerInit(): Boolean = _needsEagerInit\n\n  @Deprecated(\"this is hardcoded to return true, regardless if the module has constants or not\")\n  public fun hasConstants(): Boolean = true\n\n  public companion object {\n    /**\n     * Checks if the passed class is a TurboModule. Useful to populate the parameter [isTurboModule]\n     * in the constructor of ReactModuleInfo.\n     */\n    @JvmStatic\n    public fun classIsTurboModule(clazz: Class<*>): Boolean =\n        TurboModule::class.java.isAssignableFrom(clazz)\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-18T20:11:40Z"
    },
    {
      "repository": "beanchips/facebookreactnative",
      "file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/module/model/ReactModuleInfo.kt",
      "url": "https://github.com/beanchips/facebookreactnative/blob/da6272106124376c94efde38177469a774fe0a40/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/module/model/ReactModuleInfo.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.module.model\n\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\n/**\n * Data holder class holding native module specifications. [ReactModuleSpecProcessor] creates these\n * so Java modules don't have to be instantiated at React Native start up.\n */\npublic class ReactModuleInfo(\n    private val _name: String,\n    private val _className: String,\n    private val _canOverrideExistingModule: Boolean,\n    private val _needsEagerInit: Boolean,\n    public val isCxxModule: Boolean,\n    public val isTurboModule: Boolean\n) {\n\n  @Deprecated(\"use ReactModuleInfo(String, String, boolean, boolean, boolean, boolean)]\")\n  public constructor(\n      name: String,\n      className: String,\n      canOverrideExistingModule: Boolean,\n      needsEagerInit: Boolean,\n      @Suppress(\"UNUSED_PARAMETER\") hasConstants: Boolean,\n      isCxxModule: Boolean,\n      isTurboModule: Boolean\n  ) : this(name, className, canOverrideExistingModule, needsEagerInit, isCxxModule, isTurboModule)\n\n  public fun name(): String = _name\n\n  public fun className(): String = _className\n\n  public fun canOverrideExistingModule(): Boolean = _canOverrideExistingModule\n\n  public fun needsEagerInit(): Boolean = _needsEagerInit\n\n  @Deprecated(\"this is hardcoded to return true, regardless if the module has constants or not\")\n  public fun hasConstants(): Boolean = true\n\n  public companion object {\n    /**\n     * Checks if the passed class is a TurboModule. Useful to populate the parameter [isTurboModule]\n     * in the constructor of ReactModuleInfo.\n     */\n    @JvmStatic\n    public fun classIsTurboModule(clazz: Class<*>): Boolean =\n        TurboModule::class.java.isAssignableFrom(clazz)\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-18T23:14:02Z"
    },
    {
      "repository": "Maxdev18/powersync_app",
      "file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/module/model/ReactModuleInfo.kt",
      "url": "https://github.com/Maxdev18/powersync_app/blob/276520bb11d8e787b832e5ad3db9bed74444a4d3/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/module/model/ReactModuleInfo.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.module.model\n\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\n/**\n * Data holder class holding native module specifications. [ReactModuleSpecProcessor] creates these\n * so Java modules don't have to be instantiated at React Native start up.\n */\npublic class ReactModuleInfo(\n    private val _name: String,\n    private val _className: String,\n    private val _canOverrideExistingModule: Boolean,\n    private val _needsEagerInit: Boolean,\n    public val isCxxModule: Boolean,\n    public val isTurboModule: Boolean\n) {\n\n  @Deprecated(\"use ReactModuleInfo(String, String, boolean, boolean, boolean, boolean)]\")\n  public constructor(\n      name: String,\n      className: String,\n      canOverrideExistingModule: Boolean,\n      needsEagerInit: Boolean,\n      @Suppress(\"UNUSED_PARAMETER\") hasConstants: Boolean,\n      isCxxModule: Boolean,\n      isTurboModule: Boolean\n  ) : this(name, className, canOverrideExistingModule, needsEagerInit, isCxxModule, isTurboModule)\n\n  public fun name(): String = _name\n\n  public fun className(): String = _className\n\n  public fun canOverrideExistingModule(): Boolean = _canOverrideExistingModule\n\n  public fun needsEagerInit(): Boolean = _needsEagerInit\n\n  @Deprecated(\"this is hardcoded to return true, regardless if the module has constants or not\")\n  public fun hasConstants(): Boolean = true\n\n  public companion object {\n    /**\n     * Checks if the passed class is a TurboModule. Useful to populate the parameter [isTurboModule]\n     * in the constructor of ReactModuleInfo.\n     */\n    @JvmStatic\n    public fun classIsTurboModule(clazz: Class<*>): Boolean =\n        TurboModule::class.java.isAssignableFrom(clazz)\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-14T03:05:21Z"
    },
    {
      "repository": "JKobrynski/BridgingTutorial",
      "file": "conic-gradient-package/android/src/main/java/com/conicgradientpackage/ConicGradientTurboPackage.kt",
      "url": "https://github.com/JKobrynski/BridgingTutorial/blob/94fd8c7d3d5496687a8f0572bf179303954c35dd/conic-gradient-package/android/src/main/java/com/conicgradientpackage/ConicGradientTurboPackage.kt",
      "fileContent": "package com.conicgradientpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass ConicGradientTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return null\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf(ConicGradientViewManager())\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-02-19T13:09:52Z"
    },
    {
      "repository": "BILDIT-Platform/rn-flybuy",
      "file": "mono/packages/pickup/android/src/main/java/com/bilditplatform/rnflybuypickup/RnFlybuyPickupPackage.kt",
      "url": "https://github.com/BILDIT-Platform/rn-flybuy/blob/822359f21a16681f72d0d3d203b9f5595183b9ee/mono/packages/pickup/android/src/main/java/com/bilditplatform/rnflybuypickup/RnFlybuyPickupPackage.kt",
      "fileContent": "package com.bilditplatform.rnflybuypickup\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnFlybuyPickupPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnFlybuyPickupModule.NAME) {\n      RnFlybuyPickupModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnFlybuyPickupModule.NAME] = ReactModuleInfo(\n        RnFlybuyPickupModule.NAME,\n        RnFlybuyPickupModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-07-31T15:50:41Z"
    },
    {
      "repository": "facebook/react-native",
      "file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/shell/MainReactPackage.kt",
      "url": "https://github.com/facebook/react-native/blob/b8f3f919cc9ebbd086d9ac79c93fffd532c55b09/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/shell/MainReactPackage.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.shell\n\nimport android.annotation.SuppressLint\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.animated.NativeAnimatedModule\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.ClassFinder\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfo.Companion.classIsTurboModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.modules.accessibilityinfo.AccessibilityInfoModule\nimport com.facebook.react.modules.appearance.AppearanceModule\nimport com.facebook.react.modules.appstate.AppStateModule\nimport com.facebook.react.modules.blob.BlobModule\nimport com.facebook.react.modules.blob.FileReaderModule\nimport com.facebook.react.modules.camera.ImageStoreManager\nimport com.facebook.react.modules.clipboard.ClipboardModule\nimport com.facebook.react.modules.devloading.DevLoadingModule\nimport com.facebook.react.modules.devtoolsruntimesettings.ReactDevToolsRuntimeSettingsModule\nimport com.facebook.react.modules.dialog.DialogModule\nimport com.facebook.react.modules.fresco.FrescoModule\nimport com.facebook.react.modules.i18nmanager.I18nManagerModule\nimport com.facebook.react.modules.image.ImageLoaderModule\nimport com.facebook.react.modules.intent.IntentModule\nimport com.facebook.react.modules.network.NetworkingModule\nimport com.facebook.react.modules.permissions.PermissionsModule\nimport com.facebook.react.modules.reactdevtoolssettings.ReactDevToolsSettingsManagerModule\nimport com.facebook.react.modules.share.ShareModule\nimport com.facebook.react.modules.sound.SoundManagerModule\nimport com.facebook.react.modules.statusbar.StatusBarModule\nimport com.facebook.react.modules.toast.ToastModule\nimport com.facebook.react.modules.vibration.VibrationModule\nimport com.facebook.react.modules.websocket.WebSocketModule\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.react.views.drawer.ReactDrawerLayoutManager\nimport com.facebook.react.views.image.ReactImageManager\nimport com.facebook.react.views.modal.ReactModalHostManager\nimport com.facebook.react.views.progressbar.ReactProgressBarViewManager\nimport com.facebook.react.views.safeareaview.ReactSafeAreaViewManager\nimport com.facebook.react.views.scroll.ReactHorizontalScrollContainerViewManager\nimport com.facebook.react.views.scroll.ReactHorizontalScrollViewManager\nimport com.facebook.react.views.scroll.ReactScrollViewManager\nimport com.facebook.react.views.swiperefresh.SwipeRefreshLayoutManager\nimport com.facebook.react.views.switchview.ReactSwitchManager\nimport com.facebook.react.views.text.ReactRawTextManager\nimport com.facebook.react.views.text.ReactTextViewManager\nimport com.facebook.react.views.text.ReactVirtualTextViewManager\nimport com.facebook.react.views.text.frescosupport.FrescoBasedReactTextInlineImageViewManager\nimport com.facebook.react.views.textinput.ReactTextInputManager\nimport com.facebook.react.views.unimplementedview.ReactUnimplementedViewManager\nimport com.facebook.react.views.view.ReactViewManager\n\n/**\n * Package defining basic modules and view managers.\n *\n * @param config configuration for the Main package.\n */\n@ReactModuleList(\n    nativeModules =\n        [\n            AccessibilityInfoModule::class,\n            AppearanceModule::class,\n            AppStateModule::class,\n            BlobModule::class,\n            DevLoadingModule::class,\n            FileReaderModule::class,\n            ClipboardModule::class,\n            DialogModule::class,\n            FrescoModule::class,\n            I18nManagerModule::class,\n            ImageLoaderModule::class,\n            ImageStoreManager::class,\n            IntentModule::class,\n            NativeAnimatedModule::class,\n            NetworkingModule::class,\n            PermissionsModule::class,\n            ReactDevToolsSettingsManagerModule::class,\n            ReactDevToolsRuntimeSettingsModule::class,\n            ShareModule::class,\n            SoundManagerModule::class,\n            StatusBarModule::class,\n            ToastModule::class,\n            VibrationModule::class,\n            WebSocketModule::class,\n        ])\npublic class MainReactPackage\n@JvmOverloads\nconstructor(private val config: MainPackageConfig? = null) :\n    BaseReactPackage(), ViewManagerOnDemandReactPackage {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n      when (name) {\n        AccessibilityInfoModule.NAME -> AccessibilityInfoModule(reactContext)\n        AppearanceModule.NAME -> AppearanceModule(reactContext)\n        AppStateModule.NAME -> AppStateModule(reactContext)\n        BlobModule.NAME -> BlobModule(reactContext)\n        DevLoadingModule.NAME -> DevLoadingModule(reactContext)\n        FileReaderModule.NAME -> FileReaderModule(reactContext)\n        ClipboardModule.NAME -> ClipboardModule(reactContext)\n        DialogModule.NAME -> DialogModule(reactContext)\n        FrescoModule.NAME -> FrescoModule(reactContext, true, config?.frescoConfig)\n        I18nManagerModule.NAME -> I18nManagerModule(reactContext)\n        ImageLoaderModule.NAME -> ImageLoaderModule(reactContext)\n        ImageStoreManager.NAME -> ImageStoreManager(reactContext)\n        IntentModule.NAME -> IntentModule(reactContext)\n        NativeAnimatedModule.NAME -> NativeAnimatedModule(reactContext)\n        NetworkingModule.NAME -> NetworkingModule(reactContext)\n        PermissionsModule.NAME -> PermissionsModule(reactContext)\n        ShareModule.NAME -> ShareModule(reactContext)\n        StatusBarModule.NAME -> StatusBarModule(reactContext)\n        SoundManagerModule.NAME -> SoundManagerModule(reactContext)\n        ToastModule.NAME -> ToastModule(reactContext)\n        VibrationModule.NAME -> VibrationModule(reactContext)\n        WebSocketModule.NAME -> WebSocketModule(reactContext)\n        ReactDevToolsSettingsManagerModule.NAME -> ReactDevToolsSettingsManagerModule(reactContext)\n        ReactDevToolsRuntimeSettingsModule.NAME -> ReactDevToolsRuntimeSettingsModule(reactContext)\n        else -> null\n      }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> =\n      listOf(\n          ReactDrawerLayoutManager(),\n          ReactHorizontalScrollViewManager(),\n          ReactHorizontalScrollContainerViewManager(),\n          ReactProgressBarViewManager(),\n          ReactScrollViewManager(),\n          ReactSwitchManager(),\n          ReactSafeAreaViewManager(),\n          SwipeRefreshLayoutManager(),\n          // Native equivalents\n          FrescoBasedReactTextInlineImageViewManager(),\n          ReactImageManager(),\n          ReactModalHostManager(),\n          ReactRawTextManager(),\n          ReactTextInputManager(),\n          ReactTextViewManager(),\n          ReactViewManager(),\n          ReactVirtualTextViewManager(),\n          ReactUnimplementedViewManager())\n\n  /**\n   * A map of view managers that should be registered with\n   * [com.facebook.react.uimanager.UIManagerModule]\n   */\n  @SuppressLint(\"VisibleForTests\")\n  public val viewManagersMap: Map<String, ModuleSpec> =\n      mapOf(\n          ReactDrawerLayoutManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactDrawerLayoutManager() },\n          ReactHorizontalScrollViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactHorizontalScrollViewManager() },\n          ReactHorizontalScrollContainerViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactHorizontalScrollContainerViewManager() },\n          ReactProgressBarViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactProgressBarViewManager() },\n          ReactSafeAreaViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactSafeAreaViewManager() },\n          ReactScrollViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactScrollViewManager() },\n          ReactSwitchManager.REACT_CLASS to ModuleSpec.viewManagerSpec { ReactSwitchManager() },\n          SwipeRefreshLayoutManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { SwipeRefreshLayoutManager() },\n          FrescoBasedReactTextInlineImageViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { FrescoBasedReactTextInlineImageViewManager() },\n          ReactImageManager.REACT_CLASS to ModuleSpec.viewManagerSpec { ReactImageManager() },\n          ReactModalHostManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactModalHostManager() },\n          ReactRawTextManager.REACT_CLASS to ModuleSpec.viewManagerSpec { ReactRawTextManager() },\n          ReactTextInputManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactTextInputManager() },\n          ReactTextViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec { ReactTextViewManager() },\n          ReactViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec { ReactViewManager() },\n          ReactVirtualTextViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactVirtualTextViewManager() },\n          ReactUnimplementedViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactUnimplementedViewManager() })\n\n  public override fun getViewManagers(reactContext: ReactApplicationContext): List<ModuleSpec> =\n      viewManagersMap.values.toList()\n\n  override fun getViewManagerNames(reactContext: ReactApplicationContext): Collection<String> =\n      viewManagersMap.keys\n\n  override fun createViewManager(\n      reactContext: ReactApplicationContext,\n      viewManagerName: String\n  ): ViewManager<*, *>? {\n    val spec = viewManagersMap[viewManagerName]\n    return spec?.provider?.get() as? ViewManager<*, *>\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    if (!ClassFinder.canLoadClassesFromAnnotationProcessors()) {\n      return fallbackForMissingClass()\n    }\n    try {\n      val reactModuleInfoProviderClass =\n          ClassFinder.findClass(\n              \"com.facebook.react.shell.MainReactPackage$\\$ReactModuleInfoProvider\")\n      @Suppress(\"DEPRECATION\")\n      return reactModuleInfoProviderClass?.newInstance() as? ReactModuleInfoProvider\n          ?: fallbackForMissingClass()\n    } catch (e: ClassNotFoundException) {\n      return fallbackForMissingClass()\n    } catch (e: InstantiationException) {\n      throw RuntimeException(\n          \"No ReactModuleInfoProvider for MainReactPackage$\\$ReactModuleInfoProvider\", e)\n    } catch (e: IllegalAccessException) {\n      throw RuntimeException(\n          \"No ReactModuleInfoProvider for MainReactPackage$\\$ReactModuleInfoProvider\", e)\n    }\n  }\n\n  private fun fallbackForMissingClass(): ReactModuleInfoProvider {\n    // In the OSS case, the annotation processor does not run.\n    // We fall back to creating this by hand\n    val moduleList: Array<Class<*>> =\n        arrayOf(\n            AccessibilityInfoModule::class.java,\n            AppearanceModule::class.java,\n            AppStateModule::class.java,\n            BlobModule::class.java,\n            DevLoadingModule::class.java,\n            FileReaderModule::class.java,\n            ClipboardModule::class.java,\n            DialogModule::class.java,\n            FrescoModule::class.java,\n            I18nManagerModule::class.java,\n            ImageLoaderModule::class.java,\n            ImageStoreManager::class.java,\n            IntentModule::class.java,\n            NativeAnimatedModule::class.java,\n            NetworkingModule::class.java,\n            PermissionsModule::class.java,\n            ReactDevToolsSettingsManagerModule::class.java,\n            ReactDevToolsRuntimeSettingsModule::class.java,\n            ShareModule::class.java,\n            StatusBarModule::class.java,\n            SoundManagerModule::class.java,\n            ToastModule::class.java,\n            VibrationModule::class.java,\n            WebSocketModule::class.java)\n\n    val moduleMap =\n        moduleList\n            .filter { it.isAnnotationPresent(ReactModule::class.java) }\n            .associate { moduleClass ->\n              val reactModule = checkNotNull(moduleClass.getAnnotation(ReactModule::class.java))\n              reactModule.name to\n                  ReactModuleInfo(\n                      reactModule.name,\n                      moduleClass.name,\n                      reactModule.canOverrideExistingModule,\n                      reactModule.needsEagerInit,\n                      reactModule.isCxxModule,\n                      classIsTurboModule(moduleClass))\n            }\n    return ReactModuleInfoProvider { moduleMap }\n  }\n}\n",
      "stars": 119775,
      "lastCommitDate": "2024-12-19T01:39:30Z"
    },
    {
      "repository": "expo/expo",
      "file": "apps/expo-go/android/expoview/src/main/java/versioned/host/exp/exponent/ExpoTurboPackage.kt",
      "url": "https://github.com/expo/expo/blob/13889cda0dc0a8da88e88c13943b252f2b625a65/apps/expo-go/android/expoview/src/main/java/versioned/host/exp/exponent/ExpoTurboPackage.kt",
      "fileContent": "// Copyright 2020-present 650 Industries. All rights reserved.\npackage versioned.host.exp.exponent\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.modules.intent.IntentModule\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport expo.modules.manifests.core.Manifest\nimport host.exp.exponent.kernel.KernelConstants\nimport versioned.host.exp.exponent.modules.internal.ExponentIntentModule\n\n/** Package defining basic modules and view managers.  */\n@ReactModuleList(\n  nativeModules = [\n    ExponentIntentModule::class\n  ]\n)\nclass ExpoTurboPackage(\n  private val experienceProperties: Map<String, Any?>,\n  private val manifest: Manifest\n) : TurboReactPackage() {\n  override fun getModule(name: String, context: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      IntentModule.NAME -> ExponentIntentModule(\n        context,\n        experienceProperties\n      )\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return try {\n      // TODO(Bacon): Does this need to reflect ExpoTurboPackage$$ReactModuleInfoProvider ?\n      val reactModuleInfoProviderClass = Class.forName(\"com.facebook.react.shell.MainReactPackage$\\$ReactModuleInfoProvider\")\n      reactModuleInfoProviderClass.newInstance() as ReactModuleInfoProvider\n    } catch (e: ClassNotFoundException) {\n      // In OSS case, the annotation processor does not run. We fall back on creating this by hand\n      val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n        ExponentIntentModule::class.java\n      )\n      val reactModuleInfoMap = mutableMapOf<String, ReactModuleInfo>()\n      for (moduleClass in moduleList) {\n        val reactModule = moduleClass.getAnnotation(ReactModule::class.java)!!\n        val isTurbo = TurboModule::class.java.isAssignableFrom(moduleClass)\n\n        reactModuleInfoMap[reactModule.name] = ReactModuleInfo(\n          reactModule.name,\n          moduleClass.name,\n          reactModule.canOverrideExistingModule,\n          reactModule.needsEagerInit,\n          reactModule.isCxxModule,\n          isTurbo\n        )\n      }\n      ReactModuleInfoProvider { reactModuleInfoMap }\n    } catch (e: InstantiationException) {\n      throw RuntimeException(\n        \"No ReactModuleInfoProvider for CoreModulesPackage$\\$ReactModuleInfoProvider\",\n        e\n      )\n    } catch (e: IllegalAccessException) {\n      throw RuntimeException(\n        \"No ReactModuleInfoProvider for CoreModulesPackage$\\$ReactModuleInfoProvider\",\n        e\n      )\n    }\n  }\n\n  companion object {\n    private val TAG = ExpoTurboPackage::class.java.simpleName\n\n    fun kernelExpoTurboPackage(manifest: Manifest, initialURL: String?): ExpoTurboPackage {\n      val kernelExperienceProperties = mutableMapOf(\n        KernelConstants.LINKING_URI_KEY to \"exp://\",\n        KernelConstants.IS_HEADLESS_KEY to false\n      ).apply {\n        if (initialURL != null) {\n          this[KernelConstants.INTENT_URI_KEY] = initialURL\n        }\n      }\n      return ExpoTurboPackage(kernelExperienceProperties, manifest)\n    }\n  }\n}\n",
      "stars": 35538,
      "lastCommitDate": "2024-12-18T21:28:11Z"
    },
    {
      "repository": "kirillzyusko/react-native-keyboard-controller",
      "file": "android/src/main/java/com/reactnativekeyboardcontroller/KeyboardControllerPackage.kt",
      "url": "https://github.com/kirillzyusko/react-native-keyboard-controller/blob/16c0a76a647bca3061aaa6a4d4043a94582b35e0/android/src/main/java/com/reactnativekeyboardcontroller/KeyboardControllerPackage.kt",
      "fileContent": "package com.reactnativekeyboardcontroller\n\nimport androidx.annotation.Nullable\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport com.reactnativekeyboardcontroller.modules.KeyboardControllerModuleImpl\nimport com.reactnativekeyboardcontroller.modules.StatusBarManagerCompatModuleImpl\n\nclass KeyboardControllerPackage : TurboReactPackage() {\n  @Nullable\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    when (name) {\n      KeyboardControllerModuleImpl.NAME -> {\n        KeyboardControllerModule(reactContext)\n      }\n      StatusBarManagerCompatModuleImpl.NAME -> {\n        StatusBarManagerCompatModule(reactContext)\n      }\n      else -> {\n        null\n      }\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      moduleInfos[KeyboardControllerModuleImpl.NAME] =\n        ReactModuleInfo(\n          KeyboardControllerModuleImpl.NAME,\n          KeyboardControllerModuleImpl.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          true, // hasConstants\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos[StatusBarManagerCompatModuleImpl.NAME] =\n        ReactModuleInfo(\n          StatusBarManagerCompatModuleImpl.NAME,\n          StatusBarManagerCompatModuleImpl.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          true, // hasConstants\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> =\n    listOf(\n      KeyboardControllerViewManager(reactContext),\n      KeyboardGestureAreaViewManager(reactContext),\n      OverKeyboardViewManager(reactContext),\n    )\n}\n",
      "stars": 1819,
      "lastCommitDate": "2024-12-18T13:19:04Z"
    },
    {
      "repository": "baronha/ting",
      "file": "android/src/main/java/com/ting/TingPackage.kt",
      "url": "https://github.com/baronha/ting/blob/589e122c67577e507f675ac0ca8d1d3e29d39e94/android/src/main/java/com/ting/TingPackage.kt",
      "fileContent": "package com.ting\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass TingPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TingModule.NAME) {\n      TingModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[TingModule.NAME] = ReactModuleInfo(\n        TingModule.NAME,\n        TingModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 329,
      "lastCommitDate": "2024-11-10T17:00:51Z"
    },
    {
      "repository": "margelo/react-native-nitro-sqlite",
      "file": "package/android/src/main/java/com/margelo/rnnitrosqlite/RNNitroSQLitePackage.kt",
      "url": "https://github.com/margelo/react-native-nitro-sqlite/blob/12757ca3d152e967239e0ec5d39169d5dbd0cbc5/package/android/src/main/java/com/margelo/rnnitrosqlite/RNNitroSQLitePackage.kt",
      "fileContent": "package com.margelo.rnnitrosqlite\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNNitroSQLitePackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == RNNitroSQLiteOnLoadModule.NAME) {\n          RNNitroSQLiteOnLoadModule(reactContext)\n        } else {\n          null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n          val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n          val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n          moduleInfos[RNNitroSQLiteOnLoadModule.NAME] = ReactModuleInfo(\n            RNNitroSQLiteOnLoadModule.NAME,\n            RNNitroSQLiteOnLoadModule.NAME,\n            canOverrideExistingModule=false,\n            needsEagerInit=true,\n            hasConstants=true,\n            isCxxModule=false,\n            isTurboModule=isTurboModule\n          )\n          moduleInfos\n        }\n    }\n\n    companion object {\n        init {\n            System.loadLibrary(\"RNNitroSQLite\")\n        }\n    }\n}\n",
      "stars": 376,
      "lastCommitDate": "2024-12-02T15:08:23Z"
    },
    {
      "repository": "microsoft/rnx-kit",
      "file": "incubator/@react-native-webapis/battery-status/android/src/main/java/org/reactnativewebapis/batterystatus/BatteryStatusPackage.kt",
      "url": "https://github.com/microsoft/rnx-kit/blob/363cef72f9173fcccc559ef85a0a42380f92a0ac/incubator/@react-native-webapis/battery-status/android/src/main/java/org/reactnativewebapis/batterystatus/BatteryStatusPackage.kt",
      "fileContent": "package org.reactnativewebapis.batterystatus\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass BatteryStatusPackage : BaseReactPackage() {\n    override fun getModule(name: String?, reactContext: ReactApplicationContext?): NativeModule =\n        when (name) {\n            BatteryStatusModule.NAME -> BatteryStatusModule(reactContext)\n            else -> throw IllegalArgumentException(\"No module named '$name'\")\n        }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        val info = ReactModuleInfo(\n            BatteryStatusModule.NAME,\n            BatteryStatusModule::class.java.name,\n            false,\n            false,\n            false,\n            false\n        )\n        mapOf(BatteryStatusModule.NAME to info).toMutableMap()\n    }\n}\n",
      "stars": 1541,
      "lastCommitDate": "2024-12-18T07:46:11Z"
    },
    {
      "repository": "GuoguoDad/jd_mall",
      "file": "module_rn/src/main/java/com/th3rdwave/safeareacontext/SafeAreaContextPackage.kt",
      "url": "https://github.com/GuoguoDad/jd_mall/blob/9c9b60649c6327cd53fcc7ad96780a2240becc6b/module_rn/src/main/java/com/th3rdwave/safeareacontext/SafeAreaContextPackage.kt",
      "fileContent": "package com.th3rdwave.safeareacontext\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.soloader.SoLoader\n\n// Fool autolinking for older versions that do not support TurboReactPackage.\n// public class SafeAreaContextPackage implements ReactPackage {\nclass SafeAreaContextPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      SafeAreaContextModule.NAME -> SafeAreaContextModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(SafeAreaContextModule::class.java)\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n          ReactModuleInfo(\n              reactModule.name,\n              moduleClass.name,\n              true,\n              reactModule.needsEagerInit,\n              reactModule.hasConstants,\n              reactModule.isCxxModule,\n              TurboModule::class.java.isAssignableFrom(moduleClass))\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      // For Fabric, we load c++ native library here, this triggers screen's Fabric\n      // component registration which is necessary in order to avoid asking users\n      // to manually add init calls in their application code.\n      // This should no longer be needed if RN's autolink mechanism has Fabric support\n      SoLoader.loadLibrary(\"safeareacontext_modules\")\n    }\n    return listOf<ViewManager<*, *>>(SafeAreaProviderManager(), SafeAreaViewManager())\n  }\n}\n",
      "stars": 199,
      "lastCommitDate": "2023-11-10T08:43:06Z"
    },
    {
      "repository": "marcinkornek/react-native-image-to-rgb",
      "file": "android/src/main/java/com/imagetorgb/ImageToRgbPackage.kt",
      "url": "https://github.com/marcinkornek/react-native-image-to-rgb/blob/d4ce57245ded540a16b57bcbc860132e35aaecbf/android/src/main/java/com/imagetorgb/ImageToRgbPackage.kt",
      "fileContent": "package com.imagetorgb\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ImageToRgbPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ImageToRgbModule.NAME) {\n      ImageToRgbModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ImageToRgbModule.NAME] = ReactModuleInfo(\n        ImageToRgbModule.NAME,\n        ImageToRgbModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 9,
      "lastCommitDate": "2024-02-19T15:44:14Z"
    },
    {
      "repository": "Lucky-pear/react-native-thumbhash",
      "file": "android/src/main/java/com/thumbhash/ThumbhashViewPackage.kt",
      "url": "https://github.com/Lucky-pear/react-native-thumbhash/blob/7f5fce762d0e03645345254dc5b80cbb80ebeb5e/android/src/main/java/com/thumbhash/ThumbhashViewPackage.kt",
      "fileContent": "package com.thumbhash\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport java.util.ArrayList\n\nclass ThumbhashViewPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ThumbhashModule.NAME) {\n      ThumbhashModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ThumbhashModule.NAME] = ReactModuleInfo(\n        ThumbhashModule.NAME,\n        ThumbhashModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    val viewManagers: MutableList<ViewManager<*, *>> = ArrayList()\n    viewManagers.add(ThumbhashViewManager())\n    return viewManagers\n  }\n\n  override fun createNativeModules(reactContext: ReactApplicationContext): List<NativeModule> {\n    return emptyList()\n  }\n}\n",
      "stars": 7,
      "lastCommitDate": "2024-10-08T02:47:35Z"
    },
    {
      "repository": "vonovak/react-native-theme-control",
      "file": "android/src/main/java/eu/reactnativetraining/ThemeControlPackage.kt",
      "url": "https://github.com/vonovak/react-native-theme-control/blob/7961c1014ce8263985e590c7639e4f3fea4bd5cb/android/src/main/java/eu/reactnativetraining/ThemeControlPackage.kt",
      "fileContent": "package eu.reactnativetraining\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass ThemeControlPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, ctx: ReactApplicationContext): NativeModule? {\n    return if (ThemeControlModule.NAME == name) {\n      ThemeControlModule(ctx)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider = ReactModuleInfoProvider {\n    val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n    val moduleName = ThemeControlModule.NAME\n    mapOf(\n      moduleName to ReactModuleInfo(\n        moduleName,\n        moduleName,\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        false, // hasConstants\n        false, // isCxxModule\n        isTurboModule // isTurboModule\n      )\n    )\n  }\n}\n",
      "stars": 158,
      "lastCommitDate": "2024-10-29T18:46:30Z"
    },
    {
      "repository": "jsimonassi/GigHelper",
      "file": "android/app/src/main/java/com/gighelpercore/impl/GigHelperCorePackage.kt",
      "url": "https://github.com/jsimonassi/GigHelper/blob/8661005f295dae280b215a708c8ac8d960ca9850/android/app/src/main/java/com/gighelpercore/impl/GigHelperCorePackage.kt",
      "fileContent": "package com.gighelpercore.impl\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass GigHelperCorePackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n        if (name == GigHelperCoreModule.NAME) {\n            GigHelperCoreModule(reactContext)\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            GigHelperCoreModule.NAME to ReactModuleInfo(\n                _name = GigHelperCoreModule.NAME,\n                _className = GigHelperCoreModule.NAME,\n                _canOverrideExistingModule = false,\n                _needsEagerInit = false,\n                isCxxModule = false,\n                isTurboModule = true\n            )\n        )\n    }\n\n}",
      "stars": 1,
      "lastCommitDate": "2024-11-28T15:09:57Z"
    },
    {
      "repository": "ahoseinian/RTNInAppUpdates",
      "file": "android/src/main/java/com/rtnin_app_updates/InAppUpdatesPackage.kt",
      "url": "https://github.com/ahoseinian/RTNInAppUpdates/blob/146d638cf15e460e06600553cf9b32467049d803/android/src/main/java/com/rtnin_app_updates/InAppUpdatesPackage.kt",
      "fileContent": "package com.rtnin_app_updates;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass InAppUpdatesPackage : TurboReactPackage() {\n  override fun getModule(name: String?, reactContext: ReactApplicationContext): NativeModule? =\n  if (name == InAppUpdatesModule.NAME) {\n    InAppUpdatesModule(reactContext)\n  } else {\n    null\n  }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      InAppUpdatesModule.NAME to ReactModuleInfo(\n        InAppUpdatesModule.NAME,\n        InAppUpdatesModule.NAME,\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        true, // hasConstants\n        false, // isCxxModule\n        true // isTurboModule\n      )\n    )\n  }\n}",
      "stars": 0,
      "lastCommitDate": "2024-01-04T10:36:57Z"
    },
    {
      "repository": "software-mansion-labs/new-arch-tricks",
      "file": "android/src/main/java/com/newarchtricks/NewArchTricksPackage.kt",
      "url": "https://github.com/software-mansion-labs/new-arch-tricks/blob/ebb5ac3714e9db2f6dfb0aaa623f2efb953663ed/android/src/main/java/com/newarchtricks/NewArchTricksPackage.kt",
      "fileContent": "package com.newarchtricks\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\n\nclass NewArchTricksPackage : TurboReactPackage() {\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf(NewArchTricksViewManager())\n  }\n\n   override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n     if (name == NewArchTricksModule.NAME) {\n       NewArchTricksModule(reactContext)\n     } else {\n       null\n     }\n\n   override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n     mapOf(\n       NewArchTricksModule.NAME to ReactModuleInfo(\n         NewArchTricksModule.NAME,\n         NewArchTricksModule.NAME,\n         false, // canOverrideExistingModule\n         false, // needsEagerInit\n         false, // isCxxModule\n         true // isTurboModule\n       )\n     )\n   }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-09-26T07:04:03Z"
    },
    {
      "repository": "mojjominion/react-native-broadcast-receiver",
      "file": "android/src/main/java/com/broadcastreceiver/BroadcastReceiverPackage.kt",
      "url": "https://github.com/mojjominion/react-native-broadcast-receiver/blob/4819e4f5431034479ae23a1722f1c322ca2b40ea/android/src/main/java/com/broadcastreceiver/BroadcastReceiverPackage.kt",
      "fileContent": "package com.broadcastreceiver\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\n\nclass BroadcastReceiverPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == Constants.ModuleName) {\n      BroadcastReceiverModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> =\n        HashMap()\n      moduleInfos[Constants.ModuleName] = ReactModuleInfo(\n        Constants.ModuleName,\n        Constants.ModuleName,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 9,
      "lastCommitDate": "2024-10-25T14:50:09Z"
    },
    {
      "repository": "maaxg/rn-native-camera",
      "file": "android/app/src/main/java/com/nativewebview/ReactWebViewPackage.kt",
      "url": "https://github.com/maaxg/rn-native-camera/blob/5107e03bf1d4daf70a138c62c0a55c45b9260e47/android/app/src/main/java/com/nativewebview/ReactWebViewPackage.kt",
      "fileContent": "package com.nativewebview\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\nclass ReactWebViewPackage : TurboReactPackage() {\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        return listOf(ReactWebViewManager(reactContext))\n    }\n\n    override fun getModule(s: String, reactApplicationContext: ReactApplicationContext): NativeModule? {\n        when (s) {\n            ReactWebViewManager.REACT_CLASS -> ReactWebViewManager(reactApplicationContext)\n        }\n        return null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider = ReactModuleInfoProvider {\n        mapOf(ReactWebViewManager.REACT_CLASS to ReactModuleInfo(\n            _name = ReactWebViewManager.REACT_CLASS,\n            _className = ReactWebViewManager.REACT_CLASS,\n            _canOverrideExistingModule = false,\n            _needsEagerInit = false,\n            isCxxModule = false,\n            isTurboModule = true,\n        )\n        )\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-12-08T20:25:09Z"
    },
    {
      "repository": "swan-io/react-native-browser",
      "file": "android/src/main/java/io/swan/rnbrowser/RNSwanBrowserPackage.kt",
      "url": "https://github.com/swan-io/react-native-browser/blob/67f2905295a3efa310398a7acc832f33eb1ee1a0/android/src/main/java/io/swan/rnbrowser/RNSwanBrowserPackage.kt",
      "fileContent": "package io.swan.rnbrowser\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNSwanBrowserPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      RNSwanBrowserModuleImpl.NAME -> RNSwanBrowserModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      val moduleInfo = ReactModuleInfo(\n        RNSwanBrowserModuleImpl.NAME,\n        RNSwanBrowserModuleImpl.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n\n      moduleInfos[RNSwanBrowserModuleImpl.NAME] = moduleInfo\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 142,
      "lastCommitDate": "2024-11-04T13:29:31Z"
    },
    {
      "repository": "cr0nil/NFC-Reader---RN",
      "file": "RTNNfc/android/src/main/java/com/nfc/NfcPackage.kt",
      "url": "https://github.com/cr0nil/NFC-Reader---RN/blob/9e475ce1de0e4567427c34a74e4984cbf79b0f56/RTNNfc/android/src/main/java/com/nfc/NfcPackage.kt",
      "fileContent": "package com.nfc;\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NfcPackage : TurboReactPackage() {\n\n  override fun getModule(\n        s: String,\n        reactApplicationContext: ReactApplicationContext\n    ): NativeModule? {\n        when (s) {\n            NfcModule.NAME -> return NfcModule(reactApplicationContext)\n        }\n        return null\n    }\n\n\n override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n   mapOf(\n     NfcModule.NAME to ReactModuleInfo(\n       NfcModule.NAME,\n       NfcModule.NAME,\n       false, // canOverrideExistingModule\n       false, // needsEagerInit\n       true, // hasConstants\n       false, // isCxxModule\n       true // isTurboModule\n     )\n   )\n }\n}",
      "stars": 0,
      "lastCommitDate": "2024-01-22T14:58:44Z"
    },
    {
      "repository": "Ugur-Atakan/stepcounting",
      "file": "android/app/src/main/java/com/stepcounting/StepCounterPackage.kt",
      "url": "https://github.com/Ugur-Atakan/stepcounting/blob/31eadbd38bf8b2fce14d0c6742575a568e0be0c0/android/app/src/main/java/com/stepcounting/StepCounterPackage.kt",
      "fileContent": "package com.stepcounting\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\n/**\n * This class is responsible for the creation of the ReactNative package.\n * @see com.facebook.react.ReactPackage\n * @see TurboReactPackage\n * @see ReactApplicationContext\n * @see ReactModuleInfo\n * @see ReactModuleInfoProvider\n */\nclass StepCounterPackage : TurboReactPackage() {\n    /**\n     * This method is responsible for the creation of the ReactNative module.\n     * @param name The name of the module\n     * @param reactContext The context of the react-native application\n     * @return [com.facebook.react.module.model.ReactModuleInfo] ]The ReactNative module\n     * @see NativeModule\n     * @see ReactApplicationContext\n     * @see StepCounterModule\n     * @see StepCounterModule.NAME\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == StepCounterModule.NAME) StepCounterModule(reactContext) else null\n    }\n\n    /**\n     * This method is responsible for the creation of the ReactNative module info provider.\n     * @return The ReactNative module info provider\n     * @see ReactModuleInfoProvider\n     * @see ReactModuleInfo\n     * @see BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n     * @see ReactModuleInfo.mCanOverrideExistingModule\n     * @see ReactModuleInfo.mNeedsEagerInit\n     * @see ReactModuleInfo.mHasConstants\n     * @see ReactModuleInfo.mIsCxxModule\n     * @see ReactModuleInfo.mIsTurboModule\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfo: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfo[StepCounterModule.NAME] = ReactModuleInfo(\n                    StepCounterModule.NAME,\n                    StepCounterModule.NAME,\n                    false, // canOverrideExistingModule\n                    false, // needsEagerInit\n                    true, // hasConstants\n                    false, // isCxxModule\n                    isTurboModule // isTurboModule\n            )\n            moduleInfo\n        }\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-04-18T20:31:27Z"
    },
    {
      "repository": "theshivamlko/react_native_practice",
      "file": "rn_native_zebra_sdk/android/app/src/main/java/com/citridot/zebrasdk/NativeLocalStoragePackage.kt",
      "url": "https://github.com/theshivamlko/react_native_practice/blob/2faab55cc7d1801b69201507d363c94caa373148/rn_native_zebra_sdk/android/app/src/main/java/com/citridot/zebrasdk/NativeLocalStoragePackage.kt",
      "fileContent": "package com.citridot.zebrasdk\n\nimport android.util.Log\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeLocalStoragePackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        Log.v(\"NativeLocalStoragePackage\", \"getModule: $name ${NativeLocalStorageModule.NAME}\")\n        return if (name == NativeLocalStorageModule.NAME) {\n            NativeLocalStorageModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        Log.v(\"NativeLocalStoragePackage\", \"getReactModuleInfoProvider\")\n        return ReactModuleInfoProvider {\n            mapOf(\n                NativeLocalStorageModule.NAME to ReactModuleInfo(\n                    _name = NativeLocalStorageModule.NAME,\n                    _className = NativeLocalStorageModule.NAME,\n                    _canOverrideExistingModule = false,\n                    _needsEagerInit = false,\n                    isCxxModule = false,\n                    isTurboModule = true\n                )\n            )\n        }\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-12-18T18:05:02Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/core/android/src/main/java/net/mjstudio/rnkakao/core/RNCKakaoCorePackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/core/android/src/main/java/net/mjstudio/rnkakao/core/RNCKakaoCorePackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.core\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNCKakaoCorePackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoCoreModule.NAME) {\n      RNCKakaoCoreModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoCoreModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoCoreModule.NAME,\n          RNCKakaoCoreModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "BraveEvidence/TMTry",
      "file": "android/app/src/main/java/com/rnlocalnot/CalculatorPackage.kt",
      "url": "https://github.com/BraveEvidence/TMTry/blob/3c8d4edc1c495b007dc415311d06faac9e89a223/android/app/src/main/java/com/rnlocalnot/CalculatorPackage.kt",
      "fileContent": "package com.rnlocalnot\n\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass CalculatorPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == CalculatorModule.NAME) {\n            CalculatorModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider? {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            moduleInfos[CalculatorModule.NAME] = ReactModuleInfo(\n                CalculatorModule.NAME,\n                CalculatorModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                true // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2023-03-21T02:57:18Z"
    },
    {
      "repository": "0xCarbon/libtss",
      "file": "client-examples/rn-client/rn-tss-module/android/src/main/java/com/zerox/rtntss/TssPackage.kt",
      "url": "https://github.com/0xCarbon/libtss/blob/6f2813d22dc700d68c99118f6efe1556fd3bd395/client-examples/rn-client/rn-tss-module/android/src/main/java/com/zerox/rtntss/TssPackage.kt",
      "fileContent": "package com.zerox.rtntss;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass TssPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == TssModule.NAME) {\n      TssModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      TssModule.NAME to ReactModuleInfo(\n        TssModule.NAME,\n        TssModule.NAME,\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        true, // hasConstants\n        false, // isCxxModule\n        true // isTurboModule\n      )\n    )\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-08-09T14:32:21Z"
    },
    {
      "repository": "MathildeTrendy/diy",
      "file": "android/src/kotlinPackage/java/com/reactnativecommunity/asyncstorage/AsyncStoragePackage.kt",
      "url": "https://github.com/MathildeTrendy/diy/blob/b5ff13ad415a8a2cff742dbd0d67e8a7122c06eb/android/src/kotlinPackage/java/com/reactnativecommunity/asyncstorage/AsyncStoragePackage.kt",
      "fileContent": "package com.reactnativecommunity.asyncstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.reactnativecommunity.asyncstorage.next.StorageModule\n\n@ReactModuleList(\n    nativeModules = [\n        StorageModule::class\n    ]\n)\nclass AsyncStoragePackage : TurboReactPackage() {\n    override fun getModule(name: String, context: ReactApplicationContext): NativeModule? = when (name) {\n        StorageModule.NAME -> StorageModule(context)\n        else -> null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        try {\n            val reactModuleInfoProviderClass =\n                Class.forName(\"com.reactnativecommunity.asyncstorage.AsyncStoragePackage$\\$ReactModuleInfoProvider\")\n            return reactModuleInfoProviderClass.newInstance() as ReactModuleInfoProvider\n        } catch (e: ClassNotFoundException) {\n            return ReactModuleInfoProvider {\n                val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                val reactModule: ReactModule = StorageModule::class.java.getAnnotation(\n                    ReactModule::class.java)!!\n\n                mapOf(\n                    StorageModule.NAME to ReactModuleInfo(\n                        reactModule.name,\n                        StorageModule::class.java.name,\n                        reactModule.canOverrideExistingModule,\n                        reactModule.needsEagerInit,\n                        reactModule.hasConstants,\n                        reactModule.isCxxModule,\n                        isTurboModule\n                    )\n                )\n            }\n        } catch (e: InstantiationException) {\n            throw RuntimeException(\"No ReactModuleInfoProvider for AsyncStoragePackage$\\$ReactModuleInfoProvider\", e)\n        } catch (e: IllegalAccessException) {\n            throw RuntimeException(\"No ReactModuleInfoProvider for AsyncStoragePackage$\\$ReactModuleInfoProvider\", e)\n        }\n    }\n\n    override fun getViewManagers(reactContext: ReactApplicationContext?): MutableList<ModuleSpec>? = null\n}",
      "stars": 1,
      "lastCommitDate": "2024-12-17T18:59:33Z"
    },
    {
      "repository": "callstack-internal/antonio-benitez-onboarding",
      "file": "device-location-package/android/src/main/java/com/devicelocationpackage/DeviceLocationTurboPackage.kt",
      "url": "https://github.com/callstack-internal/antonio-benitez-onboarding/blob/bfb890771d1703ae882a05c9ef4cdab3ca60eb7e/device-location-package/android/src/main/java/com/devicelocationpackage/DeviceLocationTurboPackage.kt",
      "fileContent": "package com.devicelocationpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass DeviceLocationTurboPackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            DeviceLocationModule.NAME -> DeviceLocationModule(reactContext)\n            else -> null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            DeviceLocationModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-12-11T17:19:24Z"
    },
    {
      "repository": "JKobrynski/BridgingTutorial",
      "file": "range-slider-package/android/src/main/java/com/rangesliderpackage/RangeSliderTurboPackage.kt",
      "url": "https://github.com/JKobrynski/BridgingTutorial/blob/94fd8c7d3d5496687a8f0572bf179303954c35dd/range-slider-package/android/src/main/java/com/rangesliderpackage/RangeSliderTurboPackage.kt",
      "fileContent": "package com.rangesliderpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass RangeSliderTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return null\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf(RangeSliderViewManager())\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-02-19T13:09:52Z"
    },
    {
      "repository": "swarm-cloud/react-native-swarmcloud",
      "file": "android/src/main/java/com/swarmcloud/SwarmcloudPackage.kt",
      "url": "https://github.com/swarm-cloud/react-native-swarmcloud/blob/bd6fe69c24d444e6d20b9c47971d1eedb15c09fb/android/src/main/java/com/swarmcloud/SwarmcloudPackage.kt",
      "fileContent": "package com.swarmcloud\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass SwarmcloudPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == SwarmcloudModule.NAME) {\n      SwarmcloudModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[SwarmcloudModule.NAME] = ReactModuleInfo(\n        SwarmcloudModule.NAME,\n        SwarmcloudModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-12-02T13:43:18Z"
    },
    {
      "repository": "mohitkumar7925/react-native-crypto-storage",
      "file": "android/src/main/java/com/cryptostorage/ReactNativeCryptoStoragePackage.kt",
      "url": "https://github.com/mohitkumar7925/react-native-crypto-storage/blob/5cbddee07c2cff67ee976c4d7766b5c7e7759980/android/src/main/java/com/cryptostorage/ReactNativeCryptoStoragePackage.kt",
      "fileContent": "package com.cryptostorage\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass ReactNativeCryptoStoragePackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeCryptoStorageModule.NAME) {\n      ReactNativeCryptoStorageModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[ReactNativeCryptoStorageModule.NAME] = ReactModuleInfo(\n        ReactNativeCryptoStorageModule.NAME,\n        ReactNativeCryptoStorageModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-16T16:45:46Z"
    },
    {
      "repository": "mensonones/PocBgTask",
      "file": "RTNModuleTask/android/src/main/java/com/rtnmoduletask/ModuleTaskPackage.kt",
      "url": "https://github.com/mensonones/PocBgTask/blob/ac093b0374d66ca08c0693d75ba55057d31205b7/RTNModuleTask/android/src/main/java/com/rtnmoduletask/ModuleTaskPackage.kt",
      "fileContent": "package com.rtnmoduletask;\n\nimport com.facebook.react.TurboReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.module.model.ReactModuleInfo;\nimport com.facebook.react.module.model.ReactModuleInfoProvider;\nimport java.util.HashMap;\n\nclass ModuleTaskPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ModuleTask.NAME) {\n        ModuleTask(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[ModuleTask.NAME] = ReactModuleInfo(\n        ModuleTask.NAME,\n        ModuleTask.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}",
      "stars": 0,
      "lastCommitDate": "2024-05-22T02:07:10Z"
    },
    {
      "repository": "castledio/castled-react-native-sdk",
      "file": "android/src/main/java/io/castled/reactnative/CastledReactNativeSdkPackage.kt",
      "url": "https://github.com/castledio/castled-react-native-sdk/blob/5306ae8d3b1d1e93f06ddc7e2a9a1ea67ccda04b/android/src/main/java/io/castled/reactnative/CastledReactNativeSdkPackage.kt",
      "fileContent": "package io.castled.reactnative\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass CastledReactNativeSdkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == CastledReactNativeSdkModule.NAME) {\n      CastledReactNativeSdkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[CastledReactNativeSdkModule.NAME] = ReactModuleInfo(\n        CastledReactNativeSdkModule.NAME,\n        CastledReactNativeSdkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 3,
      "lastCommitDate": "2024-10-01T05:21:33Z"
    },
    {
      "repository": "DouglasFroes/react-native-ideploy-tef",
      "file": "android/src/main/java/com/ideploytef/IdeployTefPackage.kt",
      "url": "https://github.com/DouglasFroes/react-native-ideploy-tef/blob/ddd4de9acbf351f864ce5da902acac0683babe39/android/src/main/java/com/ideploytef/IdeployTefPackage.kt",
      "fileContent": "package com.ideploytef\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass IdeployTefPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == IdeployTefModule.NAME) {\n      IdeployTefModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[IdeployTefModule.NAME] = ReactModuleInfo(\n        IdeployTefModule.NAME,\n        IdeployTefModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-02-17T00:33:18Z"
    },
    {
      "repository": "castledio/castled-react-native-sdk",
      "file": "android/src/main/java/io/castled/reactnative/CastledReactNativePackage.kt",
      "url": "https://github.com/castledio/castled-react-native-sdk/blob/5306ae8d3b1d1e93f06ddc7e2a9a1ea67ccda04b/android/src/main/java/io/castled/reactnative/CastledReactNativePackage.kt",
      "fileContent": "package io.castled.reactnative\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass CastledReactNativePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == CastledReactNativeModule.NAME) {\n      CastledReactNativeModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[CastledReactNativeModule.NAME] = ReactModuleInfo(\n        CastledReactNativeModule.NAME,\n        CastledReactNativeModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}",
      "stars": 3,
      "lastCommitDate": "2024-10-01T05:21:33Z"
    },
    {
      "repository": "mateusz1913/rnbridgingtutorial",
      "file": "save-file-picker-package/android/src/main/java/com/savefilepickerpackage/SaveFilePickerTurboPackage.kt",
      "url": "https://github.com/mateusz1913/rnbridgingtutorial/blob/5ffbcb451066cd43807337a3c1a42c26402a814f/save-file-picker-package/android/src/main/java/com/savefilepickerpackage/SaveFilePickerTurboPackage.kt",
      "fileContent": "package com.savefilepickerpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass SaveFilePickerTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        if (name == SaveFilePickerModule.NAME) {\n            return SaveFilePickerModule(reactContext)\n        }\n        return null\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            SaveFilePickerModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}\n",
      "stars": 70,
      "lastCommitDate": "2024-06-02T08:49:10Z"
    },
    {
      "repository": "solana-mobile/mobile-wallet-adapter",
      "file": "js/packages/mobile-wallet-adapter-protocol/android/src/main/java/com/solanamobile/mobilewalletadapter/reactnative/SolanaMobileWalletAdapterPackage.kt",
      "url": "https://github.com/solana-mobile/mobile-wallet-adapter/blob/d699199349ae4dc1fa18dc338314c44c9b453d51/js/packages/mobile-wallet-adapter-protocol/android/src/main/java/com/solanamobile/mobilewalletadapter/reactnative/SolanaMobileWalletAdapterPackage.kt",
      "fileContent": "package com.solanamobile.mobilewalletadapter.reactnative\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass SolanaMobileWalletAdapterModulePackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == SolanaMobileWalletAdapterModule.NAME) {\n            SolanaMobileWalletAdapterModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            moduleInfos[SolanaMobileWalletAdapterModule.NAME] =\n                    ReactModuleInfo(\n                            SolanaMobileWalletAdapterModule.NAME,\n                            SolanaMobileWalletAdapterModule.NAME,\n                            false, // canOverrideExistingModule\n                            false, // needsEagerInit\n                            true, // hasConstants\n                            false, // isCxxModule\n                            true // isTurboModule\n                    )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 251,
      "lastCommitDate": "2024-12-19T01:30:13Z"
    },
    {
      "repository": "amazingCoding/react-native-hans-tools",
      "file": "android/src/main/java/com/hanstools/HansToolsPackage.kt",
      "url": "https://github.com/amazingCoding/react-native-hans-tools/blob/7c8101683418445730496cfd4d4c24f7a8098686/android/src/main/java/com/hanstools/HansToolsPackage.kt",
      "fileContent": "package com.hanstools\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass HansToolsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == HansToolsModule.NAME) {\n      HansToolsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[HansToolsModule.NAME] = ReactModuleInfo(\n        HansToolsModule.NAME,\n        HansToolsModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-10-18T18:15:10Z"
    },
    {
      "repository": "BILDIT-Platform/react-native-bildit-flybuy",
      "file": "mono/packages/core/android/src/main/java/com/bilditplatform/rnflybuycore/RnFlybuyCorePackage.kt",
      "url": "https://github.com/BILDIT-Platform/react-native-bildit-flybuy/blob/b31e9b1be1b57fd04507ccf3c047f12a0a13e1e5/mono/packages/core/android/src/main/java/com/bilditplatform/rnflybuycore/RnFlybuyCorePackage.kt",
      "fileContent": "package com.bilditplatform.rnflybuycore\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnFlybuyCorePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnFlybuyCoreModule.NAME) {\n      RnFlybuyCoreModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnFlybuyCoreModule.NAME] = ReactModuleInfo(\n        RnFlybuyCoreModule.NAME,\n        RnFlybuyCoreModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 9,
      "lastCommitDate": "2024-11-21T12:11:09Z"
    },
    {
      "repository": "samitha9125/react-native-timezone",
      "file": "android/src/main/java/com/samitha/timezone/TimezonePackage.kt",
      "url": "https://github.com/samitha9125/react-native-timezone/blob/67aebe064b0ad255165ecb44d28687c6334daaf0/android/src/main/java/com/samitha/timezone/TimezonePackage.kt",
      "fileContent": "package com.samitha.timezone\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass TimezonePackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TimezoneModule.NAME) {\n      TimezoneModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[TimezoneModule.NAME] = ReactModuleInfo(\n        TimezoneModule.NAME,\n        TimezoneModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 40,
      "lastCommitDate": "2024-12-15T12:22:28Z"
    },
    {
      "repository": "72days/TestNewFabricModule",
      "file": "android/src/main/java/com/x/RTNMute4Package.kt",
      "url": "https://github.com/72days/TestNewFabricModule/blob/d853a1eb21d73059b627f16a9bd805c8d88dccfa/android/src/main/java/com/x/RTNMute4Package.kt",
      "fileContent": "package com.x\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass RTNMute4Package : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RTNMute4Module.NAME) {\n      RTNMute4Module(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[RTNMute4Module.NAME] = ReactModuleInfo(\n        RTNMute4Module.NAME,\n        RTNMute4Module.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-11T10:31:06Z"
    },
    {
      "repository": "birdofpreyru/react-native-audio",
      "file": "android/src/main/java/com/drpogodin/reactnativeaudio/ReactNativeAudioPackage.kt",
      "url": "https://github.com/birdofpreyru/react-native-audio/blob/3e4cf205ede709a08ab9d54a932d3e29bd67a72b/android/src/main/java/com/drpogodin/reactnativeaudio/ReactNativeAudioPackage.kt",
      "fileContent": "package com.drpogodin.reactnativeaudio\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ReactNativeAudioPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeAudioModule.NAME) {\n      ReactNativeAudioModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ReactNativeAudioModule.NAME] = ReactModuleInfo(\n        ReactNativeAudioModule.NAME,\n        ReactNativeAudioModule.NAME,\n        canOverrideExistingModule = false,  // canOverrideExistingModule\n        needsEagerInit = false,  // needsEagerInit\n        hasConstants = true,  // hasConstants\n        isCxxModule = false,  // isCxxModule\n        isTurboModule = isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 35,
      "lastCommitDate": "2024-10-30T23:05:10Z"
    },
    {
      "repository": "kvbalib/react-native-lecom-scan",
      "file": "android/src/main/java/com/lecomscan/LecomScanPackage.kt",
      "url": "https://github.com/kvbalib/react-native-lecom-scan/blob/7e929a1ca96239b13d1c9d9e497c60cdef64a73b/android/src/main/java/com/lecomscan/LecomScanPackage.kt",
      "fileContent": "package com.lecomscan\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass LecomScanPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == LecomScanModule.NAME) {\n      LecomScanModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[LecomScanModule.NAME] = ReactModuleInfo(\n        LecomScanModule.NAME,\n        LecomScanModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-09-27T08:13:14Z"
    },
    {
      "repository": "Wiiktor22/react-native-turbo-battery",
      "file": "android/src/main/java/com/turbobattery/TurboBatteryPackage.kt",
      "url": "https://github.com/Wiiktor22/react-native-turbo-battery/blob/0266c4ba7f09c273ddc794c72475a61691e47151/android/src/main/java/com/turbobattery/TurboBatteryPackage.kt",
      "fileContent": "package com.turbobattery\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass TurboBatteryPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TurboBatteryModule.NAME) {\n      TurboBatteryModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[TurboBatteryModule.NAME] = ReactModuleInfo(\n        TurboBatteryModule.NAME,\n        TurboBatteryModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-08-20T15:00:43Z"
    },
    {
      "repository": "DouglasFroes/react-native-usb-printer",
      "file": "android/src/main/java/com/usbprinter/UsbPrinterPackage.kt",
      "url": "https://github.com/DouglasFroes/react-native-usb-printer/blob/0c8655039ad5cb3559674943a38878c1b24ed271/android/src/main/java/com/usbprinter/UsbPrinterPackage.kt",
      "fileContent": "package com.usbprinter\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass UsbPrinterPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == UsbPrinterModule.NAME) {\n      UsbPrinterModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[UsbPrinterModule.NAME] = ReactModuleInfo(\n        UsbPrinterModule.NAME,\n        UsbPrinterModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-08-12T19:40:31Z"
    },
    {
      "repository": "ScottPrzy/react-native",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterReactHostDelegate.kt",
      "url": "https://github.com/ScottPrzy/react-native/blob/041f459d8c674f6817e0ac1851be49c435d53089/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterReactHostDelegate.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.content.Context\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.JSEngineResolutionAlgorithm\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.ReactPackageTurboModuleManagerDelegate\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.JSBundleLoader\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.annotations.UnstableReactNativeAPI\nimport com.facebook.react.config.ReactFeatureFlags\nimport com.facebook.react.defaults.DefaultTurboModuleManagerDelegate\nimport com.facebook.react.fabric.ReactNativeConfig\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.runtime.BindingsInstaller\nimport com.facebook.react.runtime.JSCInstance\nimport com.facebook.react.runtime.JSEngineInstance\nimport com.facebook.react.runtime.ReactHostDelegate\nimport com.facebook.react.runtime.ReactHostImpl\nimport com.facebook.react.runtime.hermes.HermesInstance\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.turbomodule.core.TurboModuleManager\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ViewManager\n\n@UnstableReactNativeAPI\nclass RNTesterReactHostDelegate internal constructor(context: Context) : ReactHostDelegate {\n  var reactHost: ReactHostImpl? = null\n\n  override val jsMainModulePath: String = \"js/RNTesterApp.android\"\n\n  override val jsBundleLoader: JSBundleLoader =\n      JSBundleLoader.createAssetLoader(context, \"assets://RNTesterApp.android.bundle\", true)\n\n  @get:Synchronized override val bindingsInstaller: BindingsInstaller? = null\n\n  override val turboModuleManagerDelegateBuilder: ReactPackageTurboModuleManagerDelegate.Builder =\n      DefaultTurboModuleManagerDelegate.Builder()\n\n  override val jsEngineInstance: JSEngineInstance =\n      if (reactHost?.jsEngineResolutionAlgorithm == JSEngineResolutionAlgorithm.JSC) {\n        JSCInstance()\n      } else {\n        HermesInstance()\n      }\n\n  override fun handleInstanceException(error: Exception) {}\n\n  override fun getReactNativeConfig(turboModuleManager: TurboModuleManager): ReactNativeConfig =\n      ReactNativeConfig.DEFAULT_CONFIG\n\n  override val reactPackages: List<ReactPackage> by lazy {\n    listOf(\n        MainReactPackage(),\n        object : TurboReactPackage() {\n          override fun getModule(\n              name: String,\n              reactContext: ReactApplicationContext\n          ): NativeModule? =\n              when {\n                !ReactFeatureFlags.useTurboModules -> null\n                name == SampleTurboModule.NAME -> SampleTurboModule(reactContext)\n                name == SampleLegacyModule.NAME -> SampleLegacyModule(reactContext)\n                else -> null\n              }\n\n          // Note: Specialized annotation processor for @ReactModule isn't\n          // configured in OSS\n          // yet. For now, hardcode this information, though it's not necessary\n          // for most modules\n          override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n              ReactModuleInfoProvider {\n                if (ReactFeatureFlags.useTurboModules) {\n                  mapOf(\n                      SampleTurboModule.NAME to\n                          ReactModuleInfo(\n                              SampleTurboModule.NAME,\n                              \"SampleTurboModule\",\n                              false, // canOverrideExistingModule\n                              false, // needsEagerInit\n                              true, // hasConstants\n                              false, // isCxxModule\n                              true // isTurboModule\n                              ),\n                      SampleLegacyModule.NAME to\n                          ReactModuleInfo(\n                              SampleLegacyModule.NAME,\n                              \"SampleLegacyModule\",\n                              false, // canOverrideExistingModule\n                              false, // needsEagerInit\n                              true, // hasConstants\n                              false, // isCxxModule\n                              false // isTurboModule\n                              ),\n                  )\n                } else {\n                  emptyMap()\n                }\n              }\n        },\n        object : ReactPackage {\n          override fun createNativeModules(\n              reactContext: ReactApplicationContext\n          ): List<NativeModule> = emptyList()\n\n          override fun createViewManagers(\n              reactContext: ReactApplicationContext\n          ): List<ViewManager<*, *>> =\n              listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n        })\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-09-02T23:23:34Z"
    },
    {
      "repository": "DriveQuantPublic/react-native-drivekit",
      "file": "packages/trip-simulator/android/src/main/java/com/reactnativedrivekit/tripsimulator/TripSimulatorPackage.kt",
      "url": "https://github.com/DriveQuantPublic/react-native-drivekit/blob/ee404f7befe29f2f7b704bfcebe07b4486f435de/packages/trip-simulator/android/src/main/java/com/reactnativedrivekit/tripsimulator/TripSimulatorPackage.kt",
      "fileContent": "package com.reactnativedrivekit.tripsimulator\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass TripSimulatorPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name === DriveKitTripSimulatorModule.NAME) {\n      DriveKitTripSimulatorModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[DriveKitTripSimulatorModule.NAME] = ReactModuleInfo(\n        DriveKitTripSimulatorModule.NAME,\n        DriveKitTripSimulatorModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 3,
      "lastCommitDate": "2024-12-16T11:15:02Z"
    },
    {
      "repository": "lesleysin/RN-TurboModuleScaffold",
      "file": "src/templates/kotlin-module/src/main/java/com/TempName/TempNamePackage.kt",
      "url": "https://github.com/lesleysin/RN-TurboModuleScaffold/blob/b1193ec22d4ba739b84a9d3d3f4fc04b72045923/src/templates/kotlin-module/src/main/java/com/TempName/TempNamePackage.kt",
      "fileContent": "package com.TempName\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.react.module.model.ReactModuleInfoProvider;\nimport com.facebook.react.module.model.ReactModuleInfo;\n\nimport com.TempName.TempNameModule\n\nclass TempNamePackage : TurboReactPackage() {\n\n    override fun getModule(name: String, ctx: ReactApplicationContext): NativeModule? {\n        if (name.equals(TempNameModule.NAME)) {\n            return TempNameModule(ctx);\n        } else {\n            return null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n\n        class Provider: ReactModuleInfoProvider {\n\n            override fun getReactModuleInfos(): Map<String, ReactModuleInfo> {\n                val moduleInfos = mutableMapOf<String, ReactModuleInfo>();\n                moduleInfos.put(\n                    TempNameModule.NAME,\n                    ReactModuleInfo(\n                        TempNameModule.NAME,\n                        TempNameModule.NAME,\n                        false, // canOverrideExistingModule\n                        false, // needsEagerInit\n                        true, // hasConstants\n                        false, // isCxxModule\n                        true // isTurboModule\n                    ));\n                return moduleInfos;\n            }\n\n        }\n\n        return Provider();\n    }\n}",
      "stars": 6,
      "lastCommitDate": "2023-04-28T08:36:00Z"
    },
    {
      "repository": "adrian-koczen/react-native-images-picker",
      "file": "android/src/main/java/com/reactnativeimagespicker/ReactNativeImagesPickerPackage.kt",
      "url": "https://github.com/adrian-koczen/react-native-images-picker/blob/a21fb066272db9cafc0098e0cfe8c30213a1628d/android/src/main/java/com/reactnativeimagespicker/ReactNativeImagesPickerPackage.kt",
      "fileContent": "package com.reactnativeimagespicker;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass ReactNativeImagesPickerPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n        if (name == ReactNativeImagesPickerModule.NAME) {\n            ReactNativeImagesPickerModule(reactContext)\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            ReactNativeImagesPickerModule.NAME to ReactModuleInfo(\n            ReactNativeImagesPickerModule.NAME,\n            ReactNativeImagesPickerModule.NAME,\n            false,\n            false,\n            true,\n            false,\n            true\n          )\n        )\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-04-23T10:13:47Z"
    },
    {
      "repository": "JKobrynski/BridgingTutorial",
      "file": "screen-orientation-package/android/src/main/java/com/screenorientationpackage/ScreenOrientationTurboPackage.kt",
      "url": "https://github.com/JKobrynski/BridgingTutorial/blob/94fd8c7d3d5496687a8f0572bf179303954c35dd/screen-orientation-package/android/src/main/java/com/screenorientationpackage/ScreenOrientationTurboPackage.kt",
      "fileContent": "package com.screenorientationpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass ScreenOrientationTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            ScreenOrientationModule.NAME -> ScreenOrientationModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n                ScreenOrientationModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-02-19T13:09:52Z"
    },
    {
      "repository": "matinzd/react-native-block-store",
      "file": "android/src/main/java/com/blockstore/BlockStorePackage.kt",
      "url": "https://github.com/matinzd/react-native-block-store/blob/f0a88f6d626144e03e9a5b45d76bc8f69fb8cf66/android/src/main/java/com/blockstore/BlockStorePackage.kt",
      "fileContent": "package com.blockstore\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass BlockStorePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == BlockStoreModule.NAME) {\n      BlockStoreModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[BlockStoreModule.NAME] = ReactModuleInfo(\n        BlockStoreModule.NAME,\n        BlockStoreModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2023-03-03T11:35:39Z"
    },
    {
      "repository": "l2hyunwoo/react-native-bob-error-repro",
      "file": "android/src/main/java/com/boberrorrepro/BobErrorReproPackage.kt",
      "url": "https://github.com/l2hyunwoo/react-native-bob-error-repro/blob/42f6b44f65c050f786096b479a7a9567a5fa42b4/android/src/main/java/com/boberrorrepro/BobErrorReproPackage.kt",
      "fileContent": "package com.boberrorrepro\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass BobErrorReproPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == BobErrorReproModule.NAME) {\n      BobErrorReproModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[BobErrorReproModule.NAME] = ReactModuleInfo(\n        BobErrorReproModule.NAME,\n        BobErrorReproModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-10-31T15:53:40Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-maps",
      "file": "packages/core/android/src/main/java/com/openmobilehub/android/rn/maps/core/RNOmhMapsCorePackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-maps/blob/c2b6ec914b917d2dfdc5f58cb93dbefa49c5bb53/packages/core/android/src/main/java/com/openmobilehub/android/rn/maps/core/RNOmhMapsCorePackage.kt",
      "fileContent": "package com.openmobilehub.android.rn.maps.core\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass RNOmhMapsCoreTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            RNOmhMapsCoreModule.NAME -> RNOmhMapsCoreModule(reactContext)\n            RNOmhMapsLocationModule.NAME -> RNOmhMapsLocationModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            RNOmhMapsCoreModule::class.java,\n            RNOmhMapsLocationModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf(\n            RNOmhMapsCoreViewManager(),\n            RNOmhMapsMarkerViewManager(),\n            RNOmhMapsPolylineViewManager(),\n            RNOmhMapsPolygonViewManager()\n        )\n    }\n}\n",
      "stars": 25,
      "lastCommitDate": "2024-10-25T10:35:38Z"
    },
    {
      "repository": "Ahmedhamed77/react-native-awesome-library",
      "file": "android/src/main/java/com/awesomelibrary/AwesomeLibraryPackage.kt",
      "url": "https://github.com/Ahmedhamed77/react-native-awesome-library/blob/08949a126077a4658950b38b3b2abb5fbe2c94b0/android/src/main/java/com/awesomelibrary/AwesomeLibraryPackage.kt",
      "fileContent": "package com.awesomelibrary\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass AwesomeLibraryPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AwesomeLibraryModule.NAME) {\n      AwesomeLibraryModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[AwesomeLibraryModule.NAME] = ReactModuleInfo(\n        AwesomeLibraryModule.NAME,\n        AwesomeLibraryModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-26T12:29:35Z"
    },
    {
      "repository": "nuagoz/react-native",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "url": "https://github.com/nuagoz/react-native/blob/9a884d2d3f8c42f66f58486c0c6d2e7248194ab4/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.app.Application\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.ReactApplication\nimport com.facebook.react.ReactHost\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.assets.ReactFontManager\nimport com.facebook.react.config.ReactFeatureFlags\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.unstable_loadFusebox\nimport com.facebook.react.defaults.DefaultReactHost\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.osslibraryexample.OSSLibraryExamplePackage\nimport com.facebook.react.popupmenu.PopupMenuPackage\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ReactShadowNode\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.soloader.SoLoader\n\nclass RNTesterApplication : Application(), ReactApplication {\n  override val reactNativeHost: ReactNativeHost by lazy {\n    object : DefaultReactNativeHost(this) {\n      public override fun getJSMainModuleName(): String = BuildConfig.JS_MAIN_MODULE_NAME\n\n      public override fun getBundleAssetName(): String = BuildConfig.BUNDLE_ASSET_NAME\n\n      override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n      public override fun getPackages(): List<ReactPackage> {\n        return listOf(\n            MainReactPackage(),\n            PopupMenuPackage(),\n            OSSLibraryExamplePackage(),\n            object : TurboReactPackage() {\n              override fun getModule(\n                  name: String,\n                  reactContext: ReactApplicationContext\n              ): NativeModule? {\n                @Suppress(\"DEPRECATION\")\n                if (!ReactFeatureFlags.useTurboModules) {\n                  return null\n                }\n                if (SampleTurboModule.NAME == name) {\n                  return SampleTurboModule(reactContext)\n                }\n                if (SampleLegacyModule.NAME == name) {\n                  return SampleLegacyModule(reactContext)\n                }\n                return null\n              }\n\n              // Note: Specialized annotation processor for @ReactModule isn't configured in OSS\n              // yet. For now, hardcode this information, though it's not necessary for most\n              // modules.\n              override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n                  ReactModuleInfoProvider {\n                    @Suppress(\"DEPRECATION\")\n                    if (ReactFeatureFlags.useTurboModules) {\n                      mapOf(\n                          SampleTurboModule.NAME to\n                              ReactModuleInfo(\n                                  SampleTurboModule.NAME,\n                                  \"SampleTurboModule\",\n                                  false, // canOverrideExistingModule\n                                  false, // needsEagerInit\n                                  false, // isCxxModule\n                                  true // isTurboModule\n                                  ),\n                          SampleLegacyModule.NAME to\n                              ReactModuleInfo(\n                                  SampleLegacyModule.NAME,\n                                  \"SampleLegacyModule\",\n                                  false, // canOverrideExistingModule\n                                  false, // needsEagerInit\n                                  false, // isCxxModule\n                                  false // isTurboModule\n                                  ))\n                    } else {\n                      emptyMap()\n                    }\n                  }\n            },\n            object : ReactPackage, ViewManagerOnDemandReactPackage {\n              override fun createNativeModules(\n                  reactContext: ReactApplicationContext\n              ): List<NativeModule> = emptyList()\n\n              override fun getViewManagerNames(reactContext: ReactApplicationContext) =\n                  listOf(\"RNTMyNativeView\", \"RNTMyLegacyNativeView\")\n\n              override fun createViewManagers(\n                  reactContext: ReactApplicationContext\n              ): List<ViewManager<*, *>> =\n                  listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n\n              override fun createViewManager(\n                  reactContext: ReactApplicationContext,\n                  viewManagerName: String\n              ): ViewManager<*, out ReactShadowNode<*>>? =\n                  if (viewManagerName == \"RNTMyNativeView\") {\n                    MyNativeViewManager()\n                  } else if (viewManagerName == \"RNTMyLegacyNativeView\") {\n                    MyLegacyViewManager(reactContext)\n                  } else {\n                    null\n                  }\n            })\n      }\n\n      override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED_IN_FLAVOR\n    }\n  }\n\n  override val reactHost: ReactHost\n    get() = DefaultReactHost.getDefaultReactHost(applicationContext, reactNativeHost)\n\n  override fun onCreate() {\n    ReactFontManager.getInstance().addCustomFont(this, \"Rubik\", R.font.rubik)\n    super.onCreate()\n    SoLoader.init(this, /* native exopackage */ false)\n\n    // [Experiment] Enable the new debugger stack (codename Fusebox)\n    unstable_loadFusebox(BuildConfig.IS_NEW_ARCHITECTURE_ENABLED)\n\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      load()\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-13T22:41:22Z"
    },
    {
      "repository": "trieulongben/react-native-device-lock-task",
      "file": "android/src/main/java/com/rtn_device_lock_task/DeviceLockTaskPackage.kt",
      "url": "https://github.com/trieulongben/react-native-device-lock-task/blob/f0dde95f7d0cd4c87101c420628604497845a6a2/android/src/main/java/com/rtn_device_lock_task/DeviceLockTaskPackage.kt",
      "fileContent": "package com.rtn_device_lock_task\n\nimport android.util.Log\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass DeviceLockTaskPackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactAppContext: ReactApplicationContext): NativeModule? {\n\n        if(name==DeviceLockTaskModule.NAME){\n            return DeviceLockTaskModule(reactAppContext)\n        }\n        else{\n            return null\n\n        }\n    }\n    override fun getReactModuleInfoProvider()=ReactModuleInfoProvider {\n        mapOf(\n            DeviceLockTaskModule.NAME to ReactModuleInfo(\n                DeviceLockTaskModule.NAME,DeviceLockTaskModule.NAME, _canOverrideExistingModule = false, _needsEagerInit = false,false, isTurboModule = true\n            )\n        )\n    }\n\n}\n",
      "stars": 3,
      "lastCommitDate": "2024-10-24T06:49:25Z"
    },
    {
      "repository": "csaq5507/react-native-brotli-decompress",
      "file": "android/src/main/java/com/brotlidecompress/BrotliDecompressPackage.kt",
      "url": "https://github.com/csaq5507/react-native-brotli-decompress/blob/6f56da4293725ddfc4d40013c377580d37fb445b/android/src/main/java/com/brotlidecompress/BrotliDecompressPackage.kt",
      "fileContent": "package com.brotlidecompress\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass BrotliDecompressPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == BrotliDecompressModule.NAME) {\n      BrotliDecompressModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[BrotliDecompressModule.NAME] = ReactModuleInfo(\n        BrotliDecompressModule.NAME,\n        BrotliDecompressModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-10-01T19:49:41Z"
    },
    {
      "repository": "wisdomstar94/rtn-deviceinfo",
      "file": "android/src/main/java/com/rtndeviceinfo/DeviceinfoPackage.kt",
      "url": "https://github.com/wisdomstar94/rtn-deviceinfo/blob/eccfb3ea657216347e38c1c60ec398e8e8e2a08b/android/src/main/java/com/rtndeviceinfo/DeviceinfoPackage.kt",
      "fileContent": "package com.rtndeviceinfo;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass DeviceinfoPackage : TurboReactPackage() {\n  // override fun getModule(name: String?, reactContext: ReactApplicationContext): NativeModule? = null\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n  if (name == DeviceinfoModule.NAME) {\n    DeviceinfoModule(reactContext)\n  } else {\n    null\n  }\n\n  // override fun getReactModuleInfoProvider(): ReactModuleInfoProvider? = null\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      DeviceinfoModule.NAME to ReactModuleInfo(\n        DeviceinfoModule.NAME,\n        DeviceinfoModule.NAME,\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        true, // hasConstants\n        false, // isCxxModule\n        true // isTurboModule\n      )\n    )\n  }\n}",
      "stars": 0,
      "lastCommitDate": "2024-04-30T03:42:45Z"
    },
    {
      "repository": "StanzaSystems/stanza-rn-sdk",
      "file": "android/src/main/java/com/stanzarnsdk/StanzaRnSdkPackage.kt",
      "url": "https://github.com/StanzaSystems/stanza-rn-sdk/blob/230eb1bba19944b7ec6437c7644840541e6e1ddd/android/src/main/java/com/stanzarnsdk/StanzaRnSdkPackage.kt",
      "fileContent": "package com.stanzarnsdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass StanzaRnSdkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == StanzaRnSdkModule.NAME) {\n      StanzaRnSdkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[StanzaRnSdkModule.NAME] = ReactModuleInfo(\n        StanzaRnSdkModule.NAME,\n        StanzaRnSdkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-11-13T17:53:30Z"
    },
    {
      "repository": "sothx/react-native-shell-tools",
      "file": "android/src/main/java/com/shelltools/ReactNativeShellToolsPackage.kt",
      "url": "https://github.com/sothx/react-native-shell-tools/blob/ef9b063471edd8d0bdbc15bae2a536e7d8b29a1f/android/src/main/java/com/shelltools/ReactNativeShellToolsPackage.kt",
      "fileContent": "package com.shelltools\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass ReactNativeShellToolsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeShellToolsModule.NAME) {\n      ReactNativeShellToolsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[ReactNativeShellToolsModule.NAME] = ReactModuleInfo(\n        ReactNativeShellToolsModule.NAME,\n        ReactNativeShellToolsModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-26T22:06:56Z"
    },
    {
      "repository": "moengage/React-Native",
      "file": "sdk/core/android/src/main/java/com/moengage/react/MoEReactPackage.kt",
      "url": "https://github.com/moengage/React-Native/blob/b37abdf4c36f099d5b2497a276cc8f3a5483c4fa/sdk/core/android/src/main/java/com/moengage/react/MoEReactPackage.kt",
      "fileContent": "/*\n * Copyright (c) 2014-2024 MoEngage Inc.\n *\n * All rights reserved.\n *\n *  Use of source code or binaries contained within MoEngage SDK is permitted only to enable use of the MoEngage platform by customers of MoEngage.\n *  Modification of source code and inclusion in mobile apps is explicitly allowed provided that all other conditions are met.\n *  Neither the name of MoEngage nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *  Redistribution of source code or binaries is disallowed except with specific prior written permission. Any such redistribution must retain the above copyright notice, this list of conditions and the following disclaimer.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.moengage.react\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\n/**\n * @author Umang Chamaria\n */\nclass MoEReactPackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == MoEReactBridgeHandler.NAME) {\n            MoEReactBridge(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[MoEReactBridgeHandler.NAME] = ReactModuleInfo(\n                MoEReactBridgeHandler.NAME,\n                MoEReactBridgeHandler.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}",
      "stars": 3,
      "lastCommitDate": "2024-11-25T08:46:55Z"
    },
    {
      "repository": "gil-air-may/React-Native-Cpp-Turbo-Modules",
      "file": "android/src/main/java/com/cppturbo/CppTurboPackage.kt",
      "url": "https://github.com/gil-air-may/React-Native-Cpp-Turbo-Modules/blob/98fd3d268a474e2f4856f7ad7d06a711b3f41a18/android/src/main/java/com/cppturbo/CppTurboPackage.kt",
      "fileContent": "package com.cppturbo\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass CppTurboPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == CppTurboModule.NAME) {\n      CppTurboModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[CppTurboModule.NAME] = ReactModuleInfo(\n        CppTurboModule.NAME,\n        CppTurboModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-10-20T14:32:32Z"
    },
    {
      "repository": "lesleysin/RN-TurboModuleScaffold",
      "file": "src/templates/kotlin-compat-module/src/main/java/com/TempName/TempNamePackage.kt",
      "url": "https://github.com/lesleysin/RN-TurboModuleScaffold/blob/b1193ec22d4ba739b84a9d3d3f4fc04b72045923/src/templates/kotlin-compat-module/src/main/java/com/TempName/TempNamePackage.kt",
      "fileContent": "package com.TempName\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.react.module.model.ReactModuleInfoProvider;\nimport com.facebook.react.module.model.ReactModuleInfo;\n\nimport com.TempName.impl.TempNameModuleImpl\n\nclass TempNamePackage : TurboReactPackage() {\n\n    override fun getModule(name: String, ctx: ReactApplicationContext): NativeModule? {\n        if (name.equals(TempNameModuleImpl.NAME)) {\n            return TempNameModule(ctx);\n        } else {\n            return null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n\n        class Provider: ReactModuleInfoProvider {\n\n            override fun getReactModuleInfos(): Map<String, ReactModuleInfo> {\n                val moduleInfos = mutableMapOf<String, ReactModuleInfo>();\n                moduleInfos.put(\n                    TempNameModuleImpl.NAME,\n                    ReactModuleInfo(\n                        TempNameModuleImpl.NAME,\n                        TempNameModuleImpl.NAME,\n                        false, // canOverrideExistingModule\n                        false, // needsEagerInit\n                        true, // hasConstants\n                        false, // isCxxModule\n                        true // isTurboModule\n                    ));\n                return moduleInfos;\n            }\n\n        }\n\n        return Provider();\n    }\n}",
      "stars": 6,
      "lastCommitDate": "2023-04-28T08:36:00Z"
    },
    {
      "repository": "cipolleschi/InAppComponent",
      "file": "android/app/src/main/java/com/webview/ReactWebViewPackage.kt",
      "url": "https://github.com/cipolleschi/InAppComponent/blob/ce6d2cb19f80f85ad6c4c387e3c354350a6d36fb/android/app/src/main/java/com/webview/ReactWebViewPackage.kt",
      "fileContent": "package com.webview\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\nclass ReactWebViewPackage : TurboReactPackage() {\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf(ReactWebViewManager(reactContext))\n  }\n\n  override fun getModule(s: String, reactApplicationContext: ReactApplicationContext): NativeModule? {\n    when (s) {\n      ReactWebViewManager.REACT_CLASS -> ReactWebViewManager(reactApplicationContext)\n    }\n    return null\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider = ReactModuleInfoProvider {\n    mapOf(ReactWebViewManager.REACT_CLASS to ReactModuleInfo(\n      _name = ReactWebViewManager.REACT_CLASS,\n      _className = ReactWebViewManager.REACT_CLASS,\n      _canOverrideExistingModule = false,\n      _needsEagerInit = false,\n      isCxxModule = false,\n      isTurboModule = true,\n    )\n    )\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-10-22T06:25:16Z"
    },
    {
      "repository": "louiszawadzki/react-native-tested-base64",
      "file": "android/src/main/kotlin/com/testedbase64/TestedBase64Package.kt",
      "url": "https://github.com/louiszawadzki/react-native-tested-base64/blob/dda6666cb4fcfd08af4acddbe2e8b6d5dc37a544/android/src/main/kotlin/com/testedbase64/TestedBase64Package.kt",
      "fileContent": "package com.testedbase64\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass TestedBase64Package : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TestedBase64Module.NAME) {\n      TestedBase64Module(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[TestedBase64Module.NAME] = ReactModuleInfo(\n        TestedBase64Module.NAME,\n        TestedBase64Module.NAME,\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        true, // hasConstants\n        false, // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-03-19T16:39:01Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-maps",
      "file": "packages/plugin-googlemaps/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/googlemaps/RNOmhMapsPluginGooglemapsPackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-maps/blob/c2b6ec914b917d2dfdc5f58cb93dbefa49c5bb53/packages/plugin-googlemaps/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/googlemaps/RNOmhMapsPluginGooglemapsPackage.kt",
      "fileContent": "package com.openmobilehub.android.rn.maps.plugin.googlemaps\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass RNOmhMapsPluginGooglemapsTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return null\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = emptyArray()\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf()\n    }\n}\n",
      "stars": 25,
      "lastCommitDate": "2024-10-25T10:35:38Z"
    },
    {
      "repository": "mbhaskar98/test-library",
      "file": "android/src/main/java/com/bobtest/BobTestPackage.kt",
      "url": "https://github.com/mbhaskar98/test-library/blob/69e9777100843c03c99248fea4b03c85703cfaec/android/src/main/java/com/bobtest/BobTestPackage.kt",
      "fileContent": "package com.bobtest\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass BobTestPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == BobTestModule.NAME) {\n      BobTestModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[BobTestModule.NAME] = ReactModuleInfo(\n        BobTestModule.NAME,\n        BobTestModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-10T02:54:29Z"
    },
    {
      "repository": "cristiangu/react-native-local-notifications",
      "file": "android/src/main/java/com/localnotifications/LocalNotificationsPackage.kt",
      "url": "https://github.com/cristiangu/react-native-local-notifications/blob/dddef3a2ef282a7eeab33c1e67aadbeafea88122/android/src/main/java/com/localnotifications/LocalNotificationsPackage.kt",
      "fileContent": "package com.localnotifications\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass LocalNotificationsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == LocalNotificationsModule.NAME) {\n      LocalNotificationsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[LocalNotificationsModule.NAME] = ReactModuleInfo(\n        LocalNotificationsModule.NAME,\n        LocalNotificationsModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-05-31T12:53:11Z"
    },
    {
      "repository": "OmarThinks/React-Native-Native-Modules-Project",
      "file": "RTNCalculator/android/src/main/java/com/rtncalculator/CalculatorPackage.kt",
      "url": "https://github.com/OmarThinks/React-Native-Native-Modules-Project/blob/2d76880338b211440fc32cc92e38315e06b9268c/RTNCalculator/android/src/main/java/com/rtncalculator/CalculatorPackage.kt",
      "fileContent": "package com.rtncalculator;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass CalculatorPackage : TurboReactPackage() {\n\n    override fun getModule(name: String?, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == CalculatorModule.NAME) {\n        CalculatorModule(reactContext)\n    } else {\n        null\n    }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            CalculatorModule.NAME to ReactModuleInfo(\n                CalculatorModule.NAME,\n                CalculatorModule.NAME,\n                false, // canOverrideExistingModule\n                false, // needsEagerInit\n                true, // hasConstants\n                false, // isCxxModule\n                true // isTurboModule\n            )\n        )\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2023-11-10T19:17:45Z"
    },
    {
      "repository": "Notificare/notificare-sdk-react-native",
      "file": "packages/react-native-notificare-user-inbox/android/src/main/java/re/notifica/inbox/user/react_native/NotificareUserInboxPackage.kt",
      "url": "https://github.com/Notificare/notificare-sdk-react-native/blob/8d9f7b299835b6b67050e1a1562e02b26e814b19/packages/react-native-notificare-user-inbox/android/src/main/java/re/notifica/inbox/user/react_native/NotificareUserInboxPackage.kt",
      "fileContent": "package re.notifica.inbox.user.react_native\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\npublic class NotificareUserInboxPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NotificareUserInboxModule.NAME) {\n            NotificareUserInboxModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[NotificareUserInboxModule.NAME] = ReactModuleInfo(\n                NotificareUserInboxModule.NAME,\n                NotificareUserInboxModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 6,
      "lastCommitDate": "2024-10-30T16:49:15Z"
    },
    {
      "repository": "retyui/react-native-widget-picker",
      "file": "android/src/main/java/com/retyui/widgetpicker/WidgetPickerTurboPackage.kt",
      "url": "https://github.com/retyui/react-native-widget-picker/blob/216efbfb9653742679d90ce767b35830b7112a44/android/src/main/java/com/retyui/widgetpicker/WidgetPickerTurboPackage.kt",
      "fileContent": "package com.retyui.widgetpicker\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass WidgetPickerTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            WidgetPickerModule.NAME -> WidgetPickerModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n                WidgetPickerModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                    ReactModuleInfo(\n                            reactModule.name,\n                            moduleClass.name,\n                            true,\n                            reactModule.needsEagerInit,\n                            reactModule.hasConstants,\n                            reactModule.isCxxModule,\n                            TurboModule::class.java.isAssignableFrom(moduleClass)\n                    )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}\n",
      "stars": 16,
      "lastCommitDate": "2024-02-25T22:26:33Z"
    },
    {
      "repository": "pvinis/react-native---investigation",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "url": "https://github.com/pvinis/react-native---investigation/blob/932ede506d498f46b109795aba33fd06127b4600/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.app.Application\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.ReactApplication\nimport com.facebook.react.ReactHost\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.assets.ReactFontManager\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultReactHost\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.osslibraryexample.OSSLibraryExamplePackage\nimport com.facebook.react.popupmenu.PopupMenuPackage\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.soloader.OpenSourceMergedSoMapping\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ReactShadowNode\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.soloader.SoLoader\n\nclass RNTesterApplication : Application(), ReactApplication {\n  override val reactNativeHost: ReactNativeHost by lazy {\n    object : DefaultReactNativeHost(this) {\n      public override fun getJSMainModuleName(): String = BuildConfig.JS_MAIN_MODULE_NAME\n\n      public override fun getBundleAssetName(): String = BuildConfig.BUNDLE_ASSET_NAME\n\n      override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n      public override fun getPackages(): List<ReactPackage> {\n        return listOf(\n            MainReactPackage(),\n            PopupMenuPackage(),\n            OSSLibraryExamplePackage(),\n            object : BaseReactPackage() {\n              override fun getModule(\n                  name: String,\n                  reactContext: ReactApplicationContext\n              ): NativeModule? {\n                if (!isNewArchEnabled) {\n                  return null\n                }\n                if (SampleTurboModule.NAME == name) {\n                  return SampleTurboModule(reactContext)\n                }\n                if (SampleLegacyModule.NAME == name) {\n                  return SampleLegacyModule(reactContext)\n                }\n                return null\n              }\n\n              // Note: Specialized annotation processor for @ReactModule isn't configured in OSS\n              // yet. For now, hardcode this information, though it's not necessary for most\n              // modules.\n              override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n                  ReactModuleInfoProvider {\n                    if (isNewArchEnabled) {\n                      mapOf(\n                          SampleTurboModule.NAME to\n                              ReactModuleInfo(\n                                  SampleTurboModule.NAME,\n                                  \"SampleTurboModule\",\n                                  _canOverrideExistingModule = false,\n                                  _needsEagerInit = false,\n                                  isCxxModule = false,\n                                  isTurboModule = true),\n                          SampleLegacyModule.NAME to\n                              ReactModuleInfo(\n                                  SampleLegacyModule.NAME,\n                                  \"SampleLegacyModule\",\n                                  _canOverrideExistingModule = false,\n                                  _needsEagerInit = false,\n                                  isCxxModule = false,\n                                  isTurboModule = false))\n                    } else {\n                      emptyMap()\n                    }\n                  }\n            },\n            object : ReactPackage, ViewManagerOnDemandReactPackage {\n              override fun createNativeModules(\n                  reactContext: ReactApplicationContext\n              ): List<NativeModule> = emptyList()\n\n              override fun getViewManagerNames(reactContext: ReactApplicationContext) =\n                  listOf(\"RNTMyNativeView\", \"RNTMyLegacyNativeView\")\n\n              override fun createViewManagers(\n                  reactContext: ReactApplicationContext\n              ): List<ViewManager<*, *>> =\n                  listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n\n              override fun createViewManager(\n                  reactContext: ReactApplicationContext,\n                  viewManagerName: String\n              ): ViewManager<*, out ReactShadowNode<*>>? =\n                  when (viewManagerName) {\n                    \"RNTMyNativeView\" -> MyNativeViewManager()\n                    \"RNTMyLegacyNativeView\" -> MyLegacyViewManager(reactContext)\n                    else -> null\n                  }\n            })\n      }\n\n      override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED_IN_FLAVOR\n    }\n  }\n\n  override val reactHost: ReactHost\n    get() = DefaultReactHost.getDefaultReactHost(applicationContext, reactNativeHost)\n\n  override fun onCreate() {\n    ReactFontManager.getInstance().addCustomFont(this, \"Rubik\", R.font.rubik)\n    super.onCreate()\n\n    if (BuildConfig.IS_INTERNAL_BUILD) {\n      // For Buck we call the simple init() as the SoMapping is built-from-source inside SoLoader\n      SoLoader.init(this, false)\n    } else {\n      // For Gradle instead, we need to specify it as constructor parameter.\n      SoLoader.init(this, OpenSourceMergedSoMapping)\n    }\n\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      load()\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-18T20:11:40Z"
    },
    {
      "repository": "chnirt/react-native-captcha",
      "file": "android/src/main/java/com/captcha/CaptchaPackage.kt",
      "url": "https://github.com/chnirt/react-native-captcha/blob/7ef8da84ccf9255f32d6aa096f860aeea71ed6f5/android/src/main/java/com/captcha/CaptchaPackage.kt",
      "fileContent": "package com.captcha\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass CaptchaPackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == CaptchaModule.NAME) {\n      CaptchaModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[CaptchaModule.NAME] = ReactModuleInfo(\n        CaptchaModule.NAME,\n        CaptchaModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-10T06:34:04Z"
    },
    {
      "repository": "callstack-internal/marius-pasca-onboarding",
      "file": "modules/weather/android/src/main/java/com/weather/WeatherPackage.kt",
      "url": "https://github.com/callstack-internal/marius-pasca-onboarding/blob/f5ffacecfe4f8465d8b4f60a494b58fbb5d3c8eb/modules/weather/android/src/main/java/com/weather/WeatherPackage.kt",
      "fileContent": "package com.weather\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass WeatherPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == WeatherModule.NAME) {\n      WeatherModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[WeatherModule.NAME] = ReactModuleInfo(\n        WeatherModule.NAME,\n        WeatherModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-10-28T07:42:48Z"
    },
    {
      "repository": "nitinvarda/RN-NewArchitecture",
      "file": "android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "url": "https://github.com/nitinvarda/RN-NewArchitecture/blob/b89c2fe83004161949acccf6dd68087fc3d00cc1/android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "fileContent": "package com.nativelocalstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeLocalStoragePackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == NativeLocalStorageModule.NAME) {\n      NativeLocalStorageModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      NativeLocalStorageModule.NAME to ReactModuleInfo(\n        _name = NativeLocalStorageModule.NAME,\n        _className = NativeLocalStorageModule.NAME,\n        _canOverrideExistingModule = false,\n        _needsEagerInit = false,\n        isCxxModule = false,\n        isTurboModule = true\n      )\n    )\n  }\n}",
      "stars": 0,
      "lastCommitDate": "2024-11-05T05:47:32Z"
    },
    {
      "repository": "inkdropapp/RN74Example",
      "file": "android/app/src/main/java/com/rn74example/AttachmentProcessorPackage.kt",
      "url": "https://github.com/inkdropapp/RN74Example/blob/48f6d165e299b1d4a2d43fed3fb1bde930ef15e4/android/app/src/main/java/com/rn74example/AttachmentProcessorPackage.kt",
      "fileContent": "package com.rn74example\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass AttachmentProcessorPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == AttachmentProcessorModule.NAME) {\n            AttachmentProcessorModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            moduleInfos[AttachmentProcessorModule.NAME] = ReactModuleInfo(\n                    AttachmentProcessorModule.NAME,\n                    AttachmentProcessorModule.NAME,\n                    false,  // canOverrideExistingModule\n                    false,  // needsEagerInit\n                    true,  // hasConstants\n                    false,  // isCxxModule\n                    true // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 9,
      "lastCommitDate": "2024-06-13T05:55:40Z"
    },
    {
      "repository": "mbhaskar98/final_library",
      "file": "android/src/main/java/com/finallibrary/FinalLibraryPackage.kt",
      "url": "https://github.com/mbhaskar98/final_library/blob/b6a273547c317c3f8c5fde50e96ae4ccb1317ca6/android/src/main/java/com/finallibrary/FinalLibraryPackage.kt",
      "fileContent": "package com.finallibrary\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass FinalLibraryPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == FinalLibraryModule.NAME) {\n      FinalLibraryModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[FinalLibraryModule.NAME] = ReactModuleInfo(\n        FinalLibraryModule.NAME,\n        FinalLibraryModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-02T07:29:10Z"
    },
    {
      "repository": "theshivamlko/react_native_practice",
      "file": "rn_native_zebra_sdk/android/app/src/main/java/com/citridot/zebrasdk/NativeZebraSDKPackage.kt",
      "url": "https://github.com/theshivamlko/react_native_practice/blob/2faab55cc7d1801b69201507d363c94caa373148/rn_native_zebra_sdk/android/app/src/main/java/com/citridot/zebrasdk/NativeZebraSDKPackage.kt",
      "fileContent": "//package com.citridot.zebrasdk\n//\n//import android.util.Log\n//import com.facebook.react.TurboReactPackage\n//import com.facebook.react.bridge.NativeModule\n//import com.facebook.react.bridge.ReactApplicationContext\n//import com.facebook.react.module.model.ReactModuleInfo\n//import com.facebook.react.module.model.ReactModuleInfoProvider\n//\n//class NativeZebraSDKPackage : TurboReactPackage() {\n//    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n//        Log.v(\"NativeZebraSDKPackage\", \"getModule: $name ${NativeZebraSDKModule.NAME}\")\n//        return if (name == NativeZebraSDKModule.NAME) {\n//            NativeZebraSDKModule(reactContext)\n//        } else {\n//            null\n//        }\n//    }\n//\n//    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n//        return ReactModuleInfoProvider {\n//            mapOf(\n//                NativeZebraSDKModule.NAME to ReactModuleInfo(\n//                    _name = NativeZebraSDKModule.NAME,\n//                    _className = NativeZebraSDKModule.NAME,\n//                    _canOverrideExistingModule = false,\n//                    _needsEagerInit = false,\n//                    isCxxModule = false,\n//                    isTurboModule = true\n//                )\n//            )\n//        }\n//    }\n//\n//\n//}",
      "stars": 0,
      "lastCommitDate": "2024-12-18T18:05:02Z"
    },
    {
      "repository": "huextrat/react-native-screenshot-aware",
      "file": "android/src/main/java/com/screenshotaware/ScreenshotAwarePackage.kt",
      "url": "https://github.com/huextrat/react-native-screenshot-aware/blob/c57273ab45eeb8ffb0298394cb40d48e115adff6/android/src/main/java/com/screenshotaware/ScreenshotAwarePackage.kt",
      "fileContent": "package com.screenshotaware\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ScreenshotAwarePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ScreenshotAwareModule.NAME) {\n      ScreenshotAwareModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[ScreenshotAwareModule.NAME] = ReactModuleInfo(\n        ScreenshotAwareModule.NAME,\n        ScreenshotAwareModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 74,
      "lastCommitDate": "2024-12-18T17:21:43Z"
    },
    {
      "repository": "nuraalamjikue/React-native-Sample-Inventory-App-Code",
      "file": ".svn/pristine/3e/3e425c6aeaf93238896facdb1eb7d1c3cf52d1af.svn-base",
      "url": "https://github.com/nuraalamjikue/React-native-Sample-Inventory-App-Code/blob/ce5541bde0c6d336537f274ac352ff3478ee2472/.svn/pristine/3e/3e425c6aeaf93238896facdb1eb7d1c3cf52d1af.svn-base",
      "fileContent": "package com.th3rdwave.safeareacontext\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\n// Fool autolinking for older versions that do not support TurboReactPackage.\n// public class SafeAreaContextPackage implements ReactPackage {\nclass SafeAreaContextPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      SafeAreaContextModule.NAME -> SafeAreaContextModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(SafeAreaContextModule::class.java)\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n          ReactModuleInfo(\n              reactModule.name,\n              moduleClass.name,\n              true,\n              reactModule.needsEagerInit,\n              reactModule.hasConstants,\n              reactModule.isCxxModule,\n              TurboModule::class.java.isAssignableFrom(moduleClass))\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf<ViewManager<*, *>>(SafeAreaProviderManager(), SafeAreaViewManager())\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-02-27T13:01:27Z"
    },
    {
      "repository": "ignaciosantise/react-native-installed-app",
      "file": "android/src/main/java/com/installedapp/InstalledAppPackage.kt",
      "url": "https://github.com/ignaciosantise/react-native-installed-app/blob/83d53fb331fca2b1fdd78ef2026487888cffabee/android/src/main/java/com/installedapp/InstalledAppPackage.kt",
      "fileContent": "package com.installedapp\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass InstalledAppPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == InstalledAppModule.NAME) {\n      InstalledAppModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[InstalledAppModule.NAME] = ReactModuleInfo(\n        InstalledAppModule.NAME,\n        InstalledAppModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-07-31T14:54:31Z"
    },
    {
      "repository": "fabOnReact/react-native-notes",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "url": "https://github.com/fabOnReact/react-native-notes/blob/228530c624eb7a1e46bd1843e621ae6d9653167f/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.app.Application\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.ReactApplication\nimport com.facebook.react.ReactHost\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.assets.ReactFontManager\nimport com.facebook.react.config.ReactFeatureFlags\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultReactHost\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ReactShadowNode\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.soloader.SoLoader\n\nclass RNTesterApplication : Application(), ReactApplication {\n  override val reactNativeHost: ReactNativeHost by lazy {\n    object : DefaultReactNativeHost(this) {\n      public override fun getJSMainModuleName(): String = BuildConfig.JS_MAIN_MODULE_NAME\n\n      public override fun getBundleAssetName(): String = BuildConfig.BUNDLE_ASSET_NAME\n\n      override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n      public override fun getPackages(): List<ReactPackage> {\n        return listOf(\n            MainReactPackage(),\n            object : TurboReactPackage() {\n              override fun getModule(\n                  name: String,\n                  reactContext: ReactApplicationContext\n              ): NativeModule? {\n                if (!ReactFeatureFlags.useTurboModules) {\n                  return null\n                }\n                if (SampleTurboModule.NAME == name) {\n                  return SampleTurboModule(reactContext)\n                }\n                if (SampleLegacyModule.NAME == name) {\n                  return SampleLegacyModule(reactContext)\n                }\n                return null\n              }\n\n              // Note: Specialized annotation processor for @ReactModule isn't configured in OSS\n              // yet. For now, hardcode this information, though it's not necessary for most\n              // modules.\n              override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n                  ReactModuleInfoProvider {\n                    if (ReactFeatureFlags.useTurboModules) {\n                      mapOf(\n                          SampleTurboModule.NAME to\n                              ReactModuleInfo(\n                                  SampleTurboModule.NAME,\n                                  \"SampleTurboModule\",\n                                  false, // canOverrideExistingModule\n                                  false, // needsEagerInit\n                                  false, // isCxxModule\n                                  true // isTurboModule\n                                  ),\n                          SampleLegacyModule.NAME to\n                              ReactModuleInfo(\n                                  SampleLegacyModule.NAME,\n                                  \"SampleLegacyModule\",\n                                  false, // canOverrideExistingModule\n                                  false, // needsEagerInit\n                                  false, // isCxxModule\n                                  false // isTurboModule\n                                  ))\n                    } else {\n                      emptyMap()\n                    }\n                  }\n            },\n            object : ReactPackage, ViewManagerOnDemandReactPackage {\n              override fun createNativeModules(\n                  reactContext: ReactApplicationContext\n              ): List<NativeModule> = emptyList()\n\n              override fun getViewManagerNames(reactContext: ReactApplicationContext) =\n                  listOf(\"RNTMyNativeView\", \"RNTMyLegacyNativeView\")\n\n              override fun createViewManagers(\n                  reactContext: ReactApplicationContext\n              ): List<ViewManager<*, *>> =\n                  listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n\n              override fun createViewManager(\n                  reactContext: ReactApplicationContext,\n                  viewManagerName: String\n              ): ViewManager<*, out ReactShadowNode<*>> =\n                  if (viewManagerName == \"RNTMyNativeView\") {\n                    MyNativeViewManager()\n                  } else {\n                    MyLegacyViewManager(reactContext)\n                  }\n            })\n      }\n\n      override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED_IN_FLAVOR\n    }\n  }\n\n  override val reactHost: ReactHost\n    get() = DefaultReactHost.getDefaultReactHost(this.applicationContext, reactNativeHost)\n\n  override fun onCreate() {\n    ReactFontManager.getInstance().addCustomFont(this, \"Rubik\", R.font.rubik)\n    super.onCreate()\n    SoLoader.init(this, /* native exopackage */ false)\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      load()\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-11-22T02:13:53Z"
    },
    {
      "repository": "suradisworkspace/react-native-datetime-picker",
      "file": "android/src/main/java/com/datetimepicker/DatetimePickerPackage.kt",
      "url": "https://github.com/suradisworkspace/react-native-datetime-picker/blob/b866033ae86acc2987b03601bc6c15f860dedd5a/android/src/main/java/com/datetimepicker/DatetimePickerPackage.kt",
      "fileContent": "package com.datetimepicker\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass DatetimePickerPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == DatetimePickerModule.NAME) {\n      DatetimePickerModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[DatetimePickerModule.NAME] = ReactModuleInfo(\n        DatetimePickerModule.NAME,\n        DatetimePickerModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-08T17:06:58Z"
    },
    {
      "repository": "sandeep36butte/RNBrownFeldApp",
      "file": "Android/app/src/main/java/com/example/android/NativeTurboModulePackage.kt",
      "url": "https://github.com/sandeep36butte/RNBrownFeldApp/blob/d4194339decf541747ea31010963a484a56798f4/Android/app/src/main/java/com/example/android/NativeTurboModulePackage.kt",
      "fileContent": "package com.example.android\n\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeTurboModulePackage:TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n        if (name == NativeTurboModule.NAME) {\n            NativeTurboModule(reactContext)\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            NativeTurboModule.NAME to ReactModuleInfo(\n                _name = NativeTurboModule.NAME,\n                _className = NativeTurboModule.NAME,\n                _canOverrideExistingModule = false,\n                _needsEagerInit = false,\n                isCxxModule = false,\n                isTurboModule = true\n            )\n        )\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-12-04T18:34:25Z"
    },
    {
      "repository": "AzzappApp/react-native-snapshot-view",
      "file": "android/src/main/java/com/azzapp/rnsnapshotview/ReactNativeSnapshotViewPackage.kt",
      "url": "https://github.com/AzzappApp/react-native-snapshot-view/blob/60122d50924d3fbf6059fb3e30d43234881c3e38/android/src/main/java/com/azzapp/rnsnapshotview/ReactNativeSnapshotViewPackage.kt",
      "fileContent": "package com.azzapp.rnsnapshotview\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport java.util.ArrayList\nimport java.util.HashMap\n\nclass ReactNativeSnapshotViewPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeSnapshotViewModule.NAME) {\n      ReactNativeSnapshotViewModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ReactNativeSnapshotViewModule.NAME] = ReactModuleInfo(\n        ReactNativeSnapshotViewModule.NAME,\n        ReactNativeSnapshotViewModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    val viewManagers: MutableList<ViewManager<*, *>> = ArrayList()\n    viewManagers.add(RNSnapshotRendererManager())\n    return viewManagers\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-10-07T12:12:08Z"
    },
    {
      "repository": "DriveQuantPublic/react-native-drivekit",
      "file": "packages/trip-analysis/android/src/main/java/com/reactnativedrivekittripanalysis/DriveKitTripAnalysisPackage.kt",
      "url": "https://github.com/DriveQuantPublic/react-native-drivekit/blob/ee404f7befe29f2f7b704bfcebe07b4486f435de/packages/trip-analysis/android/src/main/java/com/reactnativedrivekittripanalysis/DriveKitTripAnalysisPackage.kt",
      "fileContent": "package com.reactnativedrivekittripanalysis\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass DriveKitTripAnalysisPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == DriveKitTripAnalysisModule.NAME) {\n      DriveKitTripAnalysisModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[DriveKitTripAnalysisModule.NAME] = ReactModuleInfo(\n        DriveKitTripAnalysisModule.NAME,\n        DriveKitTripAnalysisModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 3,
      "lastCommitDate": "2024-12-16T11:15:02Z"
    },
    {
      "repository": "nickmccomb/reanimated-draggable-modal-header",
      "file": "android/src/main/java/com/reanimateddraggablemodalheader/ReanimatedDraggableModalHeaderPackage.kt",
      "url": "https://github.com/nickmccomb/reanimated-draggable-modal-header/blob/a557ace171c96b6cd2580ea471938c21e0f2c795/android/src/main/java/com/reanimateddraggablemodalheader/ReanimatedDraggableModalHeaderPackage.kt",
      "fileContent": "package com.reanimateddraggablemodalheader\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass ReanimatedDraggableModalHeaderPackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReanimatedDraggableModalHeaderModule.NAME) {\n      ReanimatedDraggableModalHeaderModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[ReanimatedDraggableModalHeaderModule.NAME] = ReactModuleInfo(\n        ReanimatedDraggableModalHeaderModule.NAME,\n        ReanimatedDraggableModalHeaderModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-05T11:22:21Z"
    },
    {
      "repository": "gabrieldonadel/rn-spread-operator-bug",
      "file": "android/app/src/main/java/com/spreadoperatortest/CustomTurboPackage.kt",
      "url": "https://github.com/gabrieldonadel/rn-spread-operator-bug/blob/782326cbd8de32a9e1af5837fd8eeea903cee9fd/android/app/src/main/java/com/spreadoperatortest/CustomTurboPackage.kt",
      "fileContent": "package com.spreadoperatortest\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass CustomTurboPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == CustomTurboModule.NAME) {\n        CustomTurboModule(reactContext)\n   } else {\n     null\n   }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n                CustomTurboModule.NAME to ReactModuleInfo(\n                        CustomTurboModule.NAME,\n                        CustomTurboModule.NAME,\n                        false, // canOverrideExistingModule\n                        false, // needsEagerInit\n                        false, // hasConstants\n                        true, // isCxxModule\n                )\n        )\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-02-28T00:31:08Z"
    },
    {
      "repository": "inthepocket/react-native-service-discovery",
      "file": "android/src/main/java/com/servicediscovery/ServiceDiscoveryPackage.kt",
      "url": "https://github.com/inthepocket/react-native-service-discovery/blob/1403b687ea39dd93e7241c7bdbc8bf2276f0f399/android/src/main/java/com/servicediscovery/ServiceDiscoveryPackage.kt",
      "fileContent": "package com.servicediscovery\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ServiceDiscoveryPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ServiceDiscoveryModule.NAME) {\n      ServiceDiscoveryModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ServiceDiscoveryModule.NAME] = ReactModuleInfo(\n        ServiceDiscoveryModule.NAME,\n        ServiceDiscoveryModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 5,
      "lastCommitDate": "2024-05-03T09:54:46Z"
    },
    {
      "repository": "Survicate/survicate-uxcam-integration-react-native",
      "file": "android/src/main/java/com/survicate/survicateuxcamintegrationreactnative/SurvicateUxcamIntegrationReactNativePackage.kt",
      "url": "https://github.com/Survicate/survicate-uxcam-integration-react-native/blob/a5bc18baa18ae0ee2335dc7716b2ed00974e17fc/android/src/main/java/com/survicate/survicateuxcamintegrationreactnative/SurvicateUxcamIntegrationReactNativePackage.kt",
      "fileContent": "package com.survicate.survicateuxcamintegrationreactnative\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.survicate.survicateuxcamintegrationreactnative.SurvicateUxcamIntegrationReactNativeModule\nimport java.util.HashMap\n\nclass SurvicateUxcamIntegrationReactNativePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == SurvicateUxcamIntegrationReactNativeModule.NAME) {\n      SurvicateUxcamIntegrationReactNativeModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[SurvicateUxcamIntegrationReactNativeModule.NAME] = ReactModuleInfo(\n        SurvicateUxcamIntegrationReactNativeModule.NAME,\n        SurvicateUxcamIntegrationReactNativeModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-07-23T06:47:19Z"
    },
    {
      "repository": "jhugman/uniffi-bindgen-react-native",
      "file": "crates/ubrn_cli/src/codegen/templates/PackageTemplate.kt",
      "url": "https://github.com/jhugman/uniffi-bindgen-react-native/blob/1cf0792ebd2c39fb1c38d0ac019b932029b1c6ee/crates/ubrn_cli/src/codegen/templates/PackageTemplate.kt",
      "fileContent": "{%- let name = self.config.project.module_cpp() %}\n{%- let package_class_name = name|fmt(\"{}Package\") %}\n{%- let module_class_name = name|fmt(\"{}Module\") -%}\n// Generated by uniffi-bindgen-react-native\npackage {{ self.config.project.android.package_name() }}\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass {{ package_class_name }} : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == {{ module_class_name }}.NAME) {\n      {{ module_class_name }}(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[{{ module_class_name }}.NAME] = ReactModuleInfo(\n        {{ module_class_name }}.NAME,\n        {{ module_class_name }}.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 172,
      "lastCommitDate": "2024-12-18T20:03:25Z"
    },
    {
      "repository": "smileidentity/react-native",
      "file": "android/src/main/java/com/smileidentity/react/SmileIdPackage.kt",
      "url": "https://github.com/smileidentity/react-native/blob/a96bb70cd67ce00e8ccb004b638bc9138ca263d1/android/src/main/java/com/smileidentity/react/SmileIdPackage.kt",
      "fileContent": "package com.smileidentity.react\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport com.smileidentity.react.viewmanagers.SmileIDBiometricKYCViewManager\nimport com.smileidentity.react.viewmanagers.SmileIDConsentViewManager\nimport com.smileidentity.react.viewmanagers.SmileIDDocumentCaptureViewManager\nimport com.smileidentity.react.viewmanagers.SmileIDDocumentVerificationViewManager\nimport com.smileidentity.react.viewmanagers.SmileIDEnhancedDocumentVerificationViewManager\nimport com.smileidentity.react.viewmanagers.SmileIDSmartSelfieAuthenticationViewManager\nimport com.smileidentity.react.viewmanagers.SmileIDSmartSelfieCaptureViewManager\nimport com.smileidentity.react.viewmanagers.SmileIDSmartSelfieEnrollmentViewManager\nimport com.smileidentity.react.views.SmileIDDocumentCaptureView\n\nclass SmileIdPackage : TurboReactPackage() {\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> =\n    listOf(\n      SmileIDSmartSelfieCaptureViewManager(reactContext),\n      SmileIDDocumentCaptureViewManager(reactContext),\n      SmileIDSmartSelfieEnrollmentViewManager(reactContext),\n      SmileIDSmartSelfieAuthenticationViewManager(reactContext),\n      SmileIDDocumentVerificationViewManager(reactContext),\n      SmileIDEnhancedDocumentVerificationViewManager(reactContext),\n      SmileIDConsentViewManager(reactContext),\n      SmileIDBiometricKYCViewManager(reactContext),\n    )\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == SmileIdModule.NAME) {\n      SmileIdModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n\n      moduleInfos[SmileIdModule.NAME] = ReactModuleInfo(\n        SmileIdModule.NAME,\n        SmileIdModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        false // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-17T14:39:50Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/user/android/src/main/java/net/mjstudio/rnkakao/user/RNCKakaoUserPackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/user/android/src/main/java/net/mjstudio/rnkakao/user/RNCKakaoUserPackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.user\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNCKakaoUserPackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoUserModule.NAME) {\n      RNCKakaoUserModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoUserModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoUserModule.NAME,\n          RNCKakaoUserModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/social/android/src/main/java/net/mjstudio/rnkakao/social/RNCKakaoSocialPackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/social/android/src/main/java/net/mjstudio/rnkakao/social/RNCKakaoSocialPackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.social\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNCKakaoSocialPackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoSocialModule.NAME) {\n      RNCKakaoSocialModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoSocialModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoSocialModule.NAME,\n          RNCKakaoSocialModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "react-native-tvos/react-native-tvos",
      "file": "packages/react-native/ReactAndroid/src/test/java/com/facebook/react/modules/model/ReactModuleInfoTest.kt",
      "url": "https://github.com/react-native-tvos/react-native-tvos/blob/f5004239e33bb527c26303addb8eecb2a9e72534/packages/react-native/ReactAndroid/src/test/java/com/facebook/react/modules/model/ReactModuleInfoTest.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.modules.model\n\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.Test\n\nclass ReactModuleInfoTest {\n\n  @Test\n  fun testCreateReactModuleInfo() {\n    val reactModuleInfo =\n        ReactModuleInfo(\n            /* name = */ \"name\",\n            /* className = */ \"class\",\n            /* canOverrideExistingModule = */ false,\n            /* needsEagerInit = */ false,\n            /* isCxxModule = */ false,\n            /* isTurboModule = */ false)\n    assertThat(reactModuleInfo.name()).isEqualTo(\"name\")\n    assertThat(reactModuleInfo.canOverrideExistingModule()).isFalse()\n    assertThat(reactModuleInfo.needsEagerInit()).isFalse()\n    assertThat(reactModuleInfo.isCxxModule).isFalse()\n    assertThat(reactModuleInfo.isTurboModule).isFalse()\n  }\n\n  @Test\n  fun classIsTurboModule_withRandomClass() {\n    assertThat(ReactModuleInfo.classIsTurboModule(String::class.java)).isFalse()\n  }\n\n  @Test\n  fun classIsTurboModule_withTurboModule() {\n    assertThat(ReactModuleInfo.classIsTurboModule(TestTurboModule::class.java)).isTrue()\n  }\n\n  inner class TestTurboModule : TurboModule {\n    override fun initialize() = Unit\n\n    override fun invalidate() = Unit\n  }\n}\n",
      "stars": 988,
      "lastCommitDate": "2024-12-11T07:42:46Z"
    },
    {
      "repository": "Chickiyeau/sparta-study",
      "file": "4324/react-native-safe-area-context/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaContextPackage.kt",
      "url": "https://github.com/Chickiyeau/sparta-study/blob/5af095042e7aada8778ae6d40595c4f5077f7c51/4324/react-native-safe-area-context/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaContextPackage.kt",
      "fileContent": "package com.th3rdwave.safeareacontext\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.soloader.SoLoader\n\n// Fool autolinking for older versions that do not support TurboReactPackage.\n// public class SafeAreaContextPackage implements ReactPackage {\nclass SafeAreaContextPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      SafeAreaContextModule.NAME -> SafeAreaContextModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(SafeAreaContextModule::class.java)\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n          ReactModuleInfo(\n              reactModule.name,\n              moduleClass.name,\n              true,\n              reactModule.needsEagerInit,\n              reactModule.hasConstants,\n              reactModule.isCxxModule,\n              TurboModule::class.java.isAssignableFrom(moduleClass))\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      // For Fabric, we load c++ native library here, this triggers screen's Fabric\n      // component registration which is necessary in order to avoid asking users\n      // to manually add init calls in their application code.\n      // This should no longer be needed if RN's autolink mechanism has Fabric support\n      SoLoader.loadLibrary(\"safeareacontext_modules\")\n    }\n    return listOf<ViewManager<*, *>>(SafeAreaProviderManager(), SafeAreaViewManager())\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-06-19T12:25:17Z"
    },
    {
      "repository": "oneDotpy/CaribouQuest",
      "file": "nodemodules/@react-native-async-storage/async-storage/android/src/kotlinPackage/java/com/reactnativecommunity/asyncstorage/AsyncStoragePackage.kt",
      "url": "https://github.com/oneDotpy/CaribouQuest/blob/978ba2e97d1f37f5620afdf39005f6fbeacc93f3/nodemodules/@react-native-async-storage/async-storage/android/src/kotlinPackage/java/com/reactnativecommunity/asyncstorage/AsyncStoragePackage.kt",
      "fileContent": "package com.reactnativecommunity.asyncstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.reactnativecommunity.asyncstorage.next.StorageModule\n\n@ReactModuleList(\n    nativeModules = [\n        StorageModule::class\n    ]\n)\nclass AsyncStoragePackage : TurboReactPackage() {\n    override fun getModule(name: String, context: ReactApplicationContext): NativeModule? = when (name) {\n        StorageModule.NAME -> StorageModule(context)\n        else -> null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        try {\n            val reactModuleInfoProviderClass =\n                Class.forName(\"com.reactnativecommunity.asyncstorage.AsyncStoragePackage$\\$ReactModuleInfoProvider\")\n            return reactModuleInfoProviderClass.newInstance() as ReactModuleInfoProvider\n        } catch (e: ClassNotFoundException) {\n            return ReactModuleInfoProvider {\n                val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                val reactModule: ReactModule = StorageModule::class.java.getAnnotation(\n                    ReactModule::class.java)!!\n\n                mapOf(\n                    StorageModule.NAME to ReactModuleInfo(\n                        reactModule.name,\n                        StorageModule::class.java.name,\n                        reactModule.canOverrideExistingModule,\n                        reactModule.needsEagerInit,\n                        reactModule.hasConstants,\n                        reactModule.isCxxModule,\n                        isTurboModule\n                    )\n                )\n            }\n        } catch (e: InstantiationException) {\n            throw RuntimeException(\"No ReactModuleInfoProvider for AsyncStoragePackage$\\$ReactModuleInfoProvider\", e)\n        } catch (e: IllegalAccessException) {\n            throw RuntimeException(\"No ReactModuleInfoProvider for AsyncStoragePackage$\\$ReactModuleInfoProvider\", e)\n        }\n    }\n\n    override fun getViewManagers(reactContext: ReactApplicationContext?): MutableList<ModuleSpec>? = null\n}",
      "stars": 0,
      "lastCommitDate": "2024-05-19T13:18:32Z"
    },
    {
      "repository": "UmerGitNinja/Expo-App",
      "file": "apps/expo-go/android/vendored/unversioned/@react-native-async-storage/async-storage/android/src/kotlinPackage/java/com/reactnativecommunity/asyncstorage/AsyncStoragePackage.kt",
      "url": "https://github.com/UmerGitNinja/Expo-App/blob/aa84314388b72d7940fcb5bf305c914397943032/apps/expo-go/android/vendored/unversioned/@react-native-async-storage/async-storage/android/src/kotlinPackage/java/com/reactnativecommunity/asyncstorage/AsyncStoragePackage.kt",
      "fileContent": "package com.reactnativecommunity.asyncstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.reactnativecommunity.asyncstorage.next.StorageModule\n\n@ReactModuleList(\n    nativeModules = [\n        StorageModule::class\n    ]\n)\nclass AsyncStoragePackage : TurboReactPackage() {\n    override fun getModule(name: String, context: ReactApplicationContext): NativeModule? = when (name) {\n        StorageModule.NAME -> StorageModule(context)\n        else -> null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        try {\n            val reactModuleInfoProviderClass =\n                Class.forName(\"com.reactnativecommunity.asyncstorage.AsyncStoragePackage$\\$ReactModuleInfoProvider\")\n            return reactModuleInfoProviderClass.newInstance() as ReactModuleInfoProvider\n        } catch (e: ClassNotFoundException) {\n            return ReactModuleInfoProvider {\n                val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                val reactModule: ReactModule = StorageModule::class.java.getAnnotation(\n                    ReactModule::class.java)!!\n\n                mapOf(\n                    StorageModule.NAME to ReactModuleInfo(\n                        reactModule.name,\n                        StorageModule::class.java.name,\n                        reactModule.canOverrideExistingModule,\n                        reactModule.needsEagerInit,\n                        reactModule.hasConstants,\n                        reactModule.isCxxModule,\n                        isTurboModule\n                    )\n                )\n            }\n        } catch (e: InstantiationException) {\n            throw RuntimeException(\"No ReactModuleInfoProvider for AsyncStoragePackage$\\$ReactModuleInfoProvider\", e)\n        } catch (e: IllegalAccessException) {\n            throw RuntimeException(\"No ReactModuleInfoProvider for AsyncStoragePackage$\\$ReactModuleInfoProvider\", e)\n        }\n    }\n\n    override fun getViewManagers(reactContext: ReactApplicationContext?): MutableList<ModuleSpec>? = null\n}",
      "stars": 1,
      "lastCommitDate": "2024-06-11T10:41:09Z"
    },
    {
      "repository": "CodingNewbie99/Expo",
      "file": "apps/expo-go/android/vendored/unversioned/@react-native-async-storage/async-storage/android/src/kotlinPackage/java/com/reactnativecommunity/asyncstorage/AsyncStoragePackage.kt",
      "url": "https://github.com/CodingNewbie99/Expo/blob/8086be4bb637c7ed236fbad111e04f9222a8208c/apps/expo-go/android/vendored/unversioned/@react-native-async-storage/async-storage/android/src/kotlinPackage/java/com/reactnativecommunity/asyncstorage/AsyncStoragePackage.kt",
      "fileContent": "package com.reactnativecommunity.asyncstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.reactnativecommunity.asyncstorage.next.StorageModule\n\n@ReactModuleList(\n    nativeModules = [\n        StorageModule::class\n    ]\n)\nclass AsyncStoragePackage : TurboReactPackage() {\n    override fun getModule(name: String, context: ReactApplicationContext): NativeModule? = when (name) {\n        StorageModule.NAME -> StorageModule(context)\n        else -> null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        try {\n            val reactModuleInfoProviderClass =\n                Class.forName(\"com.reactnativecommunity.asyncstorage.AsyncStoragePackage$\\$ReactModuleInfoProvider\")\n            return reactModuleInfoProviderClass.newInstance() as ReactModuleInfoProvider\n        } catch (e: ClassNotFoundException) {\n            return ReactModuleInfoProvider {\n                val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                val reactModule: ReactModule = StorageModule::class.java.getAnnotation(\n                    ReactModule::class.java)!!\n\n                mapOf(\n                    StorageModule.NAME to ReactModuleInfo(\n                        reactModule.name,\n                        StorageModule::class.java.name,\n                        reactModule.canOverrideExistingModule,\n                        reactModule.needsEagerInit,\n                        reactModule.hasConstants,\n                        reactModule.isCxxModule,\n                        isTurboModule\n                    )\n                )\n            }\n        } catch (e: InstantiationException) {\n            throw RuntimeException(\"No ReactModuleInfoProvider for AsyncStoragePackage$\\$ReactModuleInfoProvider\", e)\n        } catch (e: IllegalAccessException) {\n            throw RuntimeException(\"No ReactModuleInfoProvider for AsyncStoragePackage$\\$ReactModuleInfoProvider\", e)\n        }\n    }\n\n    override fun getViewManagers(reactContext: ReactApplicationContext?): MutableList<ModuleSpec>? = null\n}",
      "stars": 0,
      "lastCommitDate": "2024-08-15T20:42:55Z"
    },
    {
      "repository": "FadilAmiruddin/StrudL",
      "file": "StrudL/node_modules 7.52.49 PM/@react-native-async-storage/async-storage/android/src/kotlinPackage/java/com/reactnativecommunity/asyncstorage/AsyncStoragePackage.kt",
      "url": "https://github.com/FadilAmiruddin/StrudL/blob/979b0f1395e3917dc6b6090d87114abc79855643/StrudL/node_modules%207.52.49%E2%80%AFPM/@react-native-async-storage/async-storage/android/src/kotlinPackage/java/com/reactnativecommunity/asyncstorage/AsyncStoragePackage.kt",
      "fileContent": "package com.reactnativecommunity.asyncstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.reactnativecommunity.asyncstorage.next.StorageModule\n\n@ReactModuleList(\n    nativeModules = [\n        StorageModule::class\n    ]\n)\nclass AsyncStoragePackage : TurboReactPackage() {\n    override fun getModule(name: String, context: ReactApplicationContext): NativeModule? = when (name) {\n        StorageModule.NAME -> StorageModule(context)\n        else -> null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        try {\n            val reactModuleInfoProviderClass =\n                Class.forName(\"com.reactnativecommunity.asyncstorage.AsyncStoragePackage$\\$ReactModuleInfoProvider\")\n            return reactModuleInfoProviderClass.newInstance() as ReactModuleInfoProvider\n        } catch (e: ClassNotFoundException) {\n            return ReactModuleInfoProvider {\n                val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n                val reactModule: ReactModule = StorageModule::class.java.getAnnotation(\n                    ReactModule::class.java)!!\n\n                mapOf(\n                    StorageModule.NAME to ReactModuleInfo(\n                        reactModule.name,\n                        StorageModule::class.java.name,\n                        reactModule.canOverrideExistingModule,\n                        reactModule.needsEagerInit,\n                        reactModule.hasConstants,\n                        reactModule.isCxxModule,\n                        isTurboModule\n                    )\n                )\n            }\n        } catch (e: InstantiationException) {\n            throw RuntimeException(\"No ReactModuleInfoProvider for AsyncStoragePackage$\\$ReactModuleInfoProvider\", e)\n        } catch (e: IllegalAccessException) {\n            throw RuntimeException(\"No ReactModuleInfoProvider for AsyncStoragePackage$\\$ReactModuleInfoProvider\", e)\n        }\n    }\n\n    override fun getViewManagers(reactContext: ReactApplicationContext?): MutableList<ModuleSpec>? = null\n}",
      "stars": 1,
      "lastCommitDate": "2024-07-31T00:01:17Z"
    },
    {
      "repository": "BILDIT-Platform/rn-flybuy",
      "file": "mono/packages/core/android/src/main/java/com/bilditplatform/rnflybuycore/RnFlybuyCorePackage.kt",
      "url": "https://github.com/BILDIT-Platform/rn-flybuy/blob/822359f21a16681f72d0d3d203b9f5595183b9ee/mono/packages/core/android/src/main/java/com/bilditplatform/rnflybuycore/RnFlybuyCorePackage.kt",
      "fileContent": "package com.bilditplatform.rnflybuycore\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnFlybuyCorePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnFlybuyCoreModule.NAME) {\n      RnFlybuyCoreModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnFlybuyCoreModule.NAME] = ReactModuleInfo(\n        RnFlybuyCoreModule.NAME,\n        RnFlybuyCoreModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-07-31T15:50:41Z"
    },
    {
      "repository": "dawnzs03/flakyBuild",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterReactHostDelegate.kt",
      "url": "https://github.com/dawnzs03/flakyBuild/blob/132b9e4d47659c0947e6c0338924ee4c339a7c1d/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterReactHostDelegate.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.content.Context\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.JSEngineResolutionAlgorithm\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.ReactPackageTurboModuleManagerDelegate\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.JSBundleLoader\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.annotations.UnstableReactNativeAPI\nimport com.facebook.react.config.ReactFeatureFlags\nimport com.facebook.react.defaults.DefaultTurboModuleManagerDelegate\nimport com.facebook.react.fabric.ReactNativeConfig\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.runtime.BindingsInstaller\nimport com.facebook.react.runtime.JSCInstance\nimport com.facebook.react.runtime.JSEngineInstance\nimport com.facebook.react.runtime.ReactHostDelegate\nimport com.facebook.react.runtime.ReactHostImpl\nimport com.facebook.react.runtime.hermes.HermesInstance\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.turbomodule.core.TurboModuleManager\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ViewManager\n\n@UnstableReactNativeAPI\nclass RNTesterReactHostDelegate internal constructor(context: Context) : ReactHostDelegate {\n  var reactHost: ReactHostImpl? = null\n\n  override val jsMainModulePath: String = \"js/RNTesterApp.android\"\n\n  override val jsBundleLoader: JSBundleLoader =\n      JSBundleLoader.createAssetLoader(context, \"assets://RNTesterApp.android.bundle\", true)\n\n  @get:Synchronized override val bindingsInstaller: BindingsInstaller? = null\n\n  override val turboModuleManagerDelegateBuilder: ReactPackageTurboModuleManagerDelegate.Builder =\n      DefaultTurboModuleManagerDelegate.Builder()\n\n  override val jsEngineInstance: JSEngineInstance =\n      if (reactHost?.jsEngineResolutionAlgorithm == JSEngineResolutionAlgorithm.JSC) {\n        JSCInstance()\n      } else {\n        HermesInstance()\n      }\n\n  override fun handleInstanceException(error: Exception) {}\n\n  override fun getReactNativeConfig(turboModuleManager: TurboModuleManager): ReactNativeConfig =\n      ReactNativeConfig.DEFAULT_CONFIG\n\n  override val reactPackages: List<ReactPackage> by lazy {\n    listOf(\n        MainReactPackage(),\n        object : TurboReactPackage() {\n          override fun getModule(\n              name: String,\n              reactContext: ReactApplicationContext\n          ): NativeModule? =\n              when {\n                !ReactFeatureFlags.useTurboModules -> null\n                name == SampleTurboModule.NAME -> SampleTurboModule(reactContext)\n                name == SampleLegacyModule.NAME -> SampleLegacyModule(reactContext)\n                else -> null\n              }\n\n          // Note: Specialized annotation processor for @ReactModule isn't\n          // configured in OSS\n          // yet. For now, hardcode this information, though it's not necessary\n          // for most modules\n          override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n              ReactModuleInfoProvider {\n                if (ReactFeatureFlags.useTurboModules) {\n                  mapOf(\n                      SampleTurboModule.NAME to\n                          ReactModuleInfo(\n                              SampleTurboModule.NAME,\n                              \"SampleTurboModule\",\n                              false, // canOverrideExistingModule\n                              false, // needsEagerInit\n                              true, // hasConstants\n                              false, // isCxxModule\n                              true // isTurboModule\n                              ),\n                      SampleLegacyModule.NAME to\n                          ReactModuleInfo(\n                              SampleLegacyModule.NAME,\n                              \"SampleLegacyModule\",\n                              false, // canOverrideExistingModule\n                              false, // needsEagerInit\n                              true, // hasConstants\n                              false, // isCxxModule\n                              false // isTurboModule\n                              ),\n                  )\n                } else {\n                  emptyMap()\n                }\n              }\n        },\n        object : ReactPackage {\n          override fun createNativeModules(\n              reactContext: ReactApplicationContext\n          ): List<NativeModule> = emptyList()\n\n          override fun createViewManagers(\n              reactContext: ReactApplicationContext\n          ): List<ViewManager<*, *>> =\n              listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n        })\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-10-16T13:25:33Z"
    },
    {
      "repository": "longgs25/react-native-lock-task",
      "file": "android/src/main/java/com/rtn_device_lock_task/DeviceLockTaskPackage.kt",
      "url": "https://github.com/longgs25/react-native-lock-task/blob/6a1b00c5d19cd01e5cda03e6c50f942d4b15d96d/android/src/main/java/com/rtn_device_lock_task/DeviceLockTaskPackage.kt",
      "fileContent": "package com.rtn_device_lock_task\n\nimport android.util.Log\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass DeviceLockTaskPackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactAppContext: ReactApplicationContext): NativeModule? {\n\n        if(name==DeviceLockTaskModule.NAME){\n            return DeviceLockTaskModule(reactAppContext)\n        }\n        else{\n            return null\n\n        }\n    }\n    override fun getReactModuleInfoProvider()=ReactModuleInfoProvider {\n        mapOf(\n            DeviceLockTaskModule.NAME to ReactModuleInfo(\n                DeviceLockTaskModule.NAME,DeviceLockTaskModule.NAME, _canOverrideExistingModule = false, _needsEagerInit = false,false, isTurboModule = true\n            )\n        )\n    }\n\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-10-02T02:24:52Z"
    },
    {
      "repository": "DeveloperRejaul/learn-android-with-react-native",
      "file": "android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "url": "https://github.com/DeveloperRejaul/learn-android-with-react-native/blob/35b58767374ef4eef54cf8ea2099229a35450f9e/android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "fileContent": "package com.nativelocalstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeLocalStoragePackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == NativeLocalStorageModule.NAME) {\n      NativeLocalStorageModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      NativeLocalStorageModule.NAME to ReactModuleInfo(\n        _name = NativeLocalStorageModule.NAME,\n        _className = NativeLocalStorageModule.NAME,\n        _canOverrideExistingModule = false,\n        _needsEagerInit = false,\n        isCxxModule = false,\n        isTurboModule = true\n      )\n    )\n  }\n}",
      "stars": 0,
      "lastCommitDate": "2024-11-24T18:45:37Z"
    },
    {
      "repository": "fathah/ceeps-react-native",
      "file": "android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "url": "https://github.com/fathah/ceeps-react-native/blob/22a0f1d4051d98b1d1a21513e6722fc43eafbd34/android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "fileContent": "package com.nativelocalstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeLocalStoragePackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == NativeLocalStorageModule.NAME) {\n      NativeLocalStorageModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      NativeLocalStorageModule.NAME to ReactModuleInfo(\n        _name = NativeLocalStorageModule.NAME,\n        _className = NativeLocalStorageModule.NAME,\n        _canOverrideExistingModule = false,\n        _needsEagerInit = false,\n        isCxxModule = false,\n        isTurboModule = true\n      )\n    )\n  }\n}",
      "stars": 0,
      "lastCommitDate": "2024-12-05T06:38:50Z"
    },
    {
      "repository": "neethanz/TurboModuleExample",
      "file": "android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "url": "https://github.com/neethanz/TurboModuleExample/blob/c4e019b3c978eb5cb1b6dbf1e66d59a42cb8e439/android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "fileContent": "package com.nativelocalstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeLocalStoragePackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == NativeLocalStorageModule.NAME) {\n      NativeLocalStorageModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      NativeLocalStorageModule.NAME to ReactModuleInfo(\n        _name = NativeLocalStorageModule.NAME,\n        _className = NativeLocalStorageModule.NAME,\n        _canOverrideExistingModule = false,\n        _needsEagerInit = false,\n        isCxxModule = false,\n        isTurboModule = true\n      )\n    )\n  }\n}",
      "stars": 0,
      "lastCommitDate": "2024-12-11T03:55:38Z"
    },
    {
      "repository": "pvinis/react-native---investigation",
      "file": "packages/react-native/ReactAndroid/src/test/java/com/facebook/react/modules/model/ReactModuleInfoTest.kt",
      "url": "https://github.com/pvinis/react-native---investigation/blob/932ede506d498f46b109795aba33fd06127b4600/packages/react-native/ReactAndroid/src/test/java/com/facebook/react/modules/model/ReactModuleInfoTest.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.modules.model\n\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.Test\n\nclass ReactModuleInfoTest {\n\n  @Test\n  fun testCreateReactModuleInfo() {\n    val reactModuleInfo =\n        ReactModuleInfo(\n            /* name = */ \"name\",\n            /* className = */ \"class\",\n            /* canOverrideExistingModule = */ false,\n            /* needsEagerInit = */ false,\n            /* isCxxModule = */ false,\n            /* isTurboModule = */ false)\n    assertThat(reactModuleInfo.name()).isEqualTo(\"name\")\n    assertThat(reactModuleInfo.canOverrideExistingModule()).isFalse()\n    assertThat(reactModuleInfo.needsEagerInit()).isFalse()\n    assertThat(reactModuleInfo.isCxxModule).isFalse()\n    assertThat(reactModuleInfo.isTurboModule).isFalse()\n  }\n\n  @Test\n  fun classIsTurboModule_withRandomClass() {\n    assertThat(ReactModuleInfo.classIsTurboModule(String::class.java)).isFalse()\n  }\n\n  @Test\n  fun classIsTurboModule_withTurboModule() {\n    assertThat(ReactModuleInfo.classIsTurboModule(TestTurboModule::class.java)).isTrue()\n  }\n\n  inner class TestTurboModule : TurboModule {\n    override fun initialize() = Unit\n\n    override fun invalidate() = Unit\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-18T20:11:40Z"
    },
    {
      "repository": "beanchips/facebookreactnative",
      "file": "packages/react-native/ReactAndroid/src/test/java/com/facebook/react/modules/model/ReactModuleInfoTest.kt",
      "url": "https://github.com/beanchips/facebookreactnative/blob/da6272106124376c94efde38177469a774fe0a40/packages/react-native/ReactAndroid/src/test/java/com/facebook/react/modules/model/ReactModuleInfoTest.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.modules.model\n\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.Test\n\nclass ReactModuleInfoTest {\n\n  @Test\n  fun testCreateReactModuleInfo() {\n    val reactModuleInfo =\n        ReactModuleInfo(\n            /* name = */ \"name\",\n            /* className = */ \"class\",\n            /* canOverrideExistingModule = */ false,\n            /* needsEagerInit = */ false,\n            /* isCxxModule = */ false,\n            /* isTurboModule = */ false)\n    assertThat(reactModuleInfo.name()).isEqualTo(\"name\")\n    assertThat(reactModuleInfo.canOverrideExistingModule()).isFalse()\n    assertThat(reactModuleInfo.needsEagerInit()).isFalse()\n    assertThat(reactModuleInfo.isCxxModule).isFalse()\n    assertThat(reactModuleInfo.isTurboModule).isFalse()\n  }\n\n  @Test\n  fun classIsTurboModule_withRandomClass() {\n    assertThat(ReactModuleInfo.classIsTurboModule(String::class.java)).isFalse()\n  }\n\n  @Test\n  fun classIsTurboModule_withTurboModule() {\n    assertThat(ReactModuleInfo.classIsTurboModule(TestTurboModule::class.java)).isTrue()\n  }\n\n  inner class TestTurboModule : TurboModule {\n    override fun initialize() = Unit\n\n    override fun invalidate() = Unit\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-18T23:14:02Z"
    },
    {
      "repository": "Maxdev18/powersync_app",
      "file": "packages/react-native/ReactAndroid/src/test/java/com/facebook/react/modules/model/ReactModuleInfoTest.kt",
      "url": "https://github.com/Maxdev18/powersync_app/blob/276520bb11d8e787b832e5ad3db9bed74444a4d3/packages/react-native/ReactAndroid/src/test/java/com/facebook/react/modules/model/ReactModuleInfoTest.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.modules.model\n\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.Test\n\nclass ReactModuleInfoTest {\n\n  @Test\n  fun testCreateReactModuleInfo() {\n    val reactModuleInfo =\n        ReactModuleInfo(\n            /* name = */ \"name\",\n            /* className = */ \"class\",\n            /* canOverrideExistingModule = */ false,\n            /* needsEagerInit = */ false,\n            /* isCxxModule = */ false,\n            /* isTurboModule = */ false)\n    assertThat(reactModuleInfo.name()).isEqualTo(\"name\")\n    assertThat(reactModuleInfo.canOverrideExistingModule()).isFalse()\n    assertThat(reactModuleInfo.needsEagerInit()).isFalse()\n    assertThat(reactModuleInfo.isCxxModule).isFalse()\n    assertThat(reactModuleInfo.isTurboModule).isFalse()\n  }\n\n  @Test\n  fun classIsTurboModule_withRandomClass() {\n    assertThat(ReactModuleInfo.classIsTurboModule(String::class.java)).isFalse()\n  }\n\n  @Test\n  fun classIsTurboModule_withTurboModule() {\n    assertThat(ReactModuleInfo.classIsTurboModule(TestTurboModule::class.java)).isTrue()\n  }\n\n  inner class TestTurboModule : TurboModule {\n    override fun initialize() = Unit\n\n    override fun invalidate() = Unit\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-14T03:05:21Z"
    },
    {
      "repository": "mattermost/mattermost-mobile",
      "file": "libraries/@mattermost/rnshare/android/src/main/java/com/mattermost/rnshare/MattermostSharePackage.kt",
      "url": "https://github.com/mattermost/mattermost-mobile/blob/32453b320c31ec98a8936b9d4192c41d90fd050a/libraries/@mattermost/rnshare/android/src/main/java/com/mattermost/rnshare/MattermostSharePackage.kt",
      "fileContent": "package com.mattermost.rnshare\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass MattermostSharePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == MattermostShareImpl.NAME) {\n      MattermostShareModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[MattermostShareImpl.NAME] = ReactModuleInfo(\n        MattermostShareImpl.NAME,\n        MattermostShareImpl.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2269,
      "lastCommitDate": "2024-12-19T08:45:03Z"
    },
    {
      "repository": "numandev1/react-native-compressor",
      "file": "android/src/main/java/com/reactnativecompressor/CompressorPackage.kt",
      "url": "https://github.com/numandev1/react-native-compressor/blob/bcbdd76f0ed1517deae6573a0d086809bd768b84/android/src/main/java/com/reactnativecompressor/CompressorPackage.kt",
      "fileContent": "package com.reactnativecompressor\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass CompressorPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == CompressorModule.NAME) {\n            CompressorModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[CompressorModule.NAME] = ReactModuleInfo(\n                    CompressorModule.NAME,\n                    CompressorModule.NAME,\n                    false,  // canOverrideExistingModule\n                    false,  // needsEagerInit\n                    true,  // hasConstants\n                    false,  // isCxxModule\n                    isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 964,
      "lastCommitDate": "2024-12-05T14:43:49Z"
    },
    {
      "repository": "braze-inc/braze-react-native-sdk",
      "file": "android/src/main/java/com/braze/reactbridge/BrazeReactBridgePackage.kt",
      "url": "https://github.com/braze-inc/braze-react-native-sdk/blob/74b185ab3b7fb3b3345b36ff24f2b255fb83f5de/android/src/main/java/com/braze/reactbridge/BrazeReactBridgePackage.kt",
      "fileContent": "package com.braze.reactbridge\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass BrazeReactBridgePackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == BrazeReactBridgeImpl.NAME) {\n            BrazeReactBridge(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[BrazeReactBridgeImpl.NAME] = ReactModuleInfo(\n                BrazeReactBridgeImpl.NAME,\n                BrazeReactBridgeImpl.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 64,
      "lastCommitDate": "2024-10-28T14:07:12Z"
    },
    {
      "repository": "mateusz1913/react-native-avoid-softinput",
      "file": "packages/react-native-avoid-softinput/android/src/main/java/com/reactnativeavoidsoftinput/AvoidSoftInputPackage.kt",
      "url": "https://github.com/mateusz1913/react-native-avoid-softinput/blob/3528976c7b598b9b106cc98c31522f6e8de8bfa7/packages/react-native-avoid-softinput/android/src/main/java/com/reactnativeavoidsoftinput/AvoidSoftInputPackage.kt",
      "fileContent": "package com.reactnativeavoidsoftinput\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass AvoidSoftInputPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            AvoidSoftInputModuleImpl.NAME -> AvoidSoftInputModule(reactContext)\n            else -> null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(AvoidSoftInputModule::class.java)\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(\n        reactContext: ReactApplicationContext\n    ): List<ViewManager<*, *>> {\n        return listOf(AvoidSoftInputViewManager())\n    }\n}\n",
      "stars": 720,
      "lastCommitDate": "2024-11-20T22:31:53Z"
    },
    {
      "repository": "hudl/react-native-system-bars",
      "file": "android/src/main/java/com/hudl/rn/systembars/AndroidSystemBarsPackage.kt",
      "url": "https://github.com/hudl/react-native-system-bars/blob/61340716e8f8eec2efbf3d837989f7889058a52d/android/src/main/java/com/hudl/rn/systembars/AndroidSystemBarsPackage.kt",
      "fileContent": "package com.hudl.rn.systembars\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass AndroidSystemBarsPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AndroidSystemBarsImpl.NAME) {\n      AndroidSystemBarsModule(reactContext)\n    } else null\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      hashMapOf(\n        AndroidSystemBarsImpl.NAME to ReactModuleInfo(\n          AndroidSystemBarsImpl.NAME,\n          AndroidSystemBarsImpl.NAME,\n          false,\n          false,\n          true,\n          false,\n          isTurboModule\n        )\n      )\n    }\n  }\n}\n",
      "stars": 39,
      "lastCommitDate": "2022-09-29T07:14:44Z"
    },
    {
      "repository": "gronxb/hot-updater",
      "file": "packages/react-native/android/src/main/java/com/hotupdater/HotUpdaterPackage.kt",
      "url": "https://github.com/gronxb/hot-updater/blob/26298f2392040ee9600286716262a1899fc5dc38/packages/react-native/android/src/main/java/com/hotupdater/HotUpdaterPackage.kt",
      "fileContent": "package com.hotupdater\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass HotUpdaterPackage : TurboReactPackage() {\n    override fun getModule(\n        name: String,\n        reactContext: ReactApplicationContext,\n    ): NativeModule? =\n        if (name == HotUpdaterModule.NAME) {\n            HotUpdaterModule(reactContext)\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n        ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[HotUpdaterModule.NAME] =\n                ReactModuleInfo(\n                    HotUpdaterModule.NAME,\n                    HotUpdaterModule.NAME,\n                    false, // canOverrideExistingModule\n                    false, // needsEagerInit\n                    true, // hasConstants\n                    false, // isCxxModule\n                    isTurboModule, // isTurboModule\n                )\n            moduleInfos\n        }\n}\n",
      "stars": 21,
      "lastCommitDate": "2024-12-04T10:51:47Z"
    },
    {
      "repository": "mrousavy/nitro",
      "file": "packages/react-native-nitro-modules/android/src/main/java/com/margelo/nitro/NitroModulesPackage.kt",
      "url": "https://github.com/mrousavy/nitro/blob/82ccff24bcd1ffd408d459609cc1fb94227c4023/packages/react-native-nitro-modules/android/src/main/java/com/margelo/nitro/NitroModulesPackage.kt",
      "fileContent": "package com.margelo.nitro\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NitroModulesPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NitroModules.NAME) {\n            NitroModules(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[NitroModules.NAME] = ReactModuleInfo(\n                NitroModules.NAME,\n                NitroModules.NAME,\n                canOverrideExistingModule = false,\n                needsEagerInit = false,\n                hasConstants = false,\n                isCxxModule = false,\n                isTurboModule = isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}",
      "stars": 731,
      "lastCommitDate": "2024-12-18T15:59:06Z"
    },
    {
      "repository": "jsonxr/example-react-native-plugin",
      "file": "android/src/main/java/com/example/ExamplePackage.kt",
      "url": "https://github.com/jsonxr/example-react-native-plugin/blob/1279ce10810a9e61cc8b8233feb6562b9fbf6184/android/src/main/java/com/example/ExamplePackage.kt",
      "fileContent": "package com.example;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass ExamplePackage : TurboReactPackage() {\n  override fun getModule(name: String?, reactContext: ReactApplicationContext): NativeModule? =\n  if (name == ExampleModule.NAME) {\n    ExampleModule(reactContext)\n  } else {\n    null\n  }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      ExampleModule.NAME to ReactModuleInfo(\n        ExampleModule.NAME,\n        ExampleModule.NAME,\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        true, // hasConstants\n        false, // isCxxModule\n        true // isTurboModule\n      )\n    )\n  }\n\n}",
      "stars": 0,
      "lastCommitDate": "2023-06-23T21:05:38Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-storage",
      "file": "packages/dropbox/android/src/main/java/com/openmobilehub/reactnative/storage/dropbox/StorageDropboxPackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-storage/blob/32252635fa01a80aa80a38a7a7a6203beebf2952/packages/dropbox/android/src/main/java/com/openmobilehub/reactnative/storage/dropbox/StorageDropboxPackage.kt",
      "fileContent": "package com.openmobilehub.reactnative.storage.dropbox\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass StorageDropboxPackage : TurboReactPackage() {\n  /**\n   * Initialize and export modules based on the name of the required module\n   */\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      StorageDropboxModule.NAME -> StorageDropboxModule(reactContext)\n      else -> null\n    }\n  }\n\n  /**\n   * Declare info about exported modules\n   */\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    /**\n     * Here declare the array of exported modules\n     */\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n      StorageDropboxModule::class.java,\n    )\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    /**\n     * And here just iterate on that array and produce the info provider instance\n     */\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n        ReactModuleInfo(\n          reactModule.name,\n          moduleClass.name,\n          true,\n          reactModule.needsEagerInit,\n          reactModule.hasConstants,\n          reactModule.isCxxModule,\n          TurboModule::class.java.isAssignableFrom(moduleClass)\n        )\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n}\n",
      "stars": 7,
      "lastCommitDate": "2024-10-28T12:32:53Z"
    },
    {
      "repository": "HimajaLekkala22/NxtChat2.18",
      "file": "android/app/src/main/java/com/mattermost/rnbeta/MainApplication.kt",
      "url": "https://github.com/HimajaLekkala22/NxtChat2.18/blob/6bc608440f0e610d1b2e7bcdd35fbe026193c318/android/app/src/main/java/com/mattermost/rnbeta/MainApplication.kt",
      "fileContent": "package com.mattermost.rnbeta\n\nimport android.content.Context\nimport android.os.Bundle\nimport android.util.Log\n\nimport com.facebook.react.PackageList\nimport com.facebook.react.ReactHost\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.JSIModulePackage\nimport com.facebook.react.bridge.JSIModuleSpec\nimport com.facebook.react.bridge.JavaScriptContextHolder\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultReactHost.getDefaultReactHost\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.flipper.ReactNativeFlipper\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.modules.network.OkHttpClientProvider\nimport com.facebook.soloader.SoLoader\n\nimport com.mattermost.helpers.RealPathUtil\nimport com.mattermost.networkclient.RCTOkHttpClientFactory\nimport com.mattermost.share.ShareModule\n\nimport com.nozbe.watermelondb.jsi.WatermelonDBJSIPackage\n\nimport com.reactnativenavigation.NavigationApplication\n\nimport com.wix.reactnativenotifications.RNNotificationsPackage\nimport com.wix.reactnativenotifications.core.AppLaunchHelper\nimport com.wix.reactnativenotifications.core.AppLifecycleFacade\nimport com.wix.reactnativenotifications.core.JsIOHelper\nimport com.wix.reactnativenotifications.core.notification.INotificationsApplication\nimport com.wix.reactnativenotifications.core.notification.IPushNotification\n\nimport java.io.File\n\nclass MainApplication : NavigationApplication(), INotificationsApplication {\n    var instance: MainApplication? = null\n    var sharedExtensionIsOpened = false\n\n    override val reactNativeHost: ReactNativeHost =\n        object : DefaultReactNativeHost(this) {\n            override fun getPackages(): List<ReactPackage> =\n                PackageList(this).packages.apply {\n                    // Packages that cannot be autolinked yet can be added manually here, for example:\n                    // add(MyReactNativePackage())\n                    add(RNNotificationsPackage(this@MainApplication))\n                    add(object : TurboReactPackage() {\n                        override fun getModule(\n                            name: String,\n                            reactContext: ReactApplicationContext\n                        ): NativeModule {\n                            return when (name) {\n                                \"MattermostManaged\" -> MattermostManagedModule.getInstance(\n                                    reactContext\n                                )\n                                \"MattermostShare\" -> ShareModule.getInstance(reactContext)\n                                \"Notifications\" -> NotificationsModule.getInstance(\n                                    instance,\n                                    reactContext\n                                )\n                                \"SplitView\" -> SplitViewModule.getInstance(\n                                    reactContext\n                                )\n                                else ->\n                                    throw IllegalArgumentException(\"Could not find module $name\")\n                            }\n                        }\n\n                        override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n                            return ReactModuleInfoProvider {\n                                val map: MutableMap<String, ReactModuleInfo> = java.util.HashMap()\n                                map[\"MattermostManaged\"] = ReactModuleInfo(\n                                    \"MattermostManaged\",\n                                    \"com.mattermost.rnbeta.MattermostManagedModule\",\n                                    false,\n                                    false,\n                                    false,\n                                    false\n                                )\n                                map[\"MattermostShare\"] = ReactModuleInfo(\n                                    \"MattermostShare\",\n                                    \"com.mattermost.share.ShareModule\",\n                                    false,\n                                    false,\n                                    false,\n                                    false\n                                )\n                                map[\"Notifications\"] = ReactModuleInfo(\n                                    \"Notifications\",\n                                    \"com.mattermost.rnbeta.NotificationsModule\",\n                                    false,\n                                    false,\n                                    false,\n                                    false\n                                )\n                                map[\"SplitView\"] = ReactModuleInfo(\n                                    \"SplitView\",\n                                    \"com.mattermost.rnbeta.SplitViewModule\",\n                                    false,\n                                    false,\n                                    false,\n                                    false\n                                )\n                                map\n                            }\n                        }\n                    })\n                }\n\n            override fun getJSIModulePackage(): JSIModulePackage {\n                return JSIModulePackage { reactApplicationContext: ReactApplicationContext?, jsContext: JavaScriptContextHolder? ->\n                    val modules =\n                        mutableListOf<JSIModuleSpec<*>>()\n                    modules.addAll(\n                        WatermelonDBJSIPackage().getJSIModules(\n                            reactApplicationContext,\n                            jsContext\n                        )\n                    )\n                    modules\n                }\n            }\n\n            override fun getJSMainModuleName(): String = \"index\"\n\n            override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n            override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED\n        }\n\n    override val reactHost: ReactHost\n        get() = getDefaultReactHost(this.applicationContext, reactNativeHost)\n\n    override fun onCreate() {\n        super.onCreate()\n        instance = this\n        val context: Context = applicationContext\n\n        // Delete any previous temp files created by the app\n        val tempFolder = File(context.cacheDir, RealPathUtil.CACHE_DIR_NAME)\n        RealPathUtil.deleteTempFiles(tempFolder)\n        Log.i(\"ReactNative\", \"Cleaning temp cache \" + tempFolder.absolutePath)\n\n        // Tells React Native to use our RCTOkHttpClientFactory which builds an OKHttpClient\n        // with a cookie jar defined in APIClientModule and an interceptor to intercept all\n        // requests that originate from React Native's OKHttpClient\n\n        // Tells React Native to use our RCTOkHttpClientFactory which builds an OKHttpClient\n        // with a cookie jar defined in APIClientModule and an interceptor to intercept all\n        // requests that originate from React Native's OKHttpClient\n        OkHttpClientProvider.setOkHttpClientFactory(RCTOkHttpClientFactory())\n\n        SoLoader.init(this, false)\n        if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n            // If you opted-in for the New Architecture, we load the native entry point for this app.\n            load()\n        }\n        ReactNativeFlipper.initializeFlipper(this, reactNativeHost.reactInstanceManager)\n    }\n\n    override fun getPushNotification(\n        context: Context?,\n        bundle: Bundle?,\n        defaultFacade: AppLifecycleFacade?,\n        defaultAppLaunchHelper: AppLaunchHelper?\n    ): IPushNotification {\n        return CustomPushNotification(\n            context!!,\n            bundle!!,\n            defaultFacade!!,\n            defaultAppLaunchHelper!!,\n            JsIOHelper()\n        )\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-07-05T11:59:23Z"
    },
    {
      "repository": "Notificare/notificare-sdk-react-native",
      "file": "packages/react-native-notificare-loyalty/android/src/main/java/re/notifica/loyalty/react_native/NotificareLoyaltyPackage.kt",
      "url": "https://github.com/Notificare/notificare-sdk-react-native/blob/8d9f7b299835b6b67050e1a1562e02b26e814b19/packages/react-native-notificare-loyalty/android/src/main/java/re/notifica/loyalty/react_native/NotificareLoyaltyPackage.kt",
      "fileContent": "package re.notifica.loyalty.react_native\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\npublic class NotificareLoyaltyPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NotificareLoyaltyModule.NAME) {\n            NotificareLoyaltyModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n            @Suppress(\"DEPRECATION\")\n            moduleInfos[NotificareLoyaltyModule.NAME] = ReactModuleInfo(\n                NotificareLoyaltyModule.NAME,\n                NotificareLoyaltyModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 6,
      "lastCommitDate": "2024-10-30T16:49:15Z"
    },
    {
      "repository": "gnanasurya2/all-in-one",
      "file": "client/android/app/src/main/java/com/nativereadsms/NativeReadSmsPackage.kt",
      "url": "https://github.com/gnanasurya2/all-in-one/blob/ef6e0d63da1565f6c0117233110262f8de2accf9/client/android/app/src/main/java/com/nativereadsms/NativeReadSmsPackage.kt",
      "fileContent": "package com.nativereadsms\r\n\r\nimport com.facebook.react.TurboReactPackage\r\nimport com.facebook.react.bridge.NativeModule\r\nimport com.facebook.react.bridge.ReactApplicationContext\r\nimport com.facebook.react.module.model.ReactModuleInfo\r\nimport com.facebook.react.module.model.ReactModuleInfoProvider\r\n\r\n\r\nclass NativeReadSmsPackage: TurboReactPackage() {\r\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\r\n        if(name == NativeReadSmsModule.NAME) {\r\n            NativeReadSmsModule(reactContext)\r\n        } else {\r\n            null\r\n        }\r\n\r\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\r\n        mapOf(\r\n            NativeReadSmsModule.NAME to ReactModuleInfo(\r\n                _name = NativeReadSmsModule.NAME,\r\n                _className = NativeReadSmsModule.NAME,\r\n                _canOverrideExistingModule = false,\r\n                _needsEagerInit = false,\r\n                isCxxModule = false,\r\n                isTurboModule = true\r\n            )\r\n        )\r\n    }\r\n}",
      "stars": 0,
      "lastCommitDate": "2024-11-11T13:27:35Z"
    },
    {
      "repository": "mateusz1913/rnbridgingtutorial",
      "file": "screen-orientation-package/android/src/main/java/com/screenorientationpackage/ScreenOrientationTurboPackage.kt",
      "url": "https://github.com/mateusz1913/rnbridgingtutorial/blob/5ffbcb451066cd43807337a3c1a42c26402a814f/screen-orientation-package/android/src/main/java/com/screenorientationpackage/ScreenOrientationTurboPackage.kt",
      "fileContent": "package com.screenorientationpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass ScreenOrientationTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        if (name == ScreenOrientationModule.NAME) {\n            return ScreenOrientationModule(reactContext)\n        }\n        return null\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            ScreenOrientationModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}\n",
      "stars": 70,
      "lastCommitDate": "2024-06-02T08:49:10Z"
    },
    {
      "repository": "mazenchami/advancedcontacts-cr2024",
      "file": "turbo-contacts/android/src/main/java/com/turbocontacts/TurboContactsPackage.kt",
      "url": "https://github.com/mazenchami/advancedcontacts-cr2024/blob/e74cdfdf4d1bec65bb933ac02b4deb00f4407683/turbo-contacts/android/src/main/java/com/turbocontacts/TurboContactsPackage.kt",
      "fileContent": "package com.turbocontacts;\n\nimport com.facebook.react.TurboReactPackage;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider;\n\nclass TurboContactsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TurboContactsModule.NAME) {\n      TurboContactsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      TurboContactsModule.NAME to ReactModuleInfo(\n        TurboContactsModule.NAME,\n        TurboContactsModule.NAME,\n        false,\n        false,\n        true,\n        false,\n        true\n      )\n    )\n  }\n}",
      "stars": 2,
      "lastCommitDate": "2024-07-18T01:20:08Z"
    },
    {
      "repository": "2lambda123/react-native",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "url": "https://github.com/2lambda123/react-native/blob/cfb4129e2ef494126ae54b1265c8e2ecd68cadb0/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.app.Application\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.JSEngineResolutionAlgorithm\nimport com.facebook.react.ReactApplication\nimport com.facebook.react.ReactHost\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.annotations.UnstableReactNativeAPI\nimport com.facebook.react.common.assets.ReactFontManager\nimport com.facebook.react.common.mapbuffer.ReadableMapBuffer\nimport com.facebook.react.config.ReactFeatureFlags\nimport com.facebook.react.defaults.DefaultComponentsRegistry.Companion.register\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.fabric.ComponentFactory\nimport com.facebook.react.flipper.ReactNativeFlipper.initializeFlipper\nimport com.facebook.react.interfaces.exceptionmanager.ReactJsExceptionHandler\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.runtime.ReactHostImpl\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.soloader.SoLoader\n\nclass RNTesterApplication : Application(), ReactApplication {\n  override val reactNativeHost: ReactNativeHost by lazy {\n    if (ReactFeatureFlags.enableBridgelessArchitecture) {\n      throw RuntimeException(\"Should not use ReactNativeHost when Bridgeless enabled\")\n    }\n    object : DefaultReactNativeHost(this) {\n      public override fun getJSMainModuleName(): String = \"js/RNTesterApp.android\"\n\n      public override fun getBundleAssetName(): String = \"RNTesterApp.android.bundle\"\n\n      override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n      public override fun getPackages(): List<ReactPackage> {\n        return listOf(\n            MainReactPackage(),\n            object : TurboReactPackage() {\n              override fun getModule(\n                  name: String,\n                  reactContext: ReactApplicationContext\n              ): NativeModule? {\n                if (!ReactFeatureFlags.useTurboModules) {\n                  return null\n                }\n                if (SampleTurboModule.NAME == name) {\n                  return SampleTurboModule(reactContext)\n                }\n                if (SampleLegacyModule.NAME == name) {\n                  return SampleLegacyModule(reactContext)\n                }\n                return null\n              }\n\n              // Note: Specialized annotation processor for @ReactModule isn't configured in OSS\n              // yet. For now, hardcode this information, though it's not necessary for most\n              // modules.\n              override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n                  ReactModuleInfoProvider {\n                    if (ReactFeatureFlags.useTurboModules) {\n                      mapOf(\n                          SampleTurboModule.NAME to\n                              ReactModuleInfo(\n                                  SampleTurboModule.NAME,\n                                  \"SampleTurboModule\",\n                                  false, // canOverrideExistingModule\n                                  false, // needsEagerInit\n                                  false, // isCxxModule\n                                  true // isTurboModule\n                                  ),\n                          SampleLegacyModule.NAME to\n                              ReactModuleInfo(\n                                  SampleLegacyModule.NAME,\n                                  \"SampleLegacyModule\",\n                                  false, // canOverrideExistingModule\n                                  false, // needsEagerInit\n                                  false, // isCxxModule\n                                  false // isTurboModule\n                                  ))\n                    } else {\n                      emptyMap()\n                    }\n                  }\n            },\n            object : ReactPackage {\n              override fun createNativeModules(\n                  reactContext: ReactApplicationContext\n              ): List<NativeModule> {\n                return emptyList()\n              }\n\n              override fun createViewManagers(\n                  reactContext: ReactApplicationContext\n              ): List<ViewManager<*, *>> =\n                  listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n            })\n      }\n\n      override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED_IN_FLAVOR\n    }\n  }\n\n  override fun onCreate() {\n    ReactFontManager.getInstance().addCustomFont(this, \"Rubik\", R.font.rubik)\n    super.onCreate()\n    SoLoader.init(this, /* native exopackage */ false)\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      load()\n    }\n    initializeFlipper(this, reactNativeHost.reactInstanceManager)\n  }\n\n  @UnstableReactNativeAPI\n  override val reactHost: ReactHost by lazy {\n    // Create an instance of ReactHost to manager the instance of ReactInstance,\n    // which is similar to how we use ReactNativeHost to manager instance of ReactInstanceManager\n    val reactHostDelegate = RNTesterReactHostDelegate(applicationContext)\n    val reactJsExceptionHandler = RNTesterReactJsExceptionHandler()\n    val componentFactory = ComponentFactory()\n    register(componentFactory)\n    ReactHostImpl(\n            this.applicationContext,\n            reactHostDelegate,\n            componentFactory,\n            true,\n            reactJsExceptionHandler,\n            true)\n        .apply {\n          jsEngineResolutionAlgorithm =\n              if (BuildConfig.IS_HERMES_ENABLED_IN_FLAVOR) {\n                JSEngineResolutionAlgorithm.HERMES\n              } else {\n                JSEngineResolutionAlgorithm.JSC\n              }\n          reactHostDelegate.reactHost = this\n        }\n  }\n\n  @UnstableReactNativeAPI\n  class RNTesterReactJsExceptionHandler : ReactJsExceptionHandler {\n    override fun reportJsException(errorMap: ReadableMapBuffer?) {}\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-04-12T10:43:52Z"
    },
    {
      "repository": "nativeframe/react-native-native-frame",
      "file": "android/src/main/java/com/nativeframe/NativeFramePackage.kt",
      "url": "https://github.com/nativeframe/react-native-native-frame/blob/f79ec66c32fdaf3350123a9a3b1e90f3ce1968f9/android/src/main/java/com/nativeframe/NativeFramePackage.kt",
      "fileContent": "package com.nativeframe\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass NativeFramePackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == NativeFrameModule.NAME) {\n      NativeFrameModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[NativeFrameModule.NAME] = ReactModuleInfo(\n        NativeFrameModule.NAME,\n        NativeFrameModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-12T02:45:47Z"
    },
    {
      "repository": "Francesco-Voto/react-native-security-checks",
      "file": "android/src/main/java/com/securitychecks/SecurityChecksPackage.kt",
      "url": "https://github.com/Francesco-Voto/react-native-security-checks/blob/dd958bbd371686b511cd1b3d836b5ac9b065c761/android/src/main/java/com/securitychecks/SecurityChecksPackage.kt",
      "fileContent": "package com.securitychecks\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass SecurityChecksPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == SecurityChecksModule.NAME) {\n      SecurityChecksModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[SecurityChecksModule.NAME] = ReactModuleInfo(\n        SecurityChecksModule.NAME,\n        SecurityChecksModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-04T11:29:45Z"
    },
    {
      "repository": "cristiangu/react-native-app-badge",
      "file": "android/src/main/java/com/appbadge/AppBadgePackage.kt",
      "url": "https://github.com/cristiangu/react-native-app-badge/blob/11592dbe29749c46279e78a6565b82cd2cf30c04/android/src/main/java/com/appbadge/AppBadgePackage.kt",
      "fileContent": "package com.appbadge\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AppBadgePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AppBadgeModule.NAME) {\n      AppBadgeModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AppBadgeModule.NAME] = ReactModuleInfo(\n        AppBadgeModule.NAME,\n        AppBadgeModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-03-18T16:35:17Z"
    },
    {
      "repository": "derekrsargent/react-native-keyboard-manager",
      "file": "android/src/main/java/com/keyboardmanager/KeyboardManagerPackage.kt",
      "url": "https://github.com/derekrsargent/react-native-keyboard-manager/blob/bf68cb5cd3a1e561ab8490a5aec87cb84bd92007/android/src/main/java/com/keyboardmanager/KeyboardManagerPackage.kt",
      "fileContent": "package com.keyboardmanager\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass KeyboardManagerPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == KeyboardManagerModule.NAME) {\n      KeyboardManagerModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[KeyboardManagerModule.NAME] = ReactModuleInfo(\n        KeyboardManagerModule.NAME,\n        KeyboardManagerModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2023-05-18T23:18:54Z"
    },
    {
      "repository": "Amsterdam/amsterdam-app-frontend",
      "file": "react-native-block-screenshot/android/src/main/java/com/blockscreenshot/BlockScreenshotPackage.kt",
      "url": "https://github.com/Amsterdam/amsterdam-app-frontend/blob/ae916496f4c8446b1508448c6a2175ac6c7774a3/react-native-block-screenshot/android/src/main/java/com/blockscreenshot/BlockScreenshotPackage.kt",
      "fileContent": "package com.blockscreenshot\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass BlockScreenshotPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == BlockScreenshotModule.NAME) {\n      BlockScreenshotModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[BlockScreenshotModule.NAME] = ReactModuleInfo(\n        BlockScreenshotModule.NAME,\n        BlockScreenshotModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 8,
      "lastCommitDate": "2024-12-17T15:16:39Z"
    },
    {
      "repository": "qwreey/pendroid",
      "file": "app/android/app/src/main/java/com/pendroid/motionview/MotionViewPackage.kt",
      "url": "https://github.com/qwreey/pendroid/blob/0af679dd06276db897d7cd5b224082983a71fa31/app/android/app/src/main/java/com/pendroid/motionview/MotionViewPackage.kt",
      "fileContent": "package com.pendroid.motionview\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\nclass MotionViewPackage : TurboReactPackage() {\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        return listOf(MotionViewManager(reactContext))\n    }\n\n    override fun getModule(s: String, reactApplicationContext: ReactApplicationContext): NativeModule? {\n        when (s) {\n            MotionViewManager.REACT_CLASS -> MotionViewManager(reactApplicationContext)\n        }\n        return null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider = ReactModuleInfoProvider {\n        mapOf(\n            MotionViewManager.REACT_CLASS to ReactModuleInfo(\n                _name = MotionViewManager.REACT_CLASS,\n                _className = MotionViewManager.REACT_CLASS,\n                _canOverrideExistingModule = false,\n                _needsEagerInit = false,\n                isCxxModule = false,\n                isTurboModule = true,\n            )\n        )\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-02T01:45:15Z"
    },
    {
      "repository": "Notificare/notificare-sdk-react-native",
      "file": "packages/react-native-notificare-push/android/src/main/java/re/notifica/push/react_native/NotificarePushPackage.kt",
      "url": "https://github.com/Notificare/notificare-sdk-react-native/blob/8d9f7b299835b6b67050e1a1562e02b26e814b19/packages/react-native-notificare-push/android/src/main/java/re/notifica/push/react_native/NotificarePushPackage.kt",
      "fileContent": "package re.notifica.push.react_native\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\npublic class NotificarePushPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NotificarePushModule.NAME) {\n            NotificarePushModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n            @Suppress(\"DEPRECATION\")\n            moduleInfos[NotificarePushModule.NAME] = ReactModuleInfo(\n                NotificarePushModule.NAME,\n                NotificarePushModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 6,
      "lastCommitDate": "2024-10-30T16:49:15Z"
    },
    {
      "repository": "atlj/react-native-golden-template",
      "file": "android/src/main/java/com/goldentemplate/GoldenTemplatePackage.kt",
      "url": "https://github.com/atlj/react-native-golden-template/blob/58a6ce1cc12920a3bd3e7c96867f3960db008279/android/src/main/java/com/goldentemplate/GoldenTemplatePackage.kt",
      "fileContent": "package com.goldentemplate\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.uimanager.ViewManager\nimport java.util.HashMap\n\nclass GoldenTemplatePackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == GoldenTemplateModule.NAME) {\n      GoldenTemplateModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[GoldenTemplateModule.NAME] = ReactModuleInfo(\n        GoldenTemplateModule.NAME,\n        GoldenTemplateModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return mutableListOf(GoldenTemplateViewManager());\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-06-13T16:32:31Z"
    },
    {
      "repository": "scantarbian/react-native-zebra-linkos",
      "file": "android/src/main/java/com/zebralinkos/ZebraLinkosPackage.kt",
      "url": "https://github.com/scantarbian/react-native-zebra-linkos/blob/4fc598e1d11f526b6cc9e12bae4c4ea76c51cd52/android/src/main/java/com/zebralinkos/ZebraLinkosPackage.kt",
      "fileContent": "package com.zebralinkos\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass ZebraLinkosPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ZebraLinkosModule.NAME) {\n      ZebraLinkosModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ZebraLinkosModule.NAME] =\n              ReactModuleInfo(\n                      ZebraLinkosModule.NAME,\n                      ZebraLinkosModule.NAME,\n                      false, // canOverrideExistingModule\n                      false, // needsEagerInit\n                      true, // hasConstants\n                      false, // isCxxModule\n                      isTurboModule // isTurboModule\n              )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-09T12:04:14Z"
    },
    {
      "repository": "layerinfinity/react-native-matrix-universal-sdk",
      "file": "android/src/main/java/com/layerinfinity/matrixuniversalsdk/MatrixUniversalSdkPackage.kt",
      "url": "https://github.com/layerinfinity/react-native-matrix-universal-sdk/blob/f3b95cf6b821c9c4a5355b1ef9f17659b73391fa/android/src/main/java/com/layerinfinity/matrixuniversalsdk/MatrixUniversalSdkPackage.kt",
      "fileContent": "package com.layerinfinity.matrixuniversalsdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass MatrixUniversalSdkPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    val eventEmitter = RNEventEmitter(reactContext)\n    val observers = MatrixTimelineObservers(eventEmitter)\n\n    return if (name == MatrixUniversalSdkModule.NAME) {\n      MatrixUniversalSdkModule(reactContext, eventEmitter, observers)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[MatrixUniversalSdkModule.NAME] = ReactModuleInfo(\n        MatrixUniversalSdkModule.NAME,\n        MatrixUniversalSdkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2023-09-11T07:30:09Z"
    },
    {
      "repository": "duguyihou/react-native-turbo-network",
      "file": "android/src/main/java/com/turbonetwork/TurboNetworkPackage.kt",
      "url": "https://github.com/duguyihou/react-native-turbo-network/blob/1d78a976b6e349e2611dc2a46ccdcbf7930f3e4a/android/src/main/java/com/turbonetwork/TurboNetworkPackage.kt",
      "fileContent": "package com.turbonetwork\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass TurboNetworkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TurboNetworkModule.NAME) {\n      TurboNetworkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[TurboNetworkModule.NAME] = ReactModuleInfo(\n        TurboNetworkModule.NAME,\n        TurboNetworkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-08-23T21:45:31Z"
    },
    {
      "repository": "mattermost/react-native-turbo-log",
      "file": "android/src/main/java/com/mattermost/turbolog/RNTurboLogPackage.kt",
      "url": "https://github.com/mattermost/react-native-turbo-log/blob/4bfa69e711faac12599909adf8f9618f7e2b401c/android/src/main/java/com/mattermost/turbolog/RNTurboLogPackage.kt",
      "fileContent": "package com.mattermost.turbolog\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nclass RNTurboLogPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == RNTurboLogModuleImpl.NAME) {\n      RNTurboLogModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      RNTurboLogModuleImpl.NAME to ReactModuleInfo(\n        RNTurboLogModuleImpl.NAME,\n        RNTurboLogModuleImpl.NAME,\n        false,\n        false,\n        false,\n        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      )\n    )\n  }\n}\n\n",
      "stars": 7,
      "lastCommitDate": "2024-12-17T11:07:19Z"
    },
    {
      "repository": "astrapay/qris-sdk-reactnative",
      "file": "android/src/main/java/com/qrissdkreactnative/QrisSdkReactnativePackage.kt",
      "url": "https://github.com/astrapay/qris-sdk-reactnative/blob/b67f32979aaf3c096612fa4fc3096ca3e7760d79/android/src/main/java/com/qrissdkreactnative/QrisSdkReactnativePackage.kt",
      "fileContent": "package com.qrissdkreactnative\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass QrisSdkReactnativePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == QrisSdkReactnativeModule.NAME) {\n      QrisSdkReactnativeModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[QrisSdkReactnativeModule.NAME] = ReactModuleInfo(\n        QrisSdkReactnativeModule.NAME,\n        QrisSdkReactnativeModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-05T03:39:45Z"
    },
    {
      "repository": "MateWW/react-native-new-arch-monorepo",
      "file": "packages/example-module/android/src/main/java/com/examplemodule/ExampleModulePackage.kt",
      "url": "https://github.com/MateWW/react-native-new-arch-monorepo/blob/f72e0be5e78e8b7c1b610cd6941464a5632ad40a/packages/example-module/android/src/main/java/com/examplemodule/ExampleModulePackage.kt",
      "fileContent": "package com.examplemodule\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ExampleModulePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ExampleModuleModule.NAME) {\n      ExampleModuleModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ExampleModuleModule.NAME] = ReactModuleInfo(\n        ExampleModuleModule.NAME,\n        ExampleModuleModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-01-30T18:25:11Z"
    },
    {
      "repository": "qbs-Jiju/sslpinning",
      "file": "android/src/main/java/com/sslpinning/SslpinningPackage.kt",
      "url": "https://github.com/qbs-Jiju/sslpinning/blob/9013c17ff8134b0743d7b9b5a5bcfbe82c8e53d5/android/src/main/java/com/sslpinning/SslpinningPackage.kt",
      "fileContent": "package com.sslpinning\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass SslpinningPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == RNSslPinningImpl.NAME) SslpinningModule(reactContext) else null\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNSslPinningImpl.NAME] = ReactModuleInfo(\n        RNSslPinningImpl.NAME,\n        RNSslPinningImpl.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n//        true,  // hasConstants --depreacted\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-06T10:02:27Z"
    },
    {
      "repository": "DeveloperRejaul/learn-android-with-react-native",
      "file": "android/app/src/main/java/com/webview/ReactWebView.kt",
      "url": "https://github.com/DeveloperRejaul/learn-android-with-react-native/blob/35b58767374ef4eef54cf8ea2099229a35450f9e/android/app/src/main/java/com/webview/ReactWebView.kt",
      "fileContent": "package com.webview\n\nimport android.content.Context\nimport android.util.AttributeSet\nimport android.webkit.WebView\nimport android.webkit.WebViewClient\nimport com.facebook.react.bridge.Arguments\nimport com.facebook.react.bridge.WritableMap\nimport com.facebook.react.bridge.ReactContext\nimport com.facebook.react.uimanager.UIManagerHelper\nimport com.facebook.react.uimanager.events.Event\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\n\nclass ReactWebView: WebView {\n    constructor(context: Context) : super(context) {\n        configureComponent()\n    }\n\n    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {\n        configureComponent()\n    }\n\n    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {\n        configureComponent()\n    }\n\n    private fun configureComponent() {\n        this.layoutParams = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)\n        this.webViewClient = object : WebViewClient() {\n            override fun onPageFinished(view: WebView, url: String) {\n                emitOnScriptLoaded(OnScriptLoadedEventResult.success)\n            }\n        }\n    }\n\n    fun emitOnScriptLoaded(result: OnScriptLoadedEventResult) {\n        val reactContext = context as ReactContext\n        val surfaceId = UIManagerHelper.getSurfaceId(reactContext)\n        val eventDispatcher = UIManagerHelper.getEventDispatcherForReactTag(reactContext, id)\n        val payload =\n            Arguments.createMap().apply {\n                putString(\"result\", result.name)\n            }\n        val event = OnScriptLoadedEvent(surfaceId, id, payload)\n\n        eventDispatcher?.dispatchEvent(event)\n    }\n\n    enum class OnScriptLoadedEventResult() {\n        success(),\n        error()\n    }\n\n    inner class OnScriptLoadedEvent(\n        surfaceId: Int,\n        viewId: Int,\n        private val payload: WritableMap\n    ) : Event<OnScriptLoadedEvent>(surfaceId, viewId) {\n        override fun getEventName() = \"onScriptLoaded\"\n\n        override fun getEventData() = payload\n    }\n}\n\nclass ReactWebViewPackage : TurboReactPackage() {\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        return listOf(ReactWebViewManager(reactContext))\n    }\n\n    override fun getModule(s: String, reactApplicationContext: ReactApplicationContext): NativeModule? {\n        when (s) {\n            ReactWebViewManager.REACT_CLASS -> ReactWebViewManager(reactApplicationContext)\n        }\n        return null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider = ReactModuleInfoProvider {\n        mapOf(ReactWebViewManager.REACT_CLASS to ReactModuleInfo(\n            _name = ReactWebViewManager.REACT_CLASS,\n            _className = ReactWebViewManager.REACT_CLASS,\n            _canOverrideExistingModule = false,\n            _needsEagerInit = false,\n            isCxxModule = false,\n            isTurboModule = true,\n        )\n        )\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-11-24T18:45:37Z"
    },
    {
      "repository": "kruyvanna/react-native-zk-fingerprint-scanner",
      "file": "android/src/main/java/com/fingerprintscanner/FingerprintScannerPackage.kt",
      "url": "https://github.com/kruyvanna/react-native-zk-fingerprint-scanner/blob/04d3f7aab1fe882d8db4bcd8fe5426103c929864/android/src/main/java/com/fingerprintscanner/FingerprintScannerPackage.kt",
      "fileContent": "package com.fingerprintscanner\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass FingerprintScannerPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == FingerprintScannerModule.NAME) {\n      FingerprintScannerModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[FingerprintScannerModule.NAME] = ReactModuleInfo(\n        FingerprintScannerModule.NAME,\n        FingerprintScannerModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-01-08T09:12:56Z"
    },
    {
      "repository": "Ugur-Atakan/android-step-counter-module",
      "file": "android/app/src/main/java/com/blokfield/cryptohunter/StepCounterPackage.kt",
      "url": "https://github.com/Ugur-Atakan/android-step-counter-module/blob/efd7b6cfb75299619036c2fdad4312091e0ce027/android/app/src/main/java/com/blokfield/cryptohunter/StepCounterPackage.kt",
      "fileContent": "package com.blokfield.cryptohunter\n\nimport blokfield.cryptohunter.StepCounterModule\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\n/**\n * This class is responsible for the creation of the ReactNative package.\n * @see com.facebook.react.ReactPackage\n * @see TurboReactPackage\n * @see ReactApplicationContext\n * @see ReactModuleInfo\n * @see ReactModuleInfoProvider\n */\nclass StepCounterPackage : TurboReactPackage() {\n    /**\n     * This method is responsible for the creation of the ReactNative module.\n     * @param name The name of the module\n     * @param reactContext The context of the react-native application\n     * @return [com.facebook.react.module.model.ReactModuleInfo] ]The ReactNative module\n     * @see NativeModule\n     * @see ReactApplicationContext\n     * @see StepCounterModule\n     * @see StepCounterModule.NAME\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == StepCounterModule.NAME) StepCounterModule(reactContext) else null\n    }\n\n    /**\n     * This method is responsible for the creation of the ReactNative module info provider.\n     * @return The ReactNative module info provider\n     * @see ReactModuleInfoProvider\n     * @see ReactModuleInfo\n     * @see BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n     * @see ReactModuleInfo.mCanOverrideExistingModule\n     * @see ReactModuleInfo.mNeedsEagerInit\n     * @see ReactModuleInfo.mHasConstants\n     * @see ReactModuleInfo.mIsCxxModule\n     * @see ReactModuleInfo.mIsTurboModule\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfo: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfo[StepCounterModule.NAME] = ReactModuleInfo(\n                    StepCounterModule.NAME,\n                    StepCounterModule.NAME,\n                    false, // canOverrideExistingModule\n                    false, // needsEagerInit\n                    true, // hasConstants\n                    false, // isCxxModule\n                    isTurboModule // isTurboModule\n            )\n            moduleInfo\n        }\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-05-22T12:05:24Z"
    },
    {
      "repository": "sh4hzaib/rn-native-modules",
      "file": "modules/calcultaor-module/android/src/main/java/com/calcultaormodule/CalcultaorModulePackage.kt",
      "url": "https://github.com/sh4hzaib/rn-native-modules/blob/8a2e42adc5b6935991fcde38c7dfedb7a4fdc21e/modules/calcultaor-module/android/src/main/java/com/calcultaormodule/CalcultaorModulePackage.kt",
      "fileContent": "package com.calcultaormodule\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass CalcultaorModulePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == CalcultaorModuleModule.NAME) {\n      CalcultaorModuleModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[CalcultaorModuleModule.NAME] = ReactModuleInfo(\n        CalcultaorModuleModule.NAME,\n        CalcultaorModuleModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-07-14T13:29:35Z"
    },
    {
      "repository": "j-piasecki/react-native-spatial-sdk",
      "file": "android/src/main/java/com/jpiasecki/spatialsdk/SpatialSdkPackage.kt",
      "url": "https://github.com/j-piasecki/react-native-spatial-sdk/blob/b1b15e35935e24f1b70a790beca04710285860ee/android/src/main/java/com/jpiasecki/spatialsdk/SpatialSdkPackage.kt",
      "fileContent": "package com.jpiasecki.spatialsdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\nclass SpatialSdkPackage : TurboReactPackage() {\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> =\n    listOf(\n      PanelViewManager(),\n      GrabbableViewManager(),\n      BoxViewManager(),\n      MaterialViewManager(),\n      ScaleViewManager(),\n      MeshViewManager(),\n    )\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == PanelModule.NAME) {\n      PanelModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      PanelModule.NAME to ReactModuleInfo(\n        PanelModule.NAME,\n        PanelModule.NAME,\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        false, // isCxxModule\n        true, // isTurboModule\n      ),\n    )\n  }\n}\n",
      "stars": 7,
      "lastCommitDate": "2024-10-06T17:03:38Z"
    },
    {
      "repository": "batuhanoztrk/rn-screenshot-prevent",
      "file": "android/src/main/java/com/screenshotprevent/ScreenshotPreventPackage.kt",
      "url": "https://github.com/batuhanoztrk/rn-screenshot-prevent/blob/78f1813f8d2f605f3c28e9ffa75b07852d61ab9c/android/src/main/java/com/screenshotprevent/ScreenshotPreventPackage.kt",
      "fileContent": "package com.screenshotprevent\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ScreenshotPreventPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ScreenshotPreventModule.NAME) {\n      ScreenshotPreventModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ScreenshotPreventModule.NAME] = ReactModuleInfo(\n        ScreenshotPreventModule.NAME,\n        ScreenshotPreventModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-21T22:03:21Z"
    },
    {
      "repository": "MurRuck/Hannam-University-helper-Project",
      "file": "android/app/src/main/assets/custom/SafeAreaContextPackage.kt",
      "url": "https://github.com/MurRuck/Hannam-University-helper-Project/blob/5ff89a4c4d75579f24ad9e6fe870323b5976fc58/android/app/src/main/assets/custom/SafeAreaContextPackage.kt",
      "fileContent": "package com.th3rdwave.safeareacontext\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\n// Fool autolinking for older versions that do not support TurboReactPackage.\n// public class SafeAreaContextPackage implements ReactPackage {\nclass SafeAreaContextPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      SafeAreaContextModule.NAME -> SafeAreaContextModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(SafeAreaContextModule::class.java)\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n          ReactModuleInfo(\n              reactModule.name,\n              moduleClass.name,\n              true,\n              reactModule.needsEagerInit,\n              /** TODO remove the parameter once support for RN < 0.73 is dropped */\n              reactModule.hasConstants,\n              reactModule.isCxxModule,\n              BuildConfig.IS_NEW_ARCHITECTURE_ENABLED)\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf<ViewManager<*, *>>(SafeAreaProviderManager(), SafeAreaViewManager())\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-10-16T10:25:45Z"
    },
    {
      "repository": "orkunkarakus/react-native-qr",
      "file": "android/src/main/java/com/qr/QrPackage.kt",
      "url": "https://github.com/orkunkarakus/react-native-qr/blob/600986addad05599c98d46c6a04f32a82538c61f/android/src/main/java/com/qr/QrPackage.kt",
      "fileContent": "package com.qr\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass QrPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == QrModule.NAME) {\n      QrModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[QrModule.NAME] = ReactModuleInfo(\n        QrModule.NAME,\n        QrModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-08-28T10:52:16Z"
    },
    {
      "repository": "nipatiitti/react-native-qupid",
      "file": "android/src/main/java/com/qupid/QupidPackage.kt",
      "url": "https://github.com/nipatiitti/react-native-qupid/blob/19b113db6c49ec72a38a145f7a3197899e0152d1/android/src/main/java/com/qupid/QupidPackage.kt",
      "fileContent": "package com.qupid\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass QupidPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == QupidModule.NAME) {\n      QupidModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[QupidModule.NAME] = ReactModuleInfo(\n        QupidModule.NAME,\n        QupidModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-05-05T06:51:50Z"
    },
    {
      "repository": "Black-Ink-Technologies/bit-chainit-mobile-libs",
      "file": "android/src/main/java/com/bitauth/mobile/MobilePackage.kt",
      "url": "https://github.com/Black-Ink-Technologies/bit-chainit-mobile-libs/blob/6e0d1494f62b2eedf534fdac6aa89a2c6c7d981f/android/src/main/java/com/bitauth/mobile/MobilePackage.kt",
      "fileContent": "package com.bitauth.mobile\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass MobilePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == MobileModule.NAME) {\n      MobileModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[MobileModule.NAME] = ReactModuleInfo(\n        MobileModule.NAME,\n        MobileModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-06-04T11:58:07Z"
    },
    {
      "repository": "kamilkedzierski/rnbutil-test",
      "file": "android/src/main/java/com/rnblobutiltest/RnblobUtilTestPackage.kt",
      "url": "https://github.com/kamilkedzierski/rnbutil-test/blob/54bce5fc10440fa719afdc3c0915814d33509221/android/src/main/java/com/rnblobutiltest/RnblobUtilTestPackage.kt",
      "fileContent": "package com.rnblobutiltest\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnblobUtilTestPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnblobUtilTestModule.NAME) {\n      RnblobUtilTestModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnblobUtilTestModule.NAME] = ReactModuleInfo(\n        RnblobUtilTestModule.NAME,\n        RnblobUtilTestModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-08-07T06:57:59Z"
    },
    {
      "repository": "Ugur-Atakan/react-native-step-counter-improved",
      "file": "android/src/main/java/com/stepcounter/StepCounterPackage.kt",
      "url": "https://github.com/Ugur-Atakan/react-native-step-counter-improved/blob/3df216a551d403aa9065f56246f3703414a6637f/android/src/main/java/com/stepcounter/StepCounterPackage.kt",
      "fileContent": "package com.stepcounter\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\n\nclass StepCounterPackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == StepCounterModule.NAME) StepCounterModule(reactContext) else null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfo: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfo[StepCounterModule.NAME] = ReactModuleInfo(\n                StepCounterModule.NAME,\n                StepCounterModule.NAME,\n                false, // canOverrideExistingModule\n                false, // needsEagerInit\n                true, // hasConstants\n                false, // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfo\n        }\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-01-28T11:55:40Z"
    },
    {
      "repository": "mateusz1913/rnbridgingtutorial",
      "file": "native-list-package/android/src/main/java/com/nativelistpackage/NativeListTurboPackage.kt",
      "url": "https://github.com/mateusz1913/rnbridgingtutorial/blob/5ffbcb451066cd43807337a3c1a42c26402a814f/native-list-package/android/src/main/java/com/nativelistpackage/NativeListTurboPackage.kt",
      "fileContent": "package com.nativelistpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass NativeListTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return null\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf(AndroidNativeListViewManager())\n    }\n}\n",
      "stars": 70,
      "lastCommitDate": "2024-06-02T08:49:10Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-maps",
      "file": "packages/plugin-mapbox/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/mapbox/RNOmhMapsPluginMapboxPackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-maps/blob/c2b6ec914b917d2dfdc5f58cb93dbefa49c5bb53/packages/plugin-mapbox/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/mapbox/RNOmhMapsPluginMapboxPackage.kt",
      "fileContent": "package com.openmobilehub.android.rn.maps.plugin.mapbox\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass OmhMapsPluginMapboxTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            RNOmhMapsPluginMapboxModule.NAME -> RNOmhMapsPluginMapboxModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            RNOmhMapsPluginMapboxModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf()\n    }\n}\n",
      "stars": 25,
      "lastCommitDate": "2024-10-25T10:35:38Z"
    },
    {
      "repository": "NiuGuohui/rn0.74-rootviewBug",
      "file": "modules/RTNNativeUI/android/src/main/kotlin/com/fuulea/nativeui/NativeUIPackage.kt",
      "url": "https://github.com/NiuGuohui/rn0.74-rootviewBug/blob/0e7522d3abf2af3e25fe78d90e48a333b770563d/modules/RTNNativeUI/android/src/main/kotlin/com/fuulea/nativeui/NativeUIPackage.kt",
      "fileContent": "package com.fuulea.nativeui\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeUIPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == NativeUISpec.NAME) NativeUIModule(reactContext) else null\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      NativeUISpec.NAME to ReactModuleInfo(\n        NativeUISpec.NAME,\n        NativeUISpec.NAME,\n        false,\n        false,\n        true,\n        false,\n        true\n      )\n    )\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-04-26T06:54:09Z"
    },
    {
      "repository": "DriveQuantPublic/react-native-drivekit",
      "file": "packages/driver-data/android/src/main/java/com/reactnativedrivekit/driverdata/DriveKitDriverDataPackage.kt",
      "url": "https://github.com/DriveQuantPublic/react-native-drivekit/blob/ee404f7befe29f2f7b704bfcebe07b4486f435de/packages/driver-data/android/src/main/java/com/reactnativedrivekit/driverdata/DriveKitDriverDataPackage.kt",
      "fileContent": "package com.reactnativedrivekit.driverdata\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass DriveKitDriverDataPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name === DriveKitDriverDataModule.NAME) {\n      DriveKitDriverDataModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[DriveKitDriverDataModule.NAME] = ReactModuleInfo(\n        DriveKitDriverDataModule.NAME,\n        DriveKitDriverDataModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 3,
      "lastCommitDate": "2024-12-16T11:15:02Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-maps",
      "file": "packages/plugin-openstreetmap/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/openstreetmap/RNOmhMapsPluginOpenstreetmapPackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-maps/blob/c2b6ec914b917d2dfdc5f58cb93dbefa49c5bb53/packages/plugin-openstreetmap/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/openstreetmap/RNOmhMapsPluginOpenstreetmapPackage.kt",
      "fileContent": "package com.openmobilehub.android.rn.maps.plugin.openstreetmap\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\nimport com.openmobilehub.android.rn.maps.plugin.openstreetmap.RNOmhMapsPluginOpenstreetmapModule\n\nclass OmhMapsPluginOpenstreetmapTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            RNOmhMapsPluginOpenstreetmapModule.NAME -> RNOmhMapsPluginOpenstreetmapModule(\n                reactContext\n            )\n\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            RNOmhMapsPluginOpenstreetmapModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf()\n    }\n}\n",
      "stars": 25,
      "lastCommitDate": "2024-10-25T10:35:38Z"
    },
    {
      "repository": "DataDog/dd-sdk-reactnative",
      "file": "packages/core/android/src/main/kotlin/com/datadog/reactnative/DdSdkReactNativePackage.kt",
      "url": "https://github.com/DataDog/dd-sdk-reactnative/blob/a8a041a4c5ffc097635ae95af0ed3e993264d016/packages/core/android/src/main/kotlin/com/datadog/reactnative/DdSdkReactNativePackage.kt",
      "fileContent": "/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\npackage com.datadog.reactnative\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\n/**\n * Package of native dd-sdk-reactnative native modules.\n */\nclass DdSdkReactNativePackage : TurboReactPackage() {\n    private val sdkWrapper = DatadogSDKWrapper()\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            DdSdkImplementation.NAME -> DdSdk(reactContext, sdkWrapper)\n            DdRumImplementation.NAME -> DdRum(reactContext, sdkWrapper)\n            DdTraceImplementation.NAME -> DdTrace(reactContext)\n            DdLogsImplementation.NAME -> DdLogs(reactContext, sdkWrapper)\n            else -> null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            val moduleInfos = listOf(\n                DdSdkImplementation.NAME,\n                DdRumImplementation.NAME,\n                DdTraceImplementation.NAME,\n                DdLogsImplementation.NAME\n            ).associateWith {\n                ReactModuleInfo(\n                    it,\n                    it,\n                    false,  // canOverrideExistingModule\n                    false,  // needsEagerInit\n                    true,  // hasConstants\n                    false,  // isCxxModule\n                    isTurboModule // isTurboModule\n                )\n            }\n\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 123,
      "lastCommitDate": "2024-12-18T15:59:33Z"
    },
    {
      "repository": "LeXuanKhanh/RNDetectHandDrawTextExample",
      "file": "modules/rn-ml-kit-text-recognition/android/src/main/java/com/rnmlkittextrecognition/RnMlKitTextRecognitionPackage.kt",
      "url": "https://github.com/LeXuanKhanh/RNDetectHandDrawTextExample/blob/ebc96b9e591828922dc75df30afb9f142e1fb76f/modules/rn-ml-kit-text-recognition/android/src/main/java/com/rnmlkittextrecognition/RnMlKitTextRecognitionPackage.kt",
      "fileContent": "package com.rnmlkittextrecognition\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnMlKitTextRecognitionPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnMlKitTextRecognitionModule.NAME) {\n      RnMlKitTextRecognitionModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnMlKitTextRecognitionModule.NAME] = ReactModuleInfo(\n        RnMlKitTextRecognitionModule.NAME,\n        RnMlKitTextRecognitionModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-12-07T16:55:21Z"
    },
    {
      "repository": "ednilsoncs/turbo-module-react-native",
      "file": "RTNCalculator/android/src/main/java/com/rtncalculator/CalculatorPackage.kt",
      "url": "https://github.com/ednilsoncs/turbo-module-react-native/blob/b88e5884906744195c6a567159b701431ea4e50b/RTNCalculator/android/src/main/java/com/rtncalculator/CalculatorPackage.kt",
      "fileContent": "package com.rtncalculator;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass CalculatorPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == CalculatorModule.NAME) {\n        CalculatorModule(reactContext)\n    } else {\n         null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n            ReactModuleInfoProvider {\n                val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n                moduleInfos[CalculatorModule.NAME] =\n                        ReactModuleInfo(\n                                CalculatorModule.NAME,\n                                CalculatorModule.NAME,\n                                false, // canOverrideExistingModule\n                                false, // needsEagerInit\n                                true, // hasConstants\n                                false, // isCxxModule\n                                true,\n                        )\n                moduleInfos\n            }\n}",
      "stars": 0,
      "lastCommitDate": "2024-08-01T20:17:34Z"
    },
    {
      "repository": "lesleysin/RN-TurboModuleScaffold",
      "file": "example/RTNModuleKotlin/android/src/main/java/com/RTNModuleKotlin/RTNModuleKotlinPackage.kt",
      "url": "https://github.com/lesleysin/RN-TurboModuleScaffold/blob/b1193ec22d4ba739b84a9d3d3f4fc04b72045923/example/RTNModuleKotlin/android/src/main/java/com/RTNModuleKotlin/RTNModuleKotlinPackage.kt",
      "fileContent": "package com.RTNModuleKotlin\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.react.module.model.ReactModuleInfoProvider;\nimport com.facebook.react.module.model.ReactModuleInfo;\n\nimport com.RTNModuleKotlin.RTNModuleKotlinModule\n\nclass RTNModuleKotlinPackage : TurboReactPackage() {\n\n    override fun getModule(name: String, ctx: ReactApplicationContext): NativeModule? {\n        if (name.equals(RTNModuleKotlinModule.NAME)) {\n            return RTNModuleKotlinModule(ctx);\n        } else {\n            return null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n\n        class Provider: ReactModuleInfoProvider {\n\n            override fun getReactModuleInfos(): Map<String, ReactModuleInfo> {\n                val moduleInfos = mutableMapOf<String, ReactModuleInfo>();\n                moduleInfos.put(\n                    RTNModuleKotlinModule.NAME,\n                    ReactModuleInfo(\n                        RTNModuleKotlinModule.NAME,\n                        RTNModuleKotlinModule.NAME,\n                        false, // canOverrideExistingModule\n                        false, // needsEagerInit\n                        true, // hasConstants\n                        false, // isCxxModule\n                        true // isTurboModule\n                    ));\n                return moduleInfos;\n            }\n\n        }\n\n        return Provider();\n    }\n}",
      "stars": 6,
      "lastCommitDate": "2023-04-28T08:36:00Z"
    },
    {
      "repository": "lesleysin/RN-TurboModuleScaffold",
      "file": "example/RTNBackCompatModuleKotlin/android/src/main/java/com/RTNBackCompatModuleKotlin/RTNBackCompatModuleKotlinPackage.kt",
      "url": "https://github.com/lesleysin/RN-TurboModuleScaffold/blob/b1193ec22d4ba739b84a9d3d3f4fc04b72045923/example/RTNBackCompatModuleKotlin/android/src/main/java/com/RTNBackCompatModuleKotlin/RTNBackCompatModuleKotlinPackage.kt",
      "fileContent": "package com.RTNBackCompatModuleKotlin\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.react.module.model.ReactModuleInfoProvider;\nimport com.facebook.react.module.model.ReactModuleInfo;\n\nimport com.RTNBackCompatModuleKotlin.impl.RTNBackCompatModuleKotlinModuleImpl\n\nclass RTNBackCompatModuleKotlinPackage : TurboReactPackage() {\n\n    override fun getModule(name: String, ctx: ReactApplicationContext): NativeModule? {\n        if (name.equals(RTNBackCompatModuleKotlinModuleImpl.NAME)) {\n            return RTNBackCompatModuleKotlinModule(ctx);\n        } else {\n            return null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n\n        class Provider: ReactModuleInfoProvider {\n\n            override fun getReactModuleInfos(): Map<String, ReactModuleInfo> {\n                val moduleInfos = mutableMapOf<String, ReactModuleInfo>();\n                moduleInfos.put(\n                    RTNBackCompatModuleKotlinModuleImpl.NAME,\n                    ReactModuleInfo(\n                        RTNBackCompatModuleKotlinModuleImpl.NAME,\n                        RTNBackCompatModuleKotlinModuleImpl.NAME,\n                        false, // canOverrideExistingModule\n                        false, // needsEagerInit\n                        true, // hasConstants\n                        false, // isCxxModule\n                        true // isTurboModule\n                    ));\n                return moduleInfos;\n            }\n\n        }\n\n        return Provider();\n    }\n}",
      "stars": 6,
      "lastCommitDate": "2023-04-28T08:36:00Z"
    },
    {
      "repository": "iagormoraes/react-native-socket-io-wrapper",
      "file": "android/src/main/java/com/reactnativesocketio/SocketIoTurboPackage.kt",
      "url": "https://github.com/iagormoraes/react-native-socket-io-wrapper/blob/fdf8b5ad191f8636e904eab96ec1863a167fe04d/android/src/main/java/com/reactnativesocketio/SocketIoTurboPackage.kt",
      "fileContent": "package com.reactnativesocketio\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.*\n\nclass SocketIoTurboPackage: TurboReactPackage() {\n  override fun getModule(name: String?, reactContext: ReactApplicationContext): NativeModule {\n    return when(name) {\n      SocketIoModule.NAME -> SocketIoModule(reactContext)\n      else -> throw IllegalArgumentException(\"Could not find module $name\")\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider? {\n    return ReactModuleInfoProvider {\n      val map = HashMap<String, ReactModuleInfo>()\n\n      map[SocketIoModule.NAME] = ReactModuleInfo(SocketIoModule.NAME, \"com.reactnativesocketio.SocketIoModule\", false, false, true, false, true)\n\n      map\n    }\n  }\n}\n",
      "stars": 6,
      "lastCommitDate": "2021-12-27T19:38:59Z"
    },
    {
      "repository": "dojo-engineering/react-native-pay-sdk",
      "file": "android/src/main/java/com/dojoreactnativepaysdk/DojoReactNativePaySdkPackage.kt",
      "url": "https://github.com/dojo-engineering/react-native-pay-sdk/blob/215e1090111b7521d1807fa00cb4cb7f6eb91924/android/src/main/java/com/dojoreactnativepaysdk/DojoReactNativePaySdkPackage.kt",
      "fileContent": "package com.dojoreactnativepaysdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass DojoReactNativePaySdkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == DojoReactNativePaySdkModule.NAME) {\n      DojoReactNativePaySdkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[DojoReactNativePaySdkModule.NAME] = ReactModuleInfo(\n        DojoReactNativePaySdkModule.NAME,\n        DojoReactNativePaySdkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-04T15:52:55Z"
    },
    {
      "repository": "martinsinghk/react-native-geocoder-sdk",
      "file": "android/src/main/java/com/geocodersdk/GeocoderSdkPackage.kt",
      "url": "https://github.com/martinsinghk/react-native-geocoder-sdk/blob/8b308f1ac16d7bf02729de281926e905684e29b9/android/src/main/java/com/geocodersdk/GeocoderSdkPackage.kt",
      "fileContent": "package com.geocodersdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass GeocoderSdkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == GeocoderSdkModule.NAME) {\n      GeocoderSdkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[GeocoderSdkModule.NAME] = ReactModuleInfo(\n        GeocoderSdkModule.NAME,\n        GeocoderSdkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-05-29T08:38:23Z"
    },
    {
      "repository": "software-mansion/react-native-executorch",
      "file": "android/src/main/java/com/swmansion/rnexecutorch/RnExecutorchPackage.kt",
      "url": "https://github.com/software-mansion/react-native-executorch/blob/2811ca9a2859a908d91365a6b1af05ae5b57fb83/android/src/main/java/com/swmansion/rnexecutorch/RnExecutorchPackage.kt",
      "fileContent": "package com.swmansion.rnexecutorch\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\nclass RnExecutorchPackage : TurboReactPackage() {\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf()\n  }\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == LLM.NAME) {\n      LLM(reactContext)\n    } else if (name == ETModule.NAME) {\n      ETModule(reactContext)\n    } else if (name == StyleTransfer.NAME) {\n      StyleTransfer(reactContext)\n    } else if (name == Classification.NAME) {\n      Classification(reactContext)\n    } else if (name == ObjectDetection.NAME) {\n      ObjectDetection(reactContext)\n    }\n    else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[LLM.NAME] = ReactModuleInfo(\n        LLM.NAME,\n        LLM.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true,\n      )\n      moduleInfos[ETModule.NAME] = ReactModuleInfo(\n        ETModule.NAME,\n        ETModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true\n      )\n\n      moduleInfos[StyleTransfer.NAME] = ReactModuleInfo(\n        StyleTransfer.NAME,\n        StyleTransfer.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true\n      )\n\n      moduleInfos[Classification.NAME] = ReactModuleInfo(\n        Classification.NAME,\n        Classification.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true\n      )\n\n      moduleInfos[ObjectDetection.NAME] = ReactModuleInfo(\n        ObjectDetection.NAME,\n        ObjectDetection.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 212,
      "lastCommitDate": "2024-12-18T15:16:08Z"
    },
    {
      "repository": "ObiwaleAyomideMoses/react-native-jsi",
      "file": "android/src/main/java/com/jsimodule/JsiModulePackage.kt",
      "url": "https://github.com/ObiwaleAyomideMoses/react-native-jsi/blob/288fd11f31bfcb75053331e74ee8385b00c0aa59/android/src/main/java/com/jsimodule/JsiModulePackage.kt",
      "fileContent": "package com.jsimodule\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass JsiModulePackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == JsiModuleModule.NAME) {\n      JsiModuleModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[JsiModuleModule.NAME] = ReactModuleInfo(\n        JsiModuleModule.NAME,\n        JsiModuleModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-16T10:48:52Z"
    },
    {
      "repository": "thomashagstrom/ThermalibReactNative",
      "file": "android/app/src/main/java/com/thermalibreactnative/ThermaLibPackage.kt",
      "url": "https://github.com/thomashagstrom/ThermalibReactNative/blob/8525a99d91b6464d405c96bd1c6789e95ef87cea/android/app/src/main/java/com/thermalibreactnative/ThermaLibPackage.kt",
      "fileContent": "package com.thermalibreactnative\n\nimport android.util.Log\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport uk.co.etiltd.thermalib.ThermaLib\n\nconst val TAG = \"ThermalibReactNative\"\nlateinit var TL: ThermaLib\n\nclass ThermalibPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n        if (name == ThermalibModule.NAME) {\n            Log.d(TAG, \"Init module\");\n            ThermalibModule(reactContext);\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            ThermalibModule.NAME to ReactModuleInfo(\n                _name = ThermalibModule.NAME,\n                _className = ThermalibModule.NAME,\n                _canOverrideExistingModule = false,\n                _needsEagerInit = false,\n                isCxxModule = false,\n                isTurboModule = true\n            )\n        )\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-12-17T09:21:41Z"
    },
    {
      "repository": "AlanSecundo/WalletApp",
      "file": "android/app/src/main/java/com/nativeidiom/NativeIdiomPackage.kt",
      "url": "https://github.com/AlanSecundo/WalletApp/blob/0943ebfea4a9a7a91ba43e065e35f0bbe39296c8/android/app/src/main/java/com/nativeidiom/NativeIdiomPackage.kt",
      "fileContent": "package com.nativeidiom\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeIdiomPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == NativeIdiomModule.NAME) {\n      NativeIdiomModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      NativeIdiomModule.NAME to ReactModuleInfo(\n        _name = NativeIdiomModule.NAME,\n        _className = NativeIdiomModule.NAME,\n        _canOverrideExistingModule = false,\n        _needsEagerInit = false,\n        isCxxModule = false,\n        isTurboModule = true\n      )\n    )\n  }\n}",
      "stars": 0,
      "lastCommitDate": "2024-11-23T21:00:58Z"
    },
    {
      "repository": "vantuan88291/react-native-ota-hot-update",
      "file": "android/src/main/java/com/otahotupdate/OtaHotUpdate.kt",
      "url": "https://github.com/vantuan88291/react-native-ota-hot-update/blob/503467c2439acee72c5d04bfda8875448381dd09/android/src/main/java/com/otahotupdate/OtaHotUpdate.kt",
      "fileContent": "package com.otahotupdate\n\nimport android.content.Context\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.rnhotupdate.Common.DEFAULT_BUNDLE\nimport com.rnhotupdate.Common.PATH\nimport com.rnhotupdate.SharedPrefs\n\n\nclass OtaHotUpdate(context: Context?) : TurboReactPackage() {\n  init {\n    mContext = context\n  }\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == OtaHotUpdateModule.NAME) {\n      OtaHotUpdateModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[OtaHotUpdateModule.NAME] = ReactModuleInfo(\n        OtaHotUpdateModule.NAME,\n        OtaHotUpdateModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n  companion object {\n    private var mContext: Context? = null\n    val bundleJS: String\n      get() {\n        if (mContext == null) {\n          return DEFAULT_BUNDLE\n        }\n        val sharedPrefs = SharedPrefs(mContext!!)\n        val pathBundle = sharedPrefs.getString(PATH)\n        if (pathBundle == \"\") {\n          return DEFAULT_BUNDLE\n        }\n        return pathBundle!!\n      }\n  }\n}\n",
      "stars": 40,
      "lastCommitDate": "2024-12-19T01:52:48Z"
    },
    {
      "repository": "someSOAP/react-native-image-palette",
      "file": "android/src/main/java/com/imagepalette/ImagePalettePackage.kt",
      "url": "https://github.com/someSOAP/react-native-image-palette/blob/2aa983224da88a5c4f76d49e3b604755e37424e1/android/src/main/java/com/imagepalette/ImagePalettePackage.kt",
      "fileContent": "package com.imagepalette\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ImagePalettePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ImagePaletteModule.NAME) {\n      ImagePaletteModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ImagePaletteModule.NAME] = ReactModuleInfo(\n        ImagePaletteModule.NAME,\n        ImagePaletteModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-09-15T16:23:12Z"
    },
    {
      "repository": "mybigday/bark.rn",
      "file": "android/src/main/java/com/barkrn/BarkRnPackage.kt",
      "url": "https://github.com/mybigday/bark.rn/blob/cb6ce1b3a831583f2e97fc33dafd48e7a1b5c799/android/src/main/java/com/barkrn/BarkRnPackage.kt",
      "fileContent": "package com.barkrn\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass BarkRnPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == BarkRnModule.NAME) {\n      BarkRnModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[BarkRnModule.NAME] = ReactModuleInfo(\n        BarkRnModule.NAME,\n        BarkRnModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-10-24T14:17:26Z"
    },
    {
      "repository": "CleverTap/clevertap-react-native",
      "file": "android/src/main/java/com/clevertap/react/CleverTapPackage.kt",
      "url": "https://github.com/CleverTap/clevertap-react-native/blob/2c2ab9664b9e83cde936d14b511896d7edd5ecdc/android/src/main/java/com/clevertap/react/CleverTapPackage.kt",
      "fileContent": "package com.clevertap.react\n\nimport com.clevertap.react.Constants.REACT_MODULE_NAME\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass CleverTapPackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == REACT_MODULE_NAME) {\n            CleverTapModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[REACT_MODULE_NAME] = ReactModuleInfo(\n                REACT_MODULE_NAME,\n                REACT_MODULE_NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 61,
      "lastCommitDate": "2024-11-06T10:20:11Z"
    },
    {
      "repository": "TankerHQ/sdk-react-native",
      "file": "android/src/main/java/com/tanker/clientreactnative/ClientReactNativePackage.kt",
      "url": "https://github.com/TankerHQ/sdk-react-native/blob/fbf51774ddc5a43359e329e438d880fe7af2206c/android/src/main/java/com/tanker/clientreactnative/ClientReactNativePackage.kt",
      "fileContent": "package com.tanker.clientreactnative\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ClientReactNativePackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == ClientReactNativeModule.NAME) {\n            ClientReactNativeModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[ClientReactNativeModule.NAME] = ReactModuleInfo(\n                ClientReactNativeModule.NAME,\n                ClientReactNativeModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-13T18:07:41Z"
    },
    {
      "repository": "vokhuyetOz/react-native-draw-overlay",
      "file": "android/src/main/java/com/vokhuyet/reactnativedrawoverlay/ReactNativeDrawOverlayPackage.kt",
      "url": "https://github.com/vokhuyetOz/react-native-draw-overlay/blob/5a603b2a9e8bdec6bf574bc39c071a638617387d/android/src/main/java/com/vokhuyet/reactnativedrawoverlay/ReactNativeDrawOverlayPackage.kt",
      "fileContent": "package com.vokhuyet.reactnativedrawoverlay\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ReactNativeDrawOverlayPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeDrawOverlayModule.NAME) {\n      ReactNativeDrawOverlayModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ReactNativeDrawOverlayModule.NAME] = ReactModuleInfo(\n        ReactNativeDrawOverlayModule.NAME,\n        ReactNativeDrawOverlayModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 9,
      "lastCommitDate": "2024-11-04T06:18:38Z"
    },
    {
      "repository": "huntie/react-native-macos",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterReactHostDelegate.kt",
      "url": "https://github.com/huntie/react-native-macos/blob/67152e1fd1713087c2ef2fa7bb0adeaaea6739f7/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterReactHostDelegate.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.content.Context\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.JSEngineResolutionAlgorithm\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.ReactPackageTurboModuleManagerDelegate\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.JSBundleLoader\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.annotations.UnstableReactNativeAPI\nimport com.facebook.react.config.ReactFeatureFlags\nimport com.facebook.react.defaults.DefaultTurboModuleManagerDelegate\nimport com.facebook.react.fabric.ReactNativeConfig\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.runtime.BindingsInstaller\nimport com.facebook.react.runtime.JSCInstance\nimport com.facebook.react.runtime.JSEngineInstance\nimport com.facebook.react.runtime.ReactHostDelegate\nimport com.facebook.react.runtime.ReactHostImpl\nimport com.facebook.react.runtime.hermes.HermesInstance\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ViewManager\n\n@UnstableReactNativeAPI\nclass RNTesterReactHostDelegate internal constructor(context: Context) : ReactHostDelegate {\n  var reactHost: ReactHostImpl? = null\n\n  override val jsMainModulePath: String = BuildConfig.JS_MAIN_MODULE_NAME\n\n  override val jsBundleLoader: JSBundleLoader =\n      JSBundleLoader.createAssetLoader(context, \"assets:\" + BuildConfig.BUNDLE_ASSET_NAME, true)\n\n  @get:Synchronized override val bindingsInstaller: BindingsInstaller? = null\n\n  override val turboModuleManagerDelegateBuilder: ReactPackageTurboModuleManagerDelegate.Builder =\n      DefaultTurboModuleManagerDelegate.Builder()\n\n  override val jsEngineInstance: JSEngineInstance =\n      if (reactHost?.jsEngineResolutionAlgorithm == JSEngineResolutionAlgorithm.JSC) {\n        JSCInstance()\n      } else {\n        HermesInstance()\n      }\n\n  override fun handleInstanceException(error: Exception) {}\n\n  override fun getReactNativeConfig(moduleProvider: (String) -> NativeModule?): ReactNativeConfig =\n      ReactNativeConfig.DEFAULT_CONFIG\n\n  override val reactPackages: List<ReactPackage> by lazy {\n    listOf(\n        MainReactPackage(),\n        object : TurboReactPackage() {\n          override fun getModule(\n              name: String,\n              reactContext: ReactApplicationContext\n          ): NativeModule? =\n              when {\n                !ReactFeatureFlags.useTurboModules -> null\n                name == SampleTurboModule.NAME -> SampleTurboModule(reactContext)\n                name == SampleLegacyModule.NAME -> SampleLegacyModule(reactContext)\n                else -> null\n              }\n\n          // Note: Specialized annotation processor for @ReactModule isn't\n          // configured in OSS\n          // yet. For now, hardcode this information, though it's not necessary\n          // for most modules\n          override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n              ReactModuleInfoProvider {\n                if (ReactFeatureFlags.useTurboModules) {\n                  mapOf(\n                      SampleTurboModule.NAME to\n                          ReactModuleInfo(\n                              SampleTurboModule.NAME,\n                              \"SampleTurboModule\",\n                              false, // canOverrideExistingModule\n                              false, // needsEagerInit\n                              false, // isCxxModule\n                              true // isTurboModule\n                              ),\n                      SampleLegacyModule.NAME to\n                          ReactModuleInfo(\n                              SampleLegacyModule.NAME,\n                              \"SampleLegacyModule\",\n                              false, // canOverrideExistingModule\n                              false, // needsEagerInit\n                              false, // isCxxModule\n                              false // isTurboModule\n                              ),\n                  )\n                } else {\n                  emptyMap()\n                }\n              }\n        },\n        object : ViewManagerOnDemandReactPackage, ReactPackage {\n          override fun createNativeModules(\n              reactContext: ReactApplicationContext\n          ): List<NativeModule> = emptyList()\n\n          override fun createViewManagers(\n              reactContext: ReactApplicationContext\n          ): List<ViewManager<*, *>> =\n              listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n\n          override fun getViewManagerNames(\n              reactContext: ReactApplicationContext\n          ): Collection<String> =\n              listOf(MyNativeViewManager.REACT_CLASS, MyLegacyViewManager.REACT_CLASS)\n\n          override fun createViewManager(\n              reactContext: ReactApplicationContext,\n              viewManagerName: String\n          ): ViewManager<*, *>? {\n            return when (viewManagerName) {\n              MyNativeViewManager.REACT_CLASS -> MyNativeViewManager()\n              MyLegacyViewManager.REACT_CLASS -> MyLegacyViewManager(reactContext)\n              else -> null\n            }\n          }\n        })\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-06-17T06:40:06Z"
    },
    {
      "repository": "spruceid/mobile-sdk-react",
      "file": "android/src/main/java/com/mobilesdk/MobileSdkPackage.kt",
      "url": "https://github.com/spruceid/mobile-sdk-react/blob/d58b97754101ac9cca300fe892bb19537dd31976/android/src/main/java/com/mobilesdk/MobileSdkPackage.kt",
      "fileContent": "package com.mobilesdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass MobileSdkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == MobileSdkModule.NAME) {\n      MobileSdkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[MobileSdkModule.NAME] = ReactModuleInfo(\n        MobileSdkModule.NAME,\n        MobileSdkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-04T08:30:33Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-maps",
      "file": "packages/plugin-azuremaps/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/azuremaps/RNOmhMapsPluginAzuremapsPackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-maps/blob/c2b6ec914b917d2dfdc5f58cb93dbefa49c5bb53/packages/plugin-azuremaps/android/src/main/java/com/openmobilehub/android/rn/maps/plugin/azuremaps/RNOmhMapsPluginAzuremapsPackage.kt",
      "fileContent": "package com.openmobilehub.android.rn.maps.plugin.azuremaps\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass OmhMapsPluginAzuremapsTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            RNOmhMapsPluginAzuremapsModule.NAME -> RNOmhMapsPluginAzuremapsModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            RNOmhMapsPluginAzuremapsModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n         * Here declare the list of exported native components\n         */\n        return listOf()\n    }\n}\n",
      "stars": 25,
      "lastCommitDate": "2024-10-25T10:35:38Z"
    },
    {
      "repository": "moengage/React-Native",
      "file": "sdk/cards/android/src/main/java/com/moengage/react/cards/MoEngageCardsPackage.kt",
      "url": "https://github.com/moengage/React-Native/blob/b37abdf4c36f099d5b2497a276cc8f3a5483c4fa/sdk/cards/android/src/main/java/com/moengage/react/cards/MoEngageCardsPackage.kt",
      "fileContent": "/*\n * Copyright (c) 2014-2024 MoEngage Inc.\n *\n * All rights reserved.\n *\n *  Use of source code or binaries contained within MoEngage SDK is permitted only to enable use of the MoEngage platform by customers of MoEngage.\n *  Modification of source code and inclusion in mobile apps is explicitly allowed provided that all other conditions are met.\n *  Neither the name of MoEngage nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *  Redistribution of source code or binaries is disallowed except with specific prior written permission. Any such redistribution must retain the above copyright notice, this list of conditions and the following disclaimer.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage com.moengage.react.cards\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\n/**\n * MoEngage Card Plugin React-Native Package\n *\n * @author Abhishek Kumar\n * @since 1.0.0\n */\nclass MoEngageCardsPackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == MoEngageCardsBridgeHandler.NAME) {\n            MoEngageCardsBridge(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[MoEngageCardsBridgeHandler.NAME] = ReactModuleInfo(\n                MoEngageCardsBridgeHandler.NAME,\n                MoEngageCardsBridgeHandler.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}",
      "stars": 3,
      "lastCommitDate": "2024-11-25T08:46:55Z"
    },
    {
      "repository": "sandeepdillerao/react-native-qrscanner",
      "file": "android/src/main/java/com/qrscanner/QrscannerPackage.kt",
      "url": "https://github.com/sandeepdillerao/react-native-qrscanner/blob/2c1cbb84ea03f898adb094cf26616e8c0eb3a9a5/android/src/main/java/com/qrscanner/QrscannerPackage.kt",
      "fileContent": "package com.qrscanner\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass QrscannerPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == QrscannerModule.NAME) {\n      QrscannerModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[QrscannerModule.NAME] = ReactModuleInfo(\n        QrscannerModule.NAME,\n        QrscannerModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-10-04T11:45:36Z"
    },
    {
      "repository": "tconns/react-native-timer-jsi",
      "file": "android/src/main/java/com/timerjsi/TimerJsiPackage.kt",
      "url": "https://github.com/tconns/react-native-timer-jsi/blob/1e1f39809b566565ef33a23aac476f6f4494a1ad/android/src/main/java/com/timerjsi/TimerJsiPackage.kt",
      "fileContent": "package com.timerjsi\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass TimerJsiPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TimerJsiModule.NAME) {\n      TimerJsiModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[TimerJsiModule.NAME] = ReactModuleInfo(\n        TimerJsiModule.NAME,\n        TimerJsiModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-15T09:01:03Z"
    },
    {
      "repository": "callstack/react-native-basis-universal",
      "file": "android/src/main/java/com/basisuniversal/BasisUniversalPackage.kt",
      "url": "https://github.com/callstack/react-native-basis-universal/blob/2e2bf3c1aad375ccb6603a680cbae3558967eff0/android/src/main/java/com/basisuniversal/BasisUniversalPackage.kt",
      "fileContent": "package com.basisuniversal\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass BasisUniversalPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == BasisUniversalModule.NAME) {\n      BasisUniversalModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[BasisUniversalModule.NAME] = ReactModuleInfo(\n        BasisUniversalModule.NAME,\n        BasisUniversalModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 10,
      "lastCommitDate": "2024-11-15T09:25:43Z"
    },
    {
      "repository": "TuTejsy/Moonlit",
      "file": "src/native_modules/MNTAudioPlayer/android/src/main/java/com/mntaudioplayer/MNTAudioPlayerManagerPackage.kt",
      "url": "https://github.com/TuTejsy/Moonlit/blob/2551c500d94d5f648d9bfc3b8c4f3bdd6cf2612c/src/native_modules/MNTAudioPlayer/android/src/main/java/com/mntaudioplayer/MNTAudioPlayerManagerPackage.kt",
      "fileContent": "package com.mntaudioplayer;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass MNTAudioPlayerManagerPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == MNTAudioPlayerManagerModule.NAME) {\n      MNTAudioPlayerManagerModule(reactContext)\n    } else {\n      null\n    }\n override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n   mapOf(\n     MNTAudioPlayerManagerModule.NAME to ReactModuleInfo(\n       MNTAudioPlayerManagerModule.NAME,\n       MNTAudioPlayerManagerModule.NAME,\n       false, // canOverrideExistingModule\n       false, // needsEagerInit\n       false, // isCxxModule\n       true // isTurboModule\n     )\n   )\n }\n}",
      "stars": 1,
      "lastCommitDate": "2024-11-03T19:21:15Z"
    },
    {
      "repository": "Notificare/notificare-sdk-react-native",
      "file": "packages/react-native-notificare-push-ui/android/src/main/java/re/notifica/push/ui/react_native/NotificarePushUIPackage.kt",
      "url": "https://github.com/Notificare/notificare-sdk-react-native/blob/8d9f7b299835b6b67050e1a1562e02b26e814b19/packages/react-native-notificare-push-ui/android/src/main/java/re/notifica/push/ui/react_native/NotificarePushUIPackage.kt",
      "fileContent": "package re.notifica.push.ui.react_native\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\npublic class NotificarePushUIPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NotificarePushUIModule.NAME) {\n            NotificarePushUIModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n            @Suppress(\"DEPRECATION\")\n            moduleInfos[NotificarePushUIModule.NAME] = ReactModuleInfo(\n                NotificarePushUIModule.NAME,\n                NotificarePushUIModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 6,
      "lastCommitDate": "2024-10-30T16:49:15Z"
    },
    {
      "repository": "facebook/react-native",
      "file": "packages/react-native/ReactAndroid/src/test/java/com/facebook/react/modules/model/ReactModuleInfoTest.kt",
      "url": "https://github.com/facebook/react-native/blob/b8f3f919cc9ebbd086d9ac79c93fffd532c55b09/packages/react-native/ReactAndroid/src/test/java/com/facebook/react/modules/model/ReactModuleInfoTest.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.modules.model\n\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.Test\n\nclass ReactModuleInfoTest {\n\n  @Test\n  fun testCreateReactModuleInfo() {\n    val reactModuleInfo =\n        ReactModuleInfo(\n            /* name = */ \"name\",\n            /* className = */ \"class\",\n            /* canOverrideExistingModule = */ false,\n            /* needsEagerInit = */ false,\n            /* isCxxModule = */ false,\n            /* isTurboModule = */ false)\n    assertThat(reactModuleInfo.name).isEqualTo(\"name\")\n    assertThat(reactModuleInfo.canOverrideExistingModule).isFalse()\n    assertThat(reactModuleInfo.needsEagerInit).isFalse()\n    assertThat(reactModuleInfo.isCxxModule).isFalse()\n    assertThat(reactModuleInfo.isTurboModule).isFalse()\n  }\n\n  @Test\n  fun classIsTurboModule_withRandomClass() {\n    assertThat(ReactModuleInfo.classIsTurboModule(String::class.java)).isFalse()\n  }\n\n  @Test\n  fun classIsTurboModule_withTurboModule() {\n    assertThat(ReactModuleInfo.classIsTurboModule(TestTurboModule::class.java)).isTrue()\n  }\n\n  inner class TestTurboModule : TurboModule {\n    override fun initialize() = Unit\n\n    override fun invalidate() = Unit\n  }\n}\n",
      "stars": 119775,
      "lastCommitDate": "2024-12-19T01:39:30Z"
    },
    {
      "repository": "EdgarJMesquita/react-native-webp-converter",
      "file": "android/src/main/java/com/webpconverter/WebpConverterPackage.kt",
      "url": "https://github.com/EdgarJMesquita/react-native-webp-converter/blob/28cea6fa074df507bb16e133c5b8c8d9021fc892/android/src/main/java/com/webpconverter/WebpConverterPackage.kt",
      "fileContent": "package com.webpconverter\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass WebpConverterPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == WebpConverterModule.NAME) {\n      WebpConverterModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[WebpConverterModule.NAME] = ReactModuleInfo(\n        WebpConverterModule.NAME,\n        WebpConverterModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 4,
      "lastCommitDate": "2024-11-16T03:45:09Z"
    },
    {
      "repository": "haianh286/mattermost-mobile",
      "file": "libraries/@mattermost/rnshare/android/src/main/java/com/mattermost/rnshare/MattermostSharePackage.kt",
      "url": "https://github.com/haianh286/mattermost-mobile/blob/629683a310a3bd186b17b958b0969a54273d9528/libraries/@mattermost/rnshare/android/src/main/java/com/mattermost/rnshare/MattermostSharePackage.kt",
      "fileContent": "package com.mattermost.rnshare\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass MattermostSharePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == MattermostShareImpl.NAME) {\n      MattermostShareModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[MattermostShareImpl.NAME] = ReactModuleInfo(\n        MattermostShareImpl.NAME,\n        MattermostShareImpl.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-25T22:40:46Z"
    },
    {
      "repository": "nuraalamjikue/React-native-Sample-Inventory-App-Code",
      "file": ".svn/pristine/9f/9f37dc5dcbbea26c532c2b1d4a519bdb613c0462.svn-base",
      "url": "https://github.com/nuraalamjikue/React-native-Sample-Inventory-App-Code/blob/ce5541bde0c6d336537f274ac352ff3478ee2472/.svn/pristine/9f/9f37dc5dcbbea26c532c2b1d4a519bdb613c0462.svn-base",
      "fileContent": "package com.hudl.rn.systembars\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass AndroidSystemBarsPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AndroidSystemBarsImpl.NAME) {\n      AndroidSystemBarsModule(reactContext)\n    } else null\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      hashMapOf(\n        AndroidSystemBarsImpl.NAME to ReactModuleInfo(\n          AndroidSystemBarsImpl.NAME,\n          AndroidSystemBarsImpl.NAME,\n          false,\n          false,\n          true,\n          false,\n          isTurboModule\n        )\n      )\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-02-27T13:01:27Z"
    },
    {
      "repository": "zaferatli/react-native-nitro-simple-demo",
      "file": "packages/react-native-nitro-modules/android/src/main/java/com/margelo/nitro/NitroModulesPackage.kt",
      "url": "https://github.com/zaferatli/react-native-nitro-simple-demo/blob/bd21e59af8db08e5a4822559d401f275a9e22c65/packages/react-native-nitro-modules/android/src/main/java/com/margelo/nitro/NitroModulesPackage.kt",
      "fileContent": "package com.margelo.nitro\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NitroModulesPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NitroModules.NAME) {\n            NitroModules(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[NitroModules.NAME] = ReactModuleInfo(\n                NitroModules.NAME,\n                NitroModules.NAME,\n                canOverrideExistingModule = false,\n                needsEagerInit = false,\n                hasConstants = false,\n                isCxxModule = false,\n                isTurboModule = isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-12-04T06:19:51Z"
    },
    {
      "repository": "oneDotpy/CaribouQuest",
      "file": "nodemodules/react-native-safe-area-context/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaContextPackage.kt",
      "url": "https://github.com/oneDotpy/CaribouQuest/blob/978ba2e97d1f37f5620afdf39005f6fbeacc93f3/nodemodules/react-native-safe-area-context/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaContextPackage.kt",
      "fileContent": "package com.th3rdwave.safeareacontext\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\n// Fool autolinking for older versions that do not support TurboReactPackage.\n// public class SafeAreaContextPackage implements ReactPackage {\nclass SafeAreaContextPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      SafeAreaContextModule.NAME -> SafeAreaContextModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(SafeAreaContextModule::class.java)\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n          ReactModuleInfo(\n              reactModule.name,\n              moduleClass.name,\n              true,\n              reactModule.needsEagerInit,\n              /** TODO remove the parameter once support for RN < 0.73 is dropped */\n              reactModule.hasConstants,\n              reactModule.isCxxModule,\n              BuildConfig.IS_NEW_ARCHITECTURE_ENABLED)\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf<ViewManager<*, *>>(SafeAreaProviderManager(), SafeAreaViewManager())\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-05-19T13:18:32Z"
    },
    {
      "repository": "FadilAmiruddin/StrudL",
      "file": "StrudL/node_modules 7.52.49 PM/react-native-safe-area-context/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaContextPackage.kt",
      "url": "https://github.com/FadilAmiruddin/StrudL/blob/979b0f1395e3917dc6b6090d87114abc79855643/StrudL/node_modules%207.52.49%E2%80%AFPM/react-native-safe-area-context/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaContextPackage.kt",
      "fileContent": "package com.th3rdwave.safeareacontext\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\n// Fool autolinking for older versions that do not support TurboReactPackage.\n// public class SafeAreaContextPackage implements ReactPackage {\nclass SafeAreaContextPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      SafeAreaContextModule.NAME -> SafeAreaContextModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(SafeAreaContextModule::class.java)\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n          ReactModuleInfo(\n              reactModule.name,\n              moduleClass.name,\n              true,\n              reactModule.needsEagerInit,\n              /** TODO remove the parameter once support for RN < 0.73 is dropped */\n              reactModule.hasConstants,\n              reactModule.isCxxModule,\n              BuildConfig.IS_NEW_ARCHITECTURE_ENABLED)\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf<ViewManager<*, *>>(SafeAreaProviderManager(), SafeAreaViewManager())\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-07-31T00:01:17Z"
    },
    {
      "repository": "DionisisChytiris/WorldWiseTrivia_Main",
      "file": "node_modules_bak/react-native-safe-area-context/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaContextPackage.kt",
      "url": "https://github.com/DionisisChytiris/WorldWiseTrivia_Main/blob/bd629b729ab4591c599dcb33c4843146d00c1f0a/node_modules_bak/react-native-safe-area-context/android/src/main/java/com/th3rdwave/safeareacontext/SafeAreaContextPackage.kt",
      "fileContent": "package com.th3rdwave.safeareacontext\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\n// Fool autolinking for older versions that do not support TurboReactPackage.\n// public class SafeAreaContextPackage implements ReactPackage {\nclass SafeAreaContextPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      SafeAreaContextModule.NAME -> SafeAreaContextModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(SafeAreaContextModule::class.java)\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n          ReactModuleInfo(\n              reactModule.name,\n              moduleClass.name,\n              true,\n              reactModule.needsEagerInit,\n              /** TODO remove the parameter once support for RN < 0.73 is dropped */\n              reactModule.hasConstants,\n              reactModule.isCxxModule,\n              BuildConfig.IS_NEW_ARCHITECTURE_ENABLED)\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf<ViewManager<*, *>>(SafeAreaProviderManager(), SafeAreaViewManager())\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-15T14:25:24Z"
    },
    {
      "repository": "abhi3691/react-native-webp-converter",
      "file": "android/src/main/java/com/webpconverter/WebpConverterPackage.kt",
      "url": "https://github.com/abhi3691/react-native-webp-converter/blob/0d11bc868e9f900d8fa3a844287d245d5197de10/android/src/main/java/com/webpconverter/WebpConverterPackage.kt",
      "fileContent": "package com.webpconverter\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass WebpConverterPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == WebpConverterModule.NAME) {\n      WebpConverterModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[WebpConverterModule.NAME] = ReactModuleInfo(\n        WebpConverterModule.NAME,\n        WebpConverterModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-05-30T18:36:07Z"
    },
    {
      "repository": "software-mansion/react-native-screens",
      "file": "android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt",
      "url": "https://github.com/software-mansion/react-native-screens/blob/20b7e83782cd5f79ddd0d61dadc13eeb4db4b258/android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt",
      "fileContent": "package com.swmansion.rnscreens\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport com.swmansion.rnscreens.utils.ScreenDummyLayoutHelper\n\n@ReactModuleList(\n    nativeModules = [\n        ScreensModule::class,\n    ],\n)\nclass RNScreensPackage : TurboReactPackage() {\n    // We just retain it here. This object helps us tackle jumping content when using native header.\n    // See: https://github.com/software-mansion/react-native-screens/pull/2169\n    private var screenDummyLayoutHelper: ScreenDummyLayoutHelper? = null\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        // This is the earliest we lay our hands on react context.\n        // Moreover this is called before FabricUIManger has finished initializing, not to mention\n        // installing its C++ bindings - so we are safe in terms of creating this helper\n        // before RN starts creating shadow nodes.\n        // See https://github.com/software-mansion/react-native-screens/pull/2169\n        if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n            screenDummyLayoutHelper = ScreenDummyLayoutHelper(reactContext)\n        }\n\n        // Proxy needs to register for lifecycle events in order to unregister itself\n        // on activity restarts.\n        InsetsObserverProxy.registerWithContext(reactContext)\n\n        return listOf<ViewManager<*, *>>(\n            ScreenContainerViewManager(),\n            ScreenViewManager(),\n            ModalScreenViewManager(),\n            ScreenStackViewManager(),\n            ScreenStackHeaderConfigViewManager(),\n            ScreenStackHeaderSubviewManager(),\n            SearchBarManager(),\n            ScreenFooterManager(),\n            ScreenContentWrapperManager(),\n        )\n    }\n\n    override fun getModule(\n        s: String,\n        reactApplicationContext: ReactApplicationContext,\n    ): NativeModule? {\n        when (s) {\n            ScreensModule.NAME -> return ScreensModule(reactApplicationContext)\n        }\n        return null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n        ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[ScreensModule.NAME] =\n                ReactModuleInfo(\n                    ScreensModule.NAME,\n                    ScreensModule.NAME,\n                    false, // canOverrideExistingModule\n                    false, // needsEagerInit\n                    true, // hasConstants\n                    false, // isCxxModule\n                    isTurboModule,\n                )\n            moduleInfos\n        }\n\n    companion object {\n        const val TAG = \"RNScreensPackage\"\n    }\n}\n",
      "stars": 3129,
      "lastCommitDate": "2024-12-18T14:08:43Z"
    },
    {
      "repository": "zoontek/react-native-localize",
      "file": "android/src/main/java/com/zoontek/rnlocalize/RNLocalizePackage.kt",
      "url": "https://github.com/zoontek/react-native-localize/blob/43de6baa0d781dcc4b0f7767f72a40aff72a7319/android/src/main/java/com/zoontek/rnlocalize/RNLocalizePackage.kt",
      "fileContent": "package com.zoontek.rnlocalize\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNLocalizePackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      RNLocalizeModuleImpl.NAME -> RNLocalizeModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n      val moduleInfo = ReactModuleInfo(\n        RNLocalizeModuleImpl.NAME,\n        RNLocalizeModuleImpl.NAME,\n        false,\n        false,\n        true,\n        false,\n        isTurboModule\n      )\n\n      moduleInfos[RNLocalizeModuleImpl.NAME] = moduleInfo\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2301,
      "lastCommitDate": "2024-11-19T09:06:57Z"
    },
    {
      "repository": "jpudysz/react-native-unistyles",
      "file": "android/src/main/java/com/unistyles/UnistylesPackage.kt",
      "url": "https://github.com/jpudysz/react-native-unistyles/blob/0fadf2d4ed2ce899a167384f9966cc1f267b15c7/android/src/main/java/com/unistyles/UnistylesPackage.kt",
      "fileContent": "package com.unistyles\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass UnistylesPackage: TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == UnistylesModule.NAME) {\n            UnistylesModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            mapOf(UnistylesModule.NAME to ReactModuleInfo(\n                UnistylesModule.NAME,\n                UnistylesModule.NAME,\n                _canOverrideExistingModule = true,\n                _needsEagerInit = true,\n                isCxxModule = true,\n                isTurboModule = true\n            ))\n        }\n    }\n}\n",
      "stars": 1735,
      "lastCommitDate": "2024-12-18T04:11:37Z"
    },
    {
      "repository": "mrousavy/react-native-blurhash",
      "file": "android/src/main/java/com/mrousavy/blurhash/BlurhashPackage.kt",
      "url": "https://github.com/mrousavy/react-native-blurhash/blob/39fa56e75f9dad74cc0f61b866d5848992f61219/android/src/main/java/com/mrousavy/blurhash/BlurhashPackage.kt",
      "fileContent": "package com.mrousavy.blurhash\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass BlurhashPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      NativeBlurhashModuleSpec.NAME -> BlurhashModule(reactContext)\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf(BlurhashModule::class.java)\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n          ReactModuleInfo(\n              reactModule.name,\n              moduleClass.name,\n              true,\n              reactModule.needsEagerInit,\n              /** TODO remove the parameter once support for RN < 0.73 is dropped */\n              reactModule.hasConstants,\n              reactModule.isCxxModule,\n              TurboModule::class.java.isAssignableFrom(moduleClass))\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf<ViewManager<*, *>>(BlurhashViewManager())\n  }\n}\n",
      "stars": 1995,
      "lastCommitDate": "2024-11-05T10:16:24Z"
    },
    {
      "repository": "mattermost/mattermost-mobile",
      "file": "libraries/@mattermost/hardware-keyboard/android/src/main/java/com/mattermost/hardware/keyboard/MattermostHardwareKeyboardPackage.kt",
      "url": "https://github.com/mattermost/mattermost-mobile/blob/32453b320c31ec98a8936b9d4192c41d90fd050a/libraries/@mattermost/hardware-keyboard/android/src/main/java/com/mattermost/hardware/keyboard/MattermostHardwareKeyboardPackage.kt",
      "fileContent": "package com.mattermost.hardware.keyboard\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass MattermostHardwareKeyboardPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == MattermostHardwareKeyboardImpl.NAME) {\n            MattermostHardwareKeyboardModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n                MattermostHardwareKeyboardImpl.NAME to ReactModuleInfo(\n                        MattermostHardwareKeyboardImpl.NAME,\n                        MattermostHardwareKeyboardImpl.NAME,\n                        false,  // canOverrideExistingModule\n                        false,  // needsEagerInit\n                        false,  // isCxxModule\n                        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED // isTurboModule\n                )\n        )\n    }\n}\n",
      "stars": 2269,
      "lastCommitDate": "2024-12-19T08:45:03Z"
    },
    {
      "repository": "react-native-tvos/react-native-tvos",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "url": "https://github.com/react-native-tvos/react-native-tvos/blob/f5004239e33bb527c26303addb8eecb2a9e72534/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.app.Application\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.ReactApplication\nimport com.facebook.react.ReactHost\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.assets.ReactFontManager\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultReactHost\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.osslibraryexample.OSSLibraryExamplePackage\nimport com.facebook.react.popupmenu.PopupMenuPackage\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.soloader.OpenSourceMergedSoMapping\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ReactShadowNode\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.soloader.SoLoader\n\nclass RNTesterApplication : Application(), ReactApplication {\n  override val reactNativeHost: ReactNativeHost by lazy {\n    object : DefaultReactNativeHost(this) {\n      public override fun getJSMainModuleName(): String = BuildConfig.JS_MAIN_MODULE_NAME\n\n      public override fun getBundleAssetName(): String = BuildConfig.BUNDLE_ASSET_NAME\n\n      override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n      public override fun getPackages(): List<ReactPackage> {\n        return listOf(\n            MainReactPackage(),\n            PopupMenuPackage(),\n            OSSLibraryExamplePackage(),\n            object : BaseReactPackage() {\n              override fun getModule(\n                  name: String,\n                  reactContext: ReactApplicationContext\n              ): NativeModule? {\n                if (!isNewArchEnabled) {\n                  return null\n                }\n                if (SampleTurboModule.NAME == name) {\n                  return SampleTurboModule(reactContext)\n                }\n                if (SampleLegacyModule.NAME == name) {\n                  return SampleLegacyModule(reactContext)\n                }\n                return null\n              }\n\n              // Note: Specialized annotation processor for @ReactModule isn't configured in OSS\n              // yet. For now, hardcode this information, though it's not necessary for most\n              // modules.\n              override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n                  ReactModuleInfoProvider {\n                    if (isNewArchEnabled) {\n                      mapOf(\n                          SampleTurboModule.NAME to\n                              ReactModuleInfo(\n                                  SampleTurboModule.NAME,\n                                  \"SampleTurboModule\",\n                                  _canOverrideExistingModule = false,\n                                  _needsEagerInit = false,\n                                  isCxxModule = false,\n                                  isTurboModule = true),\n                          SampleLegacyModule.NAME to\n                              ReactModuleInfo(\n                                  SampleLegacyModule.NAME,\n                                  \"SampleLegacyModule\",\n                                  _canOverrideExistingModule = false,\n                                  _needsEagerInit = false,\n                                  isCxxModule = false,\n                                  isTurboModule = false))\n                    } else {\n                      emptyMap()\n                    }\n                  }\n            },\n            object : ReactPackage, ViewManagerOnDemandReactPackage {\n              override fun createNativeModules(\n                  reactContext: ReactApplicationContext\n              ): List<NativeModule> = emptyList()\n\n              override fun getViewManagerNames(reactContext: ReactApplicationContext) =\n                  listOf(\"RNTMyNativeView\", \"RNTMyLegacyNativeView\")\n\n              override fun createViewManagers(\n                  reactContext: ReactApplicationContext\n              ): List<ViewManager<*, *>> =\n                  listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n\n              override fun createViewManager(\n                  reactContext: ReactApplicationContext,\n                  viewManagerName: String\n              ): ViewManager<*, out ReactShadowNode<*>>? =\n                  when (viewManagerName) {\n                    \"RNTMyNativeView\" -> MyNativeViewManager()\n                    \"RNTMyLegacyNativeView\" -> MyLegacyViewManager(reactContext)\n                    else -> null\n                  }\n            })\n      }\n\n      override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED_IN_FLAVOR\n    }\n  }\n\n  override val reactHost: ReactHost\n    get() = DefaultReactHost.getDefaultReactHost(applicationContext, reactNativeHost)\n\n  override fun onCreate() {\n    ReactFontManager.getInstance().addCustomFont(this, \"Rubik\", R.font.rubik)\n    super.onCreate()\n\n    if (BuildConfig.IS_INTERNAL_BUILD) {\n      // For Buck we call the simple init() as the SoMapping is built-from-source inside SoLoader\n      SoLoader.init(this, false)\n    } else {\n      // For Gradle instead, we need to specify it as constructor parameter.\n      SoLoader.init(this, OpenSourceMergedSoMapping)\n    }\n\n\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      load()\n    }\n  }\n}\n",
      "stars": 988,
      "lastCommitDate": "2024-12-11T07:42:46Z"
    },
    {
      "repository": "microsoft/rnx-kit",
      "file": "incubator/@react-native-webapis/web-storage/android/src/main/java/org/reactnativewebapis/webstorage/WebStoragePackage.kt",
      "url": "https://github.com/microsoft/rnx-kit/blob/363cef72f9173fcccc559ef85a0a42380f92a0ac/incubator/@react-native-webapis/web-storage/android/src/main/java/org/reactnativewebapis/webstorage/WebStoragePackage.kt",
      "fileContent": "package org.reactnativewebapis.webstorage\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass WebStoragePackage : BaseReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule =\n        when (name) {\n            WebStorageModule.NAME -> WebStorageModule(reactContext)\n            else -> throw IllegalArgumentException(\"No module named '$name'\")\n        }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        val info = ReactModuleInfo(\n            WebStorageModule.NAME,\n            WebStorageModule::class.java.name,\n            false,\n            false,\n            false,\n            WebStorageModule.IS_TURBO_MODULE\n        )\n        mapOf(WebStorageModule.NAME to info).toMutableMap()\n    }\n}\n",
      "stars": 1541,
      "lastCommitDate": "2024-12-18T07:46:11Z"
    },
    {
      "repository": "callstack/react-native-draco",
      "file": "android/src/main/java/com/draco/DracoPackage.kt",
      "url": "https://github.com/callstack/react-native-draco/blob/50b094c2a2f3eceb55c4254f77bd17f51f877975/android/src/main/java/com/draco/DracoPackage.kt",
      "fileContent": "package com.draco\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass DracoPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == DracoModule.NAME) {\n      DracoModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[DracoModule.NAME] = ReactModuleInfo(\n        DracoModule.NAME,\n        DracoModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 7,
      "lastCommitDate": "2024-12-16T12:05:12Z"
    },
    {
      "repository": "ysfzrn/react-nav-page",
      "file": "android/src/main/java/com/reactnavpage/ReactNavPagePackage.kt",
      "url": "https://github.com/ysfzrn/react-nav-page/blob/4580ccb280ddb75cabab80590fe6c0e28fde4b94/android/src/main/java/com/reactnavpage/ReactNavPagePackage.kt",
      "fileContent": "package com.reactnavpage\n\nimport android.view.View\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ReactShadowNode\nimport com.facebook.react.uimanager.ViewManager\nimport java.util.ArrayList\nimport java.util.HashMap\n\nclass ReactNavPagePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNavPageModule.NAME) {\n      ReactNavPageModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    val viewManagers: MutableList<ViewManager<*, *>> = ArrayList()\n    viewManagers.add(SharedElementViewManager())\n    viewManagers.add(SharedElementImageManager())\n    return viewManagers\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[ReactNavPageModule.NAME] = ReactModuleInfo(\n        ReactNavPageModule.NAME,\n        ReactNavPageModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 4,
      "lastCommitDate": "2024-05-03T11:48:56Z"
    },
    {
      "repository": "openmobilehub/react-native-omh-storage",
      "file": "packages/core/android/src/main/java/com/openmobilehub/reactnative/storage/core/StorageCorePackage.kt",
      "url": "https://github.com/openmobilehub/react-native-omh-storage/blob/32252635fa01a80aa80a38a7a7a6203beebf2952/packages/core/android/src/main/java/com/openmobilehub/reactnative/storage/core/StorageCorePackage.kt",
      "fileContent": "package com.openmobilehub.reactnative.storage.core\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport java.util.HashMap\n\nclass StorageCorePackage : TurboReactPackage() {\n  /**\n   * Initialize and export modules based on the name of the required module\n   */\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return when (name) {\n      else -> null\n    }\n  }\n\n  /**\n   * Declare info about exported modules\n   */\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    /**\n     * Here declare the array of exported modules\n     */\n    val moduleList: Array<Class<out NativeModule?>> = arrayOf()\n    val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n    /**\n     * And here just iterate on that array and produce the info provider instance\n     */\n    for (moduleClass in moduleList) {\n      val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n      reactModuleInfoMap[reactModule.name] =\n        ReactModuleInfo(\n          reactModule.name,\n          moduleClass.name,\n          true,\n          reactModule.needsEagerInit,\n          reactModule.hasConstants,\n          reactModule.isCxxModule,\n          TurboModule::class.java.isAssignableFrom(moduleClass)\n        )\n    }\n    return ReactModuleInfoProvider { reactModuleInfoMap }\n  }\n}\n",
      "stars": 7,
      "lastCommitDate": "2024-10-28T12:32:53Z"
    },
    {
      "repository": "mfazekas/rn-spm-rfc-poc",
      "file": "android/src/main/java/com/rnspmrfcpoc/RnSpmRfcPocPackage.kt",
      "url": "https://github.com/mfazekas/rn-spm-rfc-poc/blob/4bdbe8e1d7646c73a72c7c4039ff12a0c46df7de/android/src/main/java/com/rnspmrfcpoc/RnSpmRfcPocPackage.kt",
      "fileContent": "package com.rnspmrfcpoc\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnSpmRfcPocPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnSpmRfcPocModule.NAME) {\n      RnSpmRfcPocModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnSpmRfcPocModule.NAME] = ReactModuleInfo(\n        RnSpmRfcPocModule.NAME,\n        RnSpmRfcPocModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-05-20T17:51:01Z"
    },
    {
      "repository": "joemun/uimanagermodule-adduiblock-test",
      "file": "RTNCalculator/android/src/main/java/com/rtncalculator/CalculatorPackage.kt",
      "url": "https://github.com/joemun/uimanagermodule-adduiblock-test/blob/110a8eba6c70e4fe2047f3faf3d253bd62dcd7f8/RTNCalculator/android/src/main/java/com/rtncalculator/CalculatorPackage.kt",
      "fileContent": "package com.rtncalculator;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass CalculatorPackage : TurboReactPackage() {\n  override fun getModule(name: String?, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == CalculatorModule.NAME) {\n      CalculatorModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      CalculatorModule.NAME to ReactModuleInfo(\n        CalculatorModule.NAME,\n        CalculatorModule.NAME,\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        true, // hasConstants\n        false, // isCxxModule\n        true // isTurboModule\n      )\n    )\n  }\n}",
      "stars": 0,
      "lastCommitDate": "2023-09-07T02:19:50Z"
    },
    {
      "repository": "margelo/react-native-app-logs",
      "file": "android/src/main/java/com/applogs/AppLogsPackage.kt",
      "url": "https://github.com/margelo/react-native-app-logs/blob/59931f8f7d5ed63159f339fa3d2a02237506a795/android/src/main/java/com/applogs/AppLogsPackage.kt",
      "fileContent": "package com.applogs\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AppLogsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AppLogsModule.NAME) {\n      AppLogsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AppLogsModule.NAME] = ReactModuleInfo(\n        AppLogsModule.NAME,\n        AppLogsModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 18,
      "lastCommitDate": "2024-10-30T15:51:15Z"
    },
    {
      "repository": "beanchips/facebookreactnative",
      "file": "packages/react-native/ReactAndroid/src/main/java/com/facebook/react/shell/MainReactPackage.kt",
      "url": "https://github.com/beanchips/facebookreactnative/blob/da6272106124376c94efde38177469a774fe0a40/packages/react-native/ReactAndroid/src/main/java/com/facebook/react/shell/MainReactPackage.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.shell\n\nimport android.annotation.SuppressLint\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.animated.NativeAnimatedModule\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.ClassFinder\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfo.Companion.classIsTurboModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.modules.accessibilityinfo.AccessibilityInfoModule\nimport com.facebook.react.modules.appearance.AppearanceModule\nimport com.facebook.react.modules.appstate.AppStateModule\nimport com.facebook.react.modules.blob.BlobModule\nimport com.facebook.react.modules.blob.FileReaderModule\nimport com.facebook.react.modules.camera.ImageStoreManager\nimport com.facebook.react.modules.clipboard.ClipboardModule\nimport com.facebook.react.modules.devloading.DevLoadingModule\nimport com.facebook.react.modules.devtoolsruntimesettings.ReactDevToolsRuntimeSettingsModule\nimport com.facebook.react.modules.dialog.DialogModule\nimport com.facebook.react.modules.fresco.FrescoModule\nimport com.facebook.react.modules.i18nmanager.I18nManagerModule\nimport com.facebook.react.modules.image.ImageLoaderModule\nimport com.facebook.react.modules.intent.IntentModule\nimport com.facebook.react.modules.network.NetworkingModule\nimport com.facebook.react.modules.permissions.PermissionsModule\nimport com.facebook.react.modules.reactdevtoolssettings.ReactDevToolsSettingsManagerModule\nimport com.facebook.react.modules.share.ShareModule\nimport com.facebook.react.modules.sound.SoundManagerModule\nimport com.facebook.react.modules.statusbar.StatusBarModule\nimport com.facebook.react.modules.toast.ToastModule\nimport com.facebook.react.modules.vibration.VibrationModule\nimport com.facebook.react.modules.websocket.WebSocketModule\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.react.views.drawer.ReactDrawerLayoutManager\nimport com.facebook.react.views.image.ReactImageManager\nimport com.facebook.react.views.modal.ReactModalHostManager\nimport com.facebook.react.views.progressbar.ReactProgressBarViewManager\nimport com.facebook.react.views.safeareaview.ReactSafeAreaViewManager\nimport com.facebook.react.views.scroll.ReactHorizontalScrollContainerViewManager\nimport com.facebook.react.views.scroll.ReactHorizontalScrollViewManager\nimport com.facebook.react.views.scroll.ReactScrollViewManager\nimport com.facebook.react.views.swiperefresh.SwipeRefreshLayoutManager\nimport com.facebook.react.views.switchview.ReactSwitchManager\nimport com.facebook.react.views.text.ReactRawTextManager\nimport com.facebook.react.views.text.ReactTextViewManager\nimport com.facebook.react.views.text.ReactVirtualTextViewManager\nimport com.facebook.react.views.text.frescosupport.FrescoBasedReactTextInlineImageViewManager\nimport com.facebook.react.views.textinput.ReactTextInputManager\nimport com.facebook.react.views.unimplementedview.ReactUnimplementedViewManager\nimport com.facebook.react.views.view.ReactViewManager\n\n/**\n * Package defining basic modules and view managers.\n *\n * @param config configuration for the Main package.\n */\n@ReactModuleList(\n    nativeModules =\n        [\n            AccessibilityInfoModule::class,\n            AppearanceModule::class,\n            AppStateModule::class,\n            BlobModule::class,\n            DevLoadingModule::class,\n            FileReaderModule::class,\n            ClipboardModule::class,\n            DialogModule::class,\n            FrescoModule::class,\n            I18nManagerModule::class,\n            ImageLoaderModule::class,\n            ImageStoreManager::class,\n            IntentModule::class,\n            NativeAnimatedModule::class,\n            NetworkingModule::class,\n            PermissionsModule::class,\n            ReactDevToolsSettingsManagerModule::class,\n            ReactDevToolsRuntimeSettingsModule::class,\n            ShareModule::class,\n            SoundManagerModule::class,\n            StatusBarModule::class,\n            ToastModule::class,\n            VibrationModule::class,\n            WebSocketModule::class,\n        ])\npublic class MainReactPackage\n@JvmOverloads\nconstructor(private val config: MainPackageConfig? = null) :\n    BaseReactPackage(), ViewManagerOnDemandReactPackage {\n\n  override fun getModule(name: String, context: ReactApplicationContext): NativeModule? =\n      when (name) {\n        AccessibilityInfoModule.NAME -> AccessibilityInfoModule(context)\n        AppearanceModule.NAME -> AppearanceModule(context)\n        AppStateModule.NAME -> AppStateModule(context)\n        BlobModule.NAME -> BlobModule(context)\n        DevLoadingModule.NAME -> DevLoadingModule(context)\n        FileReaderModule.NAME -> FileReaderModule(context)\n        ClipboardModule.NAME -> ClipboardModule(context)\n        DialogModule.NAME -> DialogModule(context)\n        FrescoModule.NAME -> FrescoModule(context, true, config?.frescoConfig)\n        I18nManagerModule.NAME -> I18nManagerModule(context)\n        ImageLoaderModule.NAME -> ImageLoaderModule(context)\n        ImageStoreManager.NAME -> ImageStoreManager(context)\n        IntentModule.NAME -> IntentModule(context)\n        NativeAnimatedModule.NAME -> NativeAnimatedModule(context)\n        NetworkingModule.NAME -> NetworkingModule(context)\n        PermissionsModule.NAME -> PermissionsModule(context)\n        ShareModule.NAME -> ShareModule(context)\n        StatusBarModule.NAME -> StatusBarModule(context)\n        SoundManagerModule.NAME -> SoundManagerModule(context)\n        ToastModule.NAME -> ToastModule(context)\n        VibrationModule.NAME -> VibrationModule(context)\n        WebSocketModule.NAME -> WebSocketModule(context)\n        ReactDevToolsSettingsManagerModule.NAME -> ReactDevToolsSettingsManagerModule(context)\n        ReactDevToolsRuntimeSettingsModule.NAME -> ReactDevToolsRuntimeSettingsModule(context)\n        else -> null\n      }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> =\n      listOf(\n          ReactDrawerLayoutManager(),\n          ReactHorizontalScrollViewManager(),\n          ReactHorizontalScrollContainerViewManager(),\n          ReactProgressBarViewManager(),\n          ReactScrollViewManager(),\n          ReactSwitchManager(),\n          ReactSafeAreaViewManager(),\n          SwipeRefreshLayoutManager(),\n          // Native equivalents\n          FrescoBasedReactTextInlineImageViewManager(),\n          ReactImageManager(),\n          ReactModalHostManager(),\n          ReactRawTextManager(),\n          ReactTextInputManager(),\n          ReactTextViewManager(),\n          ReactViewManager(),\n          ReactVirtualTextViewManager(),\n          ReactUnimplementedViewManager())\n\n  /**\n   * A map of view managers that should be registered with\n   * [com.facebook.react.uimanager.UIManagerModule]\n   */\n  @SuppressLint(\"VisibleForTests\")\n  public val viewManagersMap: Map<String, ModuleSpec> =\n      mapOf(\n          ReactDrawerLayoutManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactDrawerLayoutManager() },\n          ReactHorizontalScrollViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactHorizontalScrollViewManager() },\n          ReactHorizontalScrollContainerViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactHorizontalScrollContainerViewManager() },\n          ReactProgressBarViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactProgressBarViewManager() },\n          ReactSafeAreaViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactSafeAreaViewManager() },\n          ReactScrollViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactScrollViewManager() },\n          ReactSwitchManager.REACT_CLASS to ModuleSpec.viewManagerSpec { ReactSwitchManager() },\n          SwipeRefreshLayoutManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { SwipeRefreshLayoutManager() },\n          FrescoBasedReactTextInlineImageViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { FrescoBasedReactTextInlineImageViewManager() },\n          ReactImageManager.REACT_CLASS to ModuleSpec.viewManagerSpec { ReactImageManager() },\n          ReactModalHostManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactModalHostManager() },\n          ReactRawTextManager.REACT_CLASS to ModuleSpec.viewManagerSpec { ReactRawTextManager() },\n          ReactTextInputManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactTextInputManager() },\n          ReactTextViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec { ReactTextViewManager() },\n          ReactViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec { ReactViewManager() },\n          ReactVirtualTextViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactVirtualTextViewManager() },\n          ReactUnimplementedViewManager.REACT_CLASS to\n              ModuleSpec.viewManagerSpec { ReactUnimplementedViewManager() })\n\n  public override fun getViewManagers(reactContext: ReactApplicationContext): List<ModuleSpec> =\n      viewManagersMap.values.toList()\n\n  override fun getViewManagerNames(reactContext: ReactApplicationContext): Collection<String> =\n      viewManagersMap.keys\n\n  override fun createViewManager(\n      reactContext: ReactApplicationContext,\n      viewManagerName: String\n  ): ViewManager<*, *>? {\n    val spec = viewManagersMap[viewManagerName]\n    return spec?.provider?.get() as? ViewManager<*, *>\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    if (!ClassFinder.canLoadClassesFromAnnotationProcessors()) {\n      return fallbackForMissingClass()\n    }\n    try {\n      val reactModuleInfoProviderClass =\n          ClassFinder.findClass(\n              \"com.facebook.react.shell.MainReactPackage$\\$ReactModuleInfoProvider\")\n      @Suppress(\"DEPRECATION\")\n      return reactModuleInfoProviderClass?.newInstance() as? ReactModuleInfoProvider\n          ?: fallbackForMissingClass()\n    } catch (e: ClassNotFoundException) {\n      return fallbackForMissingClass()\n    } catch (e: InstantiationException) {\n      throw RuntimeException(\n          \"No ReactModuleInfoProvider for MainReactPackage$\\$ReactModuleInfoProvider\", e)\n    } catch (e: IllegalAccessException) {\n      throw RuntimeException(\n          \"No ReactModuleInfoProvider for MainReactPackage$\\$ReactModuleInfoProvider\", e)\n    }\n  }\n\n  private fun fallbackForMissingClass(): ReactModuleInfoProvider {\n    // In the OSS case, the annotation processor does not run.\n    // We fall back to creating this by hand\n    val moduleList: Array<Class<*>> =\n        arrayOf(\n            AccessibilityInfoModule::class.java,\n            AppearanceModule::class.java,\n            AppStateModule::class.java,\n            BlobModule::class.java,\n            DevLoadingModule::class.java,\n            FileReaderModule::class.java,\n            ClipboardModule::class.java,\n            DialogModule::class.java,\n            FrescoModule::class.java,\n            I18nManagerModule::class.java,\n            ImageLoaderModule::class.java,\n            ImageStoreManager::class.java,\n            IntentModule::class.java,\n            NativeAnimatedModule::class.java,\n            NetworkingModule::class.java,\n            PermissionsModule::class.java,\n            ReactDevToolsSettingsManagerModule::class.java,\n            ReactDevToolsRuntimeSettingsModule::class.java,\n            ShareModule::class.java,\n            StatusBarModule::class.java,\n            SoundManagerModule::class.java,\n            ToastModule::class.java,\n            VibrationModule::class.java,\n            WebSocketModule::class.java)\n\n    val moduleMap =\n        moduleList\n            .filter { it.isAnnotationPresent(ReactModule::class.java) }\n            .associate { moduleClass ->\n              val reactModule = checkNotNull(moduleClass.getAnnotation(ReactModule::class.java))\n              reactModule.name to\n                  ReactModuleInfo(\n                      reactModule.name,\n                      moduleClass.name,\n                      reactModule.canOverrideExistingModule,\n                      reactModule.needsEagerInit,\n                      reactModule.isCxxModule,\n                      classIsTurboModule(moduleClass))\n            }\n    return ReactModuleInfoProvider { moduleMap }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-18T23:14:02Z"
    },
    {
      "repository": "SharifMasum/mobile-application",
      "file": "TurboModuleExample/android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "url": "https://github.com/SharifMasum/mobile-application/blob/5f816a4bbd32c8bda272455f342a344b3dd6197d/TurboModuleExample/android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "fileContent": "package com.nativelocalstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeLocalStoragePackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n        if (name == NativeLocalStorageModule.NAME) {\n            NativeLocalStorageModule(reactContext)\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            NativeLocalStorageModule.NAME to ReactModuleInfo(\n                _name = NativeLocalStorageModule.NAME,\n                _className = NativeLocalStorageModule.NAME,\n                _canOverrideExistingModule = false,\n                _needsEagerInit = false,\n                isCxxModule = false,\n                isTurboModule = true\n            )\n        )\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-12-12T10:42:39Z"
    },
    {
      "repository": "retyui/react-native-detect-maestro",
      "file": "android/src/main/java/com/retyui/detectmaestro/DetectMaestroTurboPackage.kt",
      "url": "https://github.com/retyui/react-native-detect-maestro/blob/aa9d7618838459a27a4d3dd7e840b7dd07b5b288/android/src/main/java/com/retyui/detectmaestro/DetectMaestroTurboPackage.kt",
      "fileContent": "package com.retyui.detectmaestro\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass DetectMaestroTurboPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            DetectMaestroModule.NAME -> DetectMaestroModule(reactContext)\n            else -> null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(DetectMaestroModule::class.java)\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}\n",
      "stars": 13,
      "lastCommitDate": "2024-02-26T07:24:08Z"
    },
    {
      "repository": "agoldis/react-native-mlkit-ocr",
      "file": "android/src/main/java/com/reactnativemlkitocr/MlkitOcrPackage.kt",
      "url": "https://github.com/agoldis/react-native-mlkit-ocr/blob/38064ca19f20a498f5e1c8bd32e22efc548ba0b5/android/src/main/java/com/reactnativemlkitocr/MlkitOcrPackage.kt",
      "fileContent": "package com.reactnativemlkitocr\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport java.util.*\n\nclass MlkitOcrPackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == MlkitOcrModuleImpl.NAME) {\n      MlkitOcrModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> =\n        HashMap()\n      val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[MlkitOcrModuleImpl.NAME] = ReactModuleInfo(\n        MlkitOcrModuleImpl.NAME,\n        MlkitOcrModuleImpl.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n\n",
      "stars": 179,
      "lastCommitDate": "2023-09-30T22:40:23Z"
    },
    {
      "repository": "christianbaroni/react-native-turbo-haptics",
      "file": "package/android/src/fabric/java/com/turbohaptics/TurboHapticsPackage.kt",
      "url": "https://github.com/christianbaroni/react-native-turbo-haptics/blob/46f34a8347cc5b7a3f7949ad6399be029db4a25d/package/android/src/fabric/java/com/turbohaptics/TurboHapticsPackage.kt",
      "fileContent": "package com.turbohaptics\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass TurboHapticsPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        if (name == TurboHapticsModule.NAME) {\n            return TurboHapticsModule(reactContext)\n        }\n        return null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos = HashMap<String, ReactModuleInfo>()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos.apply {\n                put(\n                    TurboHapticsModule.NAME,\n                    ReactModuleInfo(\n                        TurboHapticsModule.NAME,\n                        TurboHapticsModule.NAME,\n                        false, // canOverrideExistingModule\n                        false, // needsEagerInit\n                        true,  // hasConstants\n                        false, // isCxxModule\n                        isTurboModule // isTurboModule\n                    )\n                )\n            }\n            moduleInfos\n        }\n    }\n}",
      "stars": 80,
      "lastCommitDate": "2024-11-14T22:39:21Z"
    },
    {
      "repository": "imgly/editor-react-native",
      "file": "android/src/main/kotlin/ly/img/editor/reactnative/module/IMGLYEditorPackage.kt",
      "url": "https://github.com/imgly/editor-react-native/blob/50edea7c23d0784a2db36d98658142842c2a4eb0/android/src/main/kotlin/ly/img/editor/reactnative/module/IMGLYEditorPackage.kt",
      "fileContent": "package ly.img.editor.reactnative.module\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass IMGLYEditorPackage : TurboReactPackage() {\n    override fun getModule(\n        name: String,\n        reactContext: ReactApplicationContext,\n    ): NativeModule? =\n        if (name == IMGLYEditorModule.NAME) {\n            IMGLYEditorModule(reactContext)\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider() =\n        ReactModuleInfoProvider {\n            mapOf(\n                IMGLYEditorModule.NAME to\n                    ReactModuleInfo(\n                        IMGLYEditorModule.NAME,\n                        IMGLYEditorModule.NAME,\n                        false, // canOverrideExistingModule\n                        false, // needsEagerInit\n                        true, // hasConstants\n                        false, // isCxxModule\n                        true, // isTurboModule\n                    ),\n            )\n        }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-05T09:12:42Z"
    },
    {
      "repository": "oneDotpy/CaribouQuest",
      "file": "nodemodules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt",
      "url": "https://github.com/oneDotpy/CaribouQuest/blob/978ba2e97d1f37f5620afdf39005f6fbeacc93f3/nodemodules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt",
      "fileContent": "package com.swmansion.gesturehandler\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport com.swmansion.gesturehandler.react.RNGestureHandlerButtonViewManager\nimport com.swmansion.gesturehandler.react.RNGestureHandlerModule\nimport com.swmansion.gesturehandler.react.RNGestureHandlerRootViewManager\n\n@ReactModuleList(\n  nativeModules = [\n    RNGestureHandlerModule::class\n  ]\n)\nclass RNGestureHandlerPackage : TurboReactPackage(), ViewManagerOnDemandReactPackage {\n  private val viewManagers: Map<String, ModuleSpec> by lazy {\n    mapOf(\n      RNGestureHandlerRootViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec {\n        RNGestureHandlerRootViewManager()\n      },\n      RNGestureHandlerButtonViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec {\n        RNGestureHandlerButtonViewManager()\n      }\n    )\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext) =\n    listOf<ViewManager<*, *>>(\n      RNGestureHandlerRootViewManager(),\n      RNGestureHandlerButtonViewManager()\n    )\n\n  override fun getViewManagerNames(reactContext: ReactApplicationContext?) =\n    viewManagers.keys.toList()\n\n  override fun getViewManagers(reactContext: ReactApplicationContext?): MutableList<ModuleSpec> =\n    viewManagers.values.toMutableList()\n\n  override fun createViewManager(\n    reactContext: ReactApplicationContext?,\n    viewManagerName: String?\n  ) = viewManagers[viewManagerName]?.provider?.get() as? ViewManager<*, *>\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNGestureHandlerModule.NAME) {\n      RNGestureHandlerModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    try {\n      val reactModuleInfoProviderClass =\n        Class.forName(\"com.swmansion.gesturehandler.RNGestureHandlerPackage$\\$ReactModuleInfoProvider\")\n      return reactModuleInfoProviderClass.getDeclaredConstructor().newInstance() as ReactModuleInfoProvider\n    } catch (e: ClassNotFoundException) {\n      return ReactModuleInfoProvider {\n        val reactModule: ReactModule = RNGestureHandlerModule::class.java.getAnnotation(ReactModule::class.java)!!\n\n        mutableMapOf(\n          RNGestureHandlerModule.NAME to ReactModuleInfo(\n            reactModule.name,\n            RNGestureHandlerModule::class.java.name,\n            reactModule.canOverrideExistingModule,\n            reactModule.needsEagerInit,\n            true, // Has constants is hardcoded to return true, so replacing it with `true` changes nothing.\n            reactModule.isCxxModule,\n            true\n          )\n        )\n      }\n    } catch (e: InstantiationException) {\n      throw RuntimeException(\"No ReactModuleInfoProvider for RNGestureHandlerPackage$\\$ReactModuleInfoProvider\", e)\n    } catch (e: IllegalAccessException) {\n      throw RuntimeException(\"No ReactModuleInfoProvider for RNGestureHandlerPackage$\\$ReactModuleInfoProvider\", e)\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-05-19T13:18:32Z"
    },
    {
      "repository": "Ugur-Atakan/react-native-background-step-counter",
      "file": "android/src/main/java/com/backgroundstepcounter/BackgroundStepCounterPackage.kt",
      "url": "https://github.com/Ugur-Atakan/react-native-background-step-counter/blob/5a25c90b2574ea29e5ef28415b48aa88422b81a9/android/src/main/java/com/backgroundstepcounter/BackgroundStepCounterPackage.kt",
      "fileContent": "package com.backgroundstepcounter\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\n\nclass BackgroundStepCounterPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == BackgroundStepCounterModule.NAME) {\n      BackgroundStepCounterModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[BackgroundStepCounterModule.NAME] = ReactModuleInfo(\n        BackgroundStepCounterModule.NAME,\n        BackgroundStepCounterModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}",
      "stars": 0,
      "lastCommitDate": "2024-04-20T19:39:45Z"
    },
    {
      "repository": "WalletConnect/walletconnect-monorepo",
      "file": "packages/react-native-compat/android/src/main/java/com/walletconnect/reactnativemodule/RNWalletConnectModulePackage.kt",
      "url": "https://github.com/WalletConnect/walletconnect-monorepo/blob/1463ac8dc4b143eb3d10bfe6dec1dfdf23c30062/packages/react-native-compat/android/src/main/java/com/walletconnect/reactnativemodule/RNWalletConnectModulePackage.kt",
      "fileContent": "package com.walletconnect.reactnativemodule\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RNWalletConnectModulePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNWalletConnectModuleModule.NAME) {\n      RNWalletConnectModuleModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNWalletConnectModuleModule.NAME] = ReactModuleInfo(\n        RNWalletConnectModuleModule.NAME,\n        RNWalletConnectModuleModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1477,
      "lastCommitDate": "2024-12-16T07:57:51Z"
    },
    {
      "repository": "moengage/React-Native",
      "file": "sdk/geofence/android/src/main/java/com/moengage/react/geofence/MoengageGeofencePackage.kt",
      "url": "https://github.com/moengage/React-Native/blob/b37abdf4c36f099d5b2497a276cc8f3a5483c4fa/sdk/geofence/android/src/main/java/com/moengage/react/geofence/MoengageGeofencePackage.kt",
      "fileContent": "/*\n * Copyright (c) 2014-2024 MoEngage Inc.\n *\n * All rights reserved.\n *\n *  Use of source code or binaries contained within MoEngage SDK is permitted only to enable use of the MoEngage platform by customers of MoEngage.\n *  Modification of source code and inclusion in mobile apps is explicitly allowed provided that all other conditions are met.\n *  Neither the name of MoEngage nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n *  Redistribution of source code or binaries is disallowed except with specific prior written permission. Any such redistribution must retain the above copyright notice, this list of conditions and the following disclaimer.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n \npackage com.moengage.react.geofence\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass MoengageGeofencePackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == MoEngageGeofenceHandler.NAME) {\n            MoEReactGeofence(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[MoEngageGeofenceHandler.NAME] = ReactModuleInfo(\n                MoEngageGeofenceHandler.NAME,\n                MoEngageGeofenceHandler.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}",
      "stars": 3,
      "lastCommitDate": "2024-11-25T08:46:55Z"
    },
    {
      "repository": "jpudysz/react-native-easy-lib",
      "file": "android/src/main/java/com/easylibpackage/EasyLibTurboPackage.kt",
      "url": "https://github.com/jpudysz/react-native-easy-lib/blob/f9ccf537ee6e0b11231ac4ceb4101d00db956272/android/src/main/java/com/easylibpackage/EasyLibTurboPackage.kt",
      "fileContent": "package com.easylibpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass EasyLibTurboPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == EasyLibModule.NAME) {\n            EasyLibModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val modules: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            modules[EasyLibModule.NAME] = ReactModuleInfo(\n                EasyLibModule.NAME,\n                EasyLibModule.NAME,\n                true,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            modules\n        }\n    }\n}\n",
      "stars": 5,
      "lastCommitDate": "2023-08-08T08:21:09Z"
    },
    {
      "repository": "jpudysz/react-native-turbo-mock-location-detector",
      "file": "android/src/main/java/com/reactnativemocklocationdetector/MockLocationDetectorPackage.kt",
      "url": "https://github.com/jpudysz/react-native-turbo-mock-location-detector/blob/985433282d4a00ae8a5bc7bd898c2eaa7cf6c5c6/android/src/main/java/com/reactnativemocklocationdetector/MockLocationDetectorPackage.kt",
      "fileContent": "package com.reactnativemocklocationdetector\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass MockLocationDetectorPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == MockLocationDetectorModule.NAME) {\n            MockLocationDetectorModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val modules: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            modules[MockLocationDetectorModule.NAME] = ReactModuleInfo(\n                MockLocationDetectorModule.NAME,\n                MockLocationDetectorModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            modules\n        }\n    }\n}\n",
      "stars": 91,
      "lastCommitDate": "2023-10-12T16:52:33Z"
    },
    {
      "repository": "huynq1175/react-native-splash-screen",
      "file": "android/src/main/java/com/splashscreen/SplashScreenPackage.kt",
      "url": "https://github.com/huynq1175/react-native-splash-screen/blob/25d66f6d60a05dbc21dfc05e33a922e36b60f650/android/src/main/java/com/splashscreen/SplashScreenPackage.kt",
      "fileContent": "package com.splashscreen\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass SplashScreenPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == SplashScreenModule.NAME) {\n      SplashScreenModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[SplashScreenModule.NAME] = ReactModuleInfo(\n        SplashScreenModule.NAME,\n        SplashScreenModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-18T12:53:10Z"
    },
    {
      "repository": "leerman/react-native-security-pack",
      "file": "android/src/main/java/com/leerman/rnsecuritypack/SecurityPackPackage.kt",
      "url": "https://github.com/leerman/react-native-security-pack/blob/72af12ba9becaa93e7bf0cc6fb8f3288e352c512/android/src/main/java/com/leerman/rnsecuritypack/SecurityPackPackage.kt",
      "fileContent": "package com.leerman.rnsecuritypack\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass SecurityPackPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == SecurityPackModule.NAME) {\n      SecurityPackModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[SecurityPackModule.NAME] = ReactModuleInfo(\n        SecurityPackModule.NAME,\n        SecurityPackModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-08-23T05:49:45Z"
    },
    {
      "repository": "pnthach95/awesome-library",
      "file": "android/src/main/java/com/awesomelibrary/AwesomeLibraryPackage.kt",
      "url": "https://github.com/pnthach95/awesome-library/blob/76c612f6161d5819bf04d55a855e55fe0bd83da4/android/src/main/java/com/awesomelibrary/AwesomeLibraryPackage.kt",
      "fileContent": "package com.awesomelibrary\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AwesomeLibraryPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AwesomeLibraryModule.NAME) {\n      AwesomeLibraryModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AwesomeLibraryModule.NAME] = ReactModuleInfo(\n        AwesomeLibraryModule.NAME,\n        AwesomeLibraryModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-10-26T13:42:12Z"
    },
    {
      "repository": "UmerGitNinja/Expo-App",
      "file": "apps/expo-go/android/expoview/src/main/java/versioned/host/exp/exponent/ExpoTurboPackage.kt",
      "url": "https://github.com/UmerGitNinja/Expo-App/blob/aa84314388b72d7940fcb5bf305c914397943032/apps/expo-go/android/expoview/src/main/java/versioned/host/exp/exponent/ExpoTurboPackage.kt",
      "fileContent": "// Copyright 2020-present 650 Industries. All rights reserved.\npackage versioned.host.exp.exponent\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.modules.intent.IntentModule\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport expo.modules.manifests.core.Manifest\nimport host.exp.exponent.kernel.KernelConstants\nimport versioned.host.exp.exponent.modules.internal.ExponentIntentModule\n\n/** Package defining basic modules and view managers.  */\n@ReactModuleList(\n  nativeModules = [\n    ExponentIntentModule::class\n  ]\n)\nclass ExpoTurboPackage(\n  private val experienceProperties: Map<String, Any?>,\n  private val manifest: Manifest\n) : TurboReactPackage() {\n  override fun getModule(name: String, context: ReactApplicationContext): NativeModule? {\n    val isVerified = manifest.isVerified()\n    return when (name) {\n      IntentModule.NAME -> ExponentIntentModule(\n        context,\n        experienceProperties\n      )\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return try {\n      // TODO(Bacon): Does this need to reflect ExpoTurboPackage$$ReactModuleInfoProvider ?\n      val reactModuleInfoProviderClass = Class.forName(\"com.facebook.react.shell.MainReactPackage$\\$ReactModuleInfoProvider\")\n      reactModuleInfoProviderClass.newInstance() as ReactModuleInfoProvider\n    } catch (e: ClassNotFoundException) {\n      // In OSS case, the annotation processor does not run. We fall back on creating this by hand\n      val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n        ExponentIntentModule::class.java\n      )\n      val reactModuleInfoMap = mutableMapOf<String, ReactModuleInfo>()\n      for (moduleClass in moduleList) {\n        val reactModule = moduleClass.getAnnotation(ReactModule::class.java)!!\n        val isTurbo = TurboModule::class.java.isAssignableFrom(moduleClass)\n\n        reactModuleInfoMap[reactModule.name] = ReactModuleInfo(\n          reactModule.name,\n          moduleClass.name,\n          reactModule.canOverrideExistingModule,\n          reactModule.needsEagerInit,\n          reactModule.hasConstants,\n          reactModule.isCxxModule,\n          isTurbo\n        )\n      }\n      ReactModuleInfoProvider { reactModuleInfoMap }\n    } catch (e: InstantiationException) {\n      throw RuntimeException(\n        \"No ReactModuleInfoProvider for CoreModulesPackage$\\$ReactModuleInfoProvider\",\n        e\n      )\n    } catch (e: IllegalAccessException) {\n      throw RuntimeException(\n        \"No ReactModuleInfoProvider for CoreModulesPackage$\\$ReactModuleInfoProvider\",\n        e\n      )\n    }\n  }\n\n  companion object {\n    private val TAG = ExpoTurboPackage::class.java.simpleName\n\n    fun kernelExpoTurboPackage(manifest: Manifest, initialURL: String?): ExpoTurboPackage {\n      val kernelExperienceProperties = mutableMapOf(\n        KernelConstants.LINKING_URI_KEY to \"exp://\",\n        KernelConstants.IS_HEADLESS_KEY to false\n      ).apply {\n        if (initialURL != null) {\n          this[KernelConstants.INTENT_URI_KEY] = initialURL\n        }\n      }\n      return ExpoTurboPackage(kernelExperienceProperties, manifest)\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-06-11T10:41:09Z"
    },
    {
      "repository": "sharmahdk13s/react-native-apple-signin-modifier",
      "file": "android/src/main/java/com/modifier/ModifierPackage.kt",
      "url": "https://github.com/sharmahdk13s/react-native-apple-signin-modifier/blob/2553d9b17c22b30d3f76ac8bc1b9862a8522eefd/android/src/main/java/com/modifier/ModifierPackage.kt",
      "fileContent": "package com.modifier\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass ModifierPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ModifierModule.NAME) {\n      ModifierModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[ModifierModule.NAME] = ReactModuleInfo(\n        ModifierModule.NAME,\n        ModifierModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-10-03T13:55:34Z"
    },
    {
      "repository": "Wumpus-Central/midroid",
      "file": "src/com/discord/bridge/DCDModuleProvider.kt",
      "url": "https://github.com/Wumpus-Central/midroid/blob/b3741a1a74b96e656695f7f5a3654b0db21b949f/src/com/discord/bridge/DCDModuleProvider.kt",
      "fileContent": "package com.discord.bridge\n\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.ReactContextBaseJavaModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.LayoutShadowNode\nimport com.facebook.react.uimanager.ViewManager\nimport java.util.ArrayList\nimport kh.w\nimport kotlin.jvm.functions.Function1\nimport kotlin.jvm.internal.q\nimport lh.r\n\npublic object DCDModuleProvider {\n   public fun getLegacyPackageForModule(onNativeModule: (ReactApplicationContext) -> ReactContextBaseJavaModule): ReactPackage {\n      q.h(var1, \"onNativeModule\");\n      return getLegacyPackageForModuleWithViewManager$default(this, var1, null, 2, null);\n   }\n\n   public fun getLegacyPackageForModuleWithViewManager(\n      onNativeModule: ((ReactApplicationContext) -> ReactContextBaseJavaModule)? = null,\n      onViewManager: ((ReactApplicationContext) -> ViewManager<*, LayoutShadowNode>)? = null\n   ): ReactPackage {\n      return new ReactPackage(var1, var2) {\n         final Function1 $onNativeModule;\n         final Function1 $onViewManager;\n\n         {\n            this.$onNativeModule = var1;\n            this.$onViewManager = var2;\n         }\n\n         public java.util.List<ReactContextBaseJavaModule> createNativeModules(ReactApplicationContext var1) {\n            q.h(var1, \"reactContext\");\n            val var3: ReactContextBaseJavaModule;\n            if (this.$onNativeModule != null) {\n               var3 = this.$onNativeModule.invoke(var1) as ReactContextBaseJavaModule;\n            } else {\n               var3 = null;\n            }\n\n            return i.o(var3);\n         }\n\n         public java.util.List<ViewManager<?, LayoutShadowNode>> createViewManagers(ReactApplicationContext var1) {\n            q.h(var1, \"reactContext\");\n            val var3: ViewManager;\n            if (this.$onViewManager != null) {\n               var3 = this.$onViewManager.invoke(var1) as ViewManager;\n            } else {\n               var3 = null;\n            }\n\n            return i.o(var3);\n         }\n      };\n   }\n\n   public fun getTurboPackageForModule(moduleName: String, onNativeModule: (ReactApplicationContext) -> NativeModule): TurboReactPackage {\n      q.h(var1, \"moduleName\");\n      q.h(var2, \"onNativeModule\");\n      return new TurboReactPackage(var1, var2) {\n         final java.lang.String $moduleName;\n         final Function1 $onNativeModule;\n\n         {\n            this.$moduleName = var1;\n            this.$onNativeModule = var2;\n         }\n\n         private static final java.util.Map getReactModuleInfoProvider$lambda$0(java.lang.String var0) {\n            q.h(var0, \"$moduleName\");\n            return r.m(new Pair[]{w.a(var0, new ReactModuleInfo(var0, var0, false, false, true, false, true))});\n         }\n\n         public NativeModule getModule(java.lang.String var1, ReactApplicationContext var2) {\n            q.h(var1, \"name\");\n            q.h(var2, \"reactApplicationContext\");\n            val var3: NativeModule;\n            if (q.c(var1, this.$moduleName)) {\n               var3 = this.$onNativeModule.invoke(var2) as NativeModule;\n            } else {\n               var3 = null;\n            }\n\n            return var3;\n         }\n\n         public ReactModuleInfoProvider getReactModuleInfoProvider() {\n            return new a(this.$moduleName);\n         }\n      };\n   }\n\n   public fun getViewManagers(vararg onViewManager: (ReactApplicationContext) -> ViewManager<*, LayoutShadowNode>): ReactPackage {\n      q.h(var1, \"onViewManager\");\n      return new ReactPackage(var1) {\n         final Function1[] $onViewManager;\n\n         {\n            this.$onViewManager = var1;\n         }\n\n         public java.util.List<NativeModule> createNativeModules(ReactApplicationContext var1) {\n            q.h(var1, \"reactContext\");\n            return new ArrayList<>();\n         }\n\n         public java.util.List<ViewManager<?, LayoutShadowNode>> createViewManagers(ReactApplicationContext var1) {\n            q.h(var1, \"reactContext\");\n            val var5: Array<Array<Function1>> = this.$onViewManager;\n            val var4: ArrayList = new ArrayList(this.$onViewManager.length);\n            val var3: Int = var5.length;\n\n            for (int var2 = 0; var2 < var3; var2++) {\n               var4.add(var5[var2].invoke(var1) as ViewManager);\n            }\n\n            return var4;\n         }\n      };\n   }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-10-03T17:44:57Z"
    },
    {
      "repository": "alippo-com/mattermost-flutter",
      "file": "android/app/src/main/java/com/mattermost/rnbeta/MainApplication.kt",
      "url": "https://github.com/alippo-com/mattermost-flutter/blob/0a237e9c98c0af32a383f7f09e8864810e82ad4c/android/app/src/main/java/com/mattermost/rnbeta/MainApplication.kt",
      "fileContent": "package com.mattermost.rnbeta\n\nimport android.content.Context\nimport android.os.Bundle\nimport android.util.Log\n\nimport com.facebook.react.PackageList\nimport com.facebook.react.ReactHost\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.JSIModulePackage\nimport com.facebook.react.bridge.JSIModuleSpec\nimport com.facebook.react.bridge.JavaScriptContextHolder\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultReactHost.getDefaultReactHost\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.flipper.ReactNativeFlipper\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.modules.network.OkHttpClientProvider\nimport com.facebook.soloader.SoLoader\n\nimport com.mattermost.helpers.RealPathUtil\nimport com.mattermost.networkclient.RCTOkHttpClientFactory\nimport com.mattermost.share.ShareModule\n\nimport com.nozbe.watermelondb.jsi.WatermelonDBJSIPackage\n\nimport com.reactnativenavigation.NavigationApplication\n\nimport com.wix.reactnativenotifications.RNNotificationsPackage\nimport com.wix.reactnativenotifications.core.AppLaunchHelper\nimport com.wix.reactnativenotifications.core.AppLifecycleFacade\nimport com.wix.reactnativenotifications.core.JsIOHelper\nimport com.wix.reactnativenotifications.core.notification.INotificationsApplication\nimport com.wix.reactnativenotifications.core.notification.IPushNotification\n\nimport java.io.File\n\nclass MainApplication : NavigationApplication(), INotificationsApplication {\n    var instance: MainApplication? = null\n    var sharedExtensionIsOpened = false\n\n    override val reactNativeHost: ReactNativeHost =\n        object : DefaultReactNativeHost(this) {\n            override fun getPackages(): List<ReactPackage> =\n                PackageList(this).packages.apply {\n                    // Packages that cannot be autolinked yet can be added manually here, for example:\n                    // add(MyReactNativePackage())\n                    add(RNNotificationsPackage(this@MainApplication))\n                    add(object : TurboReactPackage() {\n                        override fun getModule(\n                            name: String,\n                            reactContext: ReactApplicationContext\n                        ): NativeModule {\n                            return when (name) {\n                                \"MattermostManaged\" -> MattermostManagedModule.getInstance(\n                                    reactContext\n                                )\n                                \"MattermostShare\" -> ShareModule.getInstance(reactContext)\n                                \"Notifications\" -> NotificationsModule.getInstance(\n                                    instance,\n                                    reactContext\n                                )\n                                \"SplitView\" -> SplitViewModule.getInstance(\n                                    reactContext\n                                )\n                                else ->\n                                    throw IllegalArgumentException(\"Could not find module $name\")\n                            }\n                        }\n\n                        override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n                            return ReactModuleInfoProvider {\n                                val map: MutableMap<String, ReactModuleInfo> = java.util.HashMap()\n                                map[\"MattermostManaged\"] = ReactModuleInfo(\n                                    \"MattermostManaged\",\n                                    \"com.mattermost.rnbeta.MattermostManagedModule\",\n                                    false,\n                                    false,\n                                    false,\n                                    false\n                                )\n                                map[\"MattermostShare\"] = ReactModuleInfo(\n                                    \"MattermostShare\",\n                                    \"com.mattermost.share.ShareModule\",\n                                    false,\n                                    false,\n                                    false,\n                                    false\n                                )\n                                map[\"Notifications\"] = ReactModuleInfo(\n                                    \"Notifications\",\n                                    \"com.mattermost.rnbeta.NotificationsModule\",\n                                    false,\n                                    false,\n                                    false,\n                                    false\n                                )\n                                map[\"SplitView\"] = ReactModuleInfo(\n                                    \"SplitView\",\n                                    \"com.mattermost.rnbeta.SplitViewModule\",\n                                    false,\n                                    false,\n                                    false,\n                                    false\n                                )\n                                map\n                            }\n                        }\n                    })\n                }\n\n            override fun getJSIModulePackage(): JSIModulePackage {\n                return JSIModulePackage { reactApplicationContext: ReactApplicationContext?, jsContext: JavaScriptContextHolder? ->\n                    val modules =\n                        mutableListOf<JSIModuleSpec<*>>()\n                    modules.addAll(\n                        WatermelonDBJSIPackage().getJSIModules(\n                            reactApplicationContext,\n                            jsContext\n                        )\n                    )\n                    modules\n                }\n            }\n\n            override fun getJSMainModuleName(): String = \"index\"\n\n            override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n            override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED\n        }\n\n    override val reactHost: ReactHost\n        get() = getDefaultReactHost(this.applicationContext, reactNativeHost)\n\n    override fun onCreate() {\n        super.onCreate()\n        instance = this\n        val context: Context = applicationContext\n\n        // Delete any previous temp files created by the app\n        val tempFolder = File(context.cacheDir, RealPathUtil.CACHE_DIR_NAME)\n        RealPathUtil.deleteTempFiles(tempFolder)\n        Log.i(\"ReactNative\", \"Cleaning temp cache \" + tempFolder.absolutePath)\n\n        // Tells React Native to use our RCTOkHttpClientFactory which builds an OKHttpClient\n        // with a cookie jar defined in APIClientModule and an interceptor to intercept all\n        // requests that originate from React Native's OKHttpClient\n\n        // Tells React Native to use our RCTOkHttpClientFactory which builds an OKHttpClient\n        // with a cookie jar defined in APIClientModule and an interceptor to intercept all\n        // requests that originate from React Native's OKHttpClient\n        OkHttpClientProvider.setOkHttpClientFactory(RCTOkHttpClientFactory())\n\n        SoLoader.init(this, false)\n        if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n            // If you opted-in for the New Architecture, we load the native entry point for this app.\n            load()\n        }\n        ReactNativeFlipper.initializeFlipper(this, reactNativeHost.reactInstanceManager)\n    }\n\n    override fun getPushNotification(\n        context: Context?,\n        bundle: Bundle?,\n        defaultFacade: AppLifecycleFacade?,\n        defaultAppLaunchHelper: AppLaunchHelper?\n    ): IPushNotification {\n        return CustomPushNotification(\n            context,\n            bundle,\n            defaultFacade,\n            defaultAppLaunchHelper,\n            JsIOHelper()\n        )\n    }\n}\n",
      "stars": 7,
      "lastCommitDate": "2024-06-01T15:35:42Z"
    },
    {
      "repository": "DataDog/dd-sdk-reactnative",
      "file": "packages/react-native-session-replay/android/src/main/kotlin/com/datadog/reactnative/sessionreplay/DdSDKReactNativeSessionReplayPackage.kt",
      "url": "https://github.com/DataDog/dd-sdk-reactnative/blob/a8a041a4c5ffc097635ae95af0ed3e993264d016/packages/react-native-session-replay/android/src/main/kotlin/com/datadog/reactnative/sessionreplay/DdSDKReactNativeSessionReplayPackage.kt",
      "fileContent": "/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\npackage com.datadog.reactnative.sessionreplay\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\n/**\n * Package of native dd-sdk-reactnative native modules.\n */\nclass DdSDKReactNativeSessionReplayPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            DdSessionReplayImplementation.NAME -> DdSessionReplay(reactContext)\n            else -> null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            val moduleInfos = listOf(\n                DdSessionReplayImplementation.NAME\n            ).associateWith {\n                ReactModuleInfo(\n                    it,\n                    it,\n                    false,  // canOverrideExistingModule\n                    false,  // needsEagerInit\n                    true,  // hasConstants\n                    false,  // isCxxModule\n                    isTurboModule // isTurboModule\n                )\n            }\n\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 123,
      "lastCommitDate": "2024-12-18T15:59:33Z"
    },
    {
      "repository": "Nodonisko/react-native-quick-qrcode",
      "file": "android/src/main/java/com/quickqrcode/QuickQrcodePackage.kt",
      "url": "https://github.com/Nodonisko/react-native-quick-qrcode/blob/9db63bdc1485328875469d930c3729ca167ecabe/android/src/main/java/com/quickqrcode/QuickQrcodePackage.kt",
      "fileContent": "package com.quickqrcode\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass QuickQrcodePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == QuickQrcodeModule.NAME) {\n      QuickQrcodeModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[QuickQrcodeModule.NAME] = ReactModuleInfo(\n        QuickQrcodeModule.NAME,\n        QuickQrcodeModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-26T18:59:18Z"
    },
    {
      "repository": "unomed-dev/react-native-matrix-sdk",
      "file": "android/src/main/java/com/unomed/reactnativematrixsdk/ReactNativeMatrixSdkPackage.kt",
      "url": "https://github.com/unomed-dev/react-native-matrix-sdk/blob/af45eb3c8b2c886cc51331f7970da867d18fe1ee/android/src/main/java/com/unomed/reactnativematrixsdk/ReactNativeMatrixSdkPackage.kt",
      "fileContent": "// Generated by uniffi-bindgen-react-native\npackage com.unomed.reactnativematrixsdk\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass ReactNativeMatrixSdkPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeMatrixSdkModule.NAME) {\n      ReactNativeMatrixSdkModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[ReactNativeMatrixSdkModule.NAME] = ReactModuleInfo(\n        ReactNativeMatrixSdkModule.NAME,\n        ReactNativeMatrixSdkModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}",
      "stars": 21,
      "lastCommitDate": "2024-12-19T07:43:39Z"
    },
    {
      "repository": "callstack-internal/with-react-native-oss-notice",
      "file": "packages/with-react-native-oss-notice/android/src/main/java/com/withreactnativeossnotice/WithReactNativeOSSNoticeTurboPackage.kt",
      "url": "https://github.com/callstack-internal/with-react-native-oss-notice/blob/ffb9f8ac96f7c022a8892d5737be9682710f1fbe/packages/with-react-native-oss-notice/android/src/main/java/com/withreactnativeossnotice/WithReactNativeOSSNoticeTurboPackage.kt",
      "fileContent": "package com.withreactnativeossnotice\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass WithReactNativeOSSNoticeTurboPackage: TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            WithReactNativeOSSNoticeModule.NAME -> WithReactNativeOSSNoticeModule(reactContext)\n            else -> null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            WithReactNativeOSSNoticeModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}\n",
      "stars": 6,
      "lastCommitDate": "2023-11-06T17:52:51Z"
    },
    {
      "repository": "mavbozo/react-native-securecrypto",
      "file": "android/src/main/java/com/mavbozo/rnsecurecrypto/SecurecryptoPackage.kt",
      "url": "https://github.com/mavbozo/react-native-securecrypto/blob/813489cfdb253718e5be400021dc327cebb6bd8b/android/src/main/java/com/mavbozo/rnsecurecrypto/SecurecryptoPackage.kt",
      "fileContent": "package com.mavbozo.rnsecurecrypto\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass SecurecryptoPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == SecurecryptoModule.NAME) {\n      SecurecryptoModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[SecurecryptoModule.NAME] = ReactModuleInfo(\n        SecurecryptoModule.NAME,\n        SecurecryptoModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-03T07:39:24Z"
    },
    {
      "repository": "sriharsha-y/react-native-app-quick-actions",
      "file": "android/src/main/java/com/appquickactions/AppQuickActionsPackage.kt",
      "url": "https://github.com/sriharsha-y/react-native-app-quick-actions/blob/31cbe396fb2713c3609f91f6e5c8839554e78869/android/src/main/java/com/appquickactions/AppQuickActionsPackage.kt",
      "fileContent": "package com.appquickactions\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AppQuickActionsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AppQuickActionsModule.NAME) {\n      AppQuickActionsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AppQuickActionsModule.NAME] = ReactModuleInfo(\n        AppQuickActionsModule.NAME,\n        AppQuickActionsModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-02T20:04:33Z"
    },
    {
      "repository": "SpeedcuberOSS/react-native-location-status",
      "file": "android/src/main/java/dev/jhale/react/locationstatus/LocationStatusPackage.kt",
      "url": "https://github.com/SpeedcuberOSS/react-native-location-status/blob/38dcf5c5ba96006a2c718b203fdcf75061a3cd13/android/src/main/java/dev/jhale/react/locationstatus/LocationStatusPackage.kt",
      "fileContent": "package dev.jhale.react.locationstatus\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass LocationStatusPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == LocationStatusModule.NAME) {\n      LocationStatusModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[LocationStatusModule.NAME] = ReactModuleInfo(\n        LocationStatusModule.NAME,\n        LocationStatusModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-08T04:40:25Z"
    },
    {
      "repository": "mateusz1913/rnbridgingtutorial",
      "file": "app-info-package/android/src/main/java/com/appinfopackage/AppInfoTurboPackage.kt",
      "url": "https://github.com/mateusz1913/rnbridgingtutorial/blob/5ffbcb451066cd43807337a3c1a42c26402a814f/app-info-package/android/src/main/java/com/appinfopackage/AppInfoTurboPackage.kt",
      "fileContent": "package com.appinfopackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass AppInfoTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            AppInfoModule.NAME -> AppInfoModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n            AppInfoModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}\n",
      "stars": 70,
      "lastCommitDate": "2024-06-02T08:49:10Z"
    },
    {
      "repository": "pnthach95/react-native-root-view-background",
      "file": "android/src/main/java/vn/pnthach95/reactnativerootviewbackground/RootViewBackgroundPackage.kt",
      "url": "https://github.com/pnthach95/react-native-root-view-background/blob/7af4570fc0a26a5739580b3f6fbe0ecde1f1b8e8/android/src/main/java/vn/pnthach95/reactnativerootviewbackground/RootViewBackgroundPackage.kt",
      "fileContent": "package vn.pnthach95.reactnativerootviewbackground\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RootViewBackgroundPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RootViewBackgroundModule.NAME) {\n      RootViewBackgroundModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RootViewBackgroundModule.NAME] = ReactModuleInfo(\n        RootViewBackgroundModule.NAME,\n        RootViewBackgroundModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 47,
      "lastCommitDate": "2024-11-06T01:28:15Z"
    },
    {
      "repository": "Vadko/react-native-file-viewer-turbo",
      "file": "android/src/main/java/com/fileviewerturbo/FileViewerTurboPackage.kt",
      "url": "https://github.com/Vadko/react-native-file-viewer-turbo/blob/1c38d345e526f7466c4e443f9df90f73896d15e8/android/src/main/java/com/fileviewerturbo/FileViewerTurboPackage.kt",
      "fileContent": "package com.fileviewerturbo\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass FileViewerTurboPackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == FileViewerTurboModuleImpl.NAME) {\n      FileViewerTurboModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[FileViewerTurboModuleImpl.NAME] = ReactModuleInfo(\n        FileViewerTurboModuleImpl.NAME,\n        FileViewerTurboModuleImpl.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-12-10T00:18:25Z"
    },
    {
      "repository": "MissingCore/react-native-metadata-retriever",
      "file": "android/src/main/java/com/cyanchill/missingcore/metadataretriever/MetadataRetrieverPackage.kt",
      "url": "https://github.com/MissingCore/react-native-metadata-retriever/blob/7bf52545dff27b7006a3a2f364b841ab28b3d1b4/android/src/main/java/com/cyanchill/missingcore/metadataretriever/MetadataRetrieverPackage.kt",
      "fileContent": "package com.cyanchill.missingcore.metadataretriever\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\n\nclass MetadataRetrieverPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == MetadataRetrieverModule.NAME) {\n      MetadataRetrieverModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[MetadataRetrieverModule.NAME] = ReactModuleInfo(\n        MetadataRetrieverModule.NAME,\n        MetadataRetrieverModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-12-10T23:20:40Z"
    },
    {
      "repository": "Amsterdam/amsterdam-app-frontend",
      "file": "react-native-salesforce-messaging-in-app/android/src/main/java/com/salesforcemessaginginapp/SalesforceMessagingInAppPackage.kt",
      "url": "https://github.com/Amsterdam/amsterdam-app-frontend/blob/ae916496f4c8446b1508448c6a2175ac6c7774a3/react-native-salesforce-messaging-in-app/android/src/main/java/com/salesforcemessaginginapp/SalesforceMessagingInAppPackage.kt",
      "fileContent": "package com.salesforcemessaginginapp\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass SalesforceMessagingInAppPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == SalesforceMessagingInAppModule.NAME) {\n      SalesforceMessagingInAppModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[SalesforceMessagingInAppModule.NAME] = ReactModuleInfo(\n        SalesforceMessagingInAppModule.NAME,\n        SalesforceMessagingInAppModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 8,
      "lastCommitDate": "2024-12-17T15:16:39Z"
    },
    {
      "repository": "maaxg/rn-native-camera",
      "file": "android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "url": "https://github.com/maaxg/rn-native-camera/blob/5107e03bf1d4daf70a138c62c0a55c45b9260e47/android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "fileContent": "package com.app.specs\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeLocalStoragePackage : TurboReactPackage() {\n\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n        if (name == NativeLocalStorageModule.NAME) {\n            NativeLocalStorageModule(reactContext)\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            NativeLocalStorageModule.NAME to ReactModuleInfo(\n                _name = NativeLocalStorageModule.NAME,\n                _className = NativeLocalStorageModule.NAME,\n                _canOverrideExistingModule = false,\n                _needsEagerInit = false,\n                isCxxModule = false,\n                isTurboModule = true\n            )\n        )\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-12-08T20:25:09Z"
    },
    {
      "repository": "brainylab/react-native-brother-printers",
      "file": "android/src/main/java/com/brainylab/reactnativebrotherprinters/ReactNativeBrotherPrintersPackage.kt",
      "url": "https://github.com/brainylab/react-native-brother-printers/blob/b355b43c527e3c99ddb1704b44a847da6add2501/android/src/main/java/com/brainylab/reactnativebrotherprinters/ReactNativeBrotherPrintersPackage.kt",
      "fileContent": "package com.brainylab.reactnativebrotherprinters\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass ReactNativeBrotherPrintersPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeBrotherPrintersModule.NAME) {\n      ReactNativeBrotherPrintersModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[ReactNativeBrotherPrintersModule.NAME] = ReactModuleInfo(\n        ReactNativeBrotherPrintersModule.NAME,\n        ReactNativeBrotherPrintersModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-10-23T19:30:18Z"
    },
    {
      "repository": "atlj/react-native-background-remover",
      "file": "packages/react-native-background-remover/android/src/main/java/com/backgroundremover/BackgroundRemoverPackage.kt",
      "url": "https://github.com/atlj/react-native-background-remover/blob/0b964b107f9d9952749b9218d809125b17ade15d/packages/react-native-background-remover/android/src/main/java/com/backgroundremover/BackgroundRemoverPackage.kt",
      "fileContent": "package com.backgroundremover\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass BackgroundRemoverPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == BackgroundRemoverModule.NAME) {\n      BackgroundRemoverModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[BackgroundRemoverModule.NAME] = ReactModuleInfo(\n        BackgroundRemoverModule.NAME,\n        BackgroundRemoverModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 54,
      "lastCommitDate": "2024-12-17T20:52:12Z"
    },
    {
      "repository": "bariscelik/react-native-fast-encoder",
      "file": "android/src/main/java/com/fastencoder/FastEncoderPackage.kt",
      "url": "https://github.com/bariscelik/react-native-fast-encoder/blob/260fa39c0da65e9f900279f13f711d8873e1c1a3/android/src/main/java/com/fastencoder/FastEncoderPackage.kt",
      "fileContent": "package com.fastencoder\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass FastEncoderPackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == FastEncoderModule.NAME) {\n      FastEncoderModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[FastEncoderModule.NAME] = ReactModuleInfo(\n        FastEncoderModule.NAME,\n        FastEncoderModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-18T05:10:05Z"
    },
    {
      "repository": "vicary/react-native-citizen-escposprinter",
      "file": "packages/react-native-citizen-escposprinter/android/src/main/java/com/citizenescposprinter/CitizenEscposprinterPackage.kt",
      "url": "https://github.com/vicary/react-native-citizen-escposprinter/blob/9df5c6a02e9849b86cc5bd04f81dd8097a35ad5d/packages/react-native-citizen-escposprinter/android/src/main/java/com/citizenescposprinter/CitizenEscposprinterPackage.kt",
      "fileContent": "package com.citizenescposprinter\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass CitizenEscposprinterPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == CitizenEscposprinterModule.NAME) {\n      CitizenEscposprinterModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[CitizenEscposprinterModule.NAME] = ReactModuleInfo(\n        CitizenEscposprinterModule.NAME,\n        CitizenEscposprinterModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 6,
      "lastCommitDate": "2024-10-09T10:24:27Z"
    },
    {
      "repository": "CarlosSTS/rtn-local-authentication",
      "file": "android/src/main/java/com/rtnlocalauthentication/LocalAuthenticationPackage.kt",
      "url": "https://github.com/CarlosSTS/rtn-local-authentication/blob/94cd0c54f74dcfd96fcb4828c173072787d0b197/android/src/main/java/com/rtnlocalauthentication/LocalAuthenticationPackage.kt",
      "fileContent": "package com.rtnlocalauthentication;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\n\nclass LocalAuthenticationPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == LocalAuthenticationModule.NAME) {\n            LocalAuthenticationModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            LocalAuthenticationModule.NAME to ReactModuleInfo(\n                LocalAuthenticationModule.NAME,\n                LocalAuthenticationModule.NAME,\n                false, // canOverrideExistingModule\n                false, // needsEagerInit\n                true, // hasConstants\n                false, // isCxxModule\n                true // isTurboModule\n            )\n        )\n    }\n}",
      "stars": 2,
      "lastCommitDate": "2024-10-05T13:49:09Z"
    },
    {
      "repository": "softgenicsShubham/react-native-device-brightness-new",
      "file": "android/src/main/java/com/devicebrightnessnew/DeviceBrightnessNewPackage.kt",
      "url": "https://github.com/softgenicsShubham/react-native-device-brightness-new/blob/dd9bb792add2a8d9ab2c528e3ef4a85210a548f2/android/src/main/java/com/devicebrightnessnew/DeviceBrightnessNewPackage.kt",
      "fileContent": "package com.devicebrightnessnew\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass DeviceBrightnessNewPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == DeviceBrightnessNewModule.NAME) {\n      DeviceBrightnessNewModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[DeviceBrightnessNewModule.NAME] = ReactModuleInfo(\n        DeviceBrightnessNewModule.NAME,\n        DeviceBrightnessNewModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-10-18T05:04:33Z"
    },
    {
      "repository": "brand001/nevisst",
      "file": "android/src/main/java/ch/nevis/mobile/authentication/sdk/react/NevisMobileAuthenticationSdkReactPackage.kt",
      "url": "https://github.com/brand001/nevisst/blob/4233913b9affce94294cc47390e69366964d2b8c/android/src/main/java/ch/nevis/mobile/authentication/sdk/react/NevisMobileAuthenticationSdkReactPackage.kt",
      "fileContent": "/*\n * Copyright © 2023 Nevis Security AG. All rights reserved.\n */\n\npackage ch.nevis.mobile.authentication.sdk.react\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NevisMobileAuthenticationSdkReactPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NevisMobileAuthenticationSdkReactModule.NAME) {\n            NevisMobileAuthenticationSdkReactModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[NevisMobileAuthenticationSdkReactModule.NAME] = ReactModuleInfo(\n                NevisMobileAuthenticationSdkReactModule.NAME,\n                NevisMobileAuthenticationSdkReactModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-08-27T06:37:12Z"
    },
    {
      "repository": "mateoguzmana/react-native-lz4",
      "file": "android/src/main/java/com/lz4/Lz4Package.kt",
      "url": "https://github.com/mateoguzmana/react-native-lz4/blob/e36dde1f1234939bc429fcae570fb07cb23871d9/android/src/main/java/com/lz4/Lz4Package.kt",
      "fileContent": "package com.lz4\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass Lz4Package : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == Lz4Module.NAME) {\n      Lz4Module(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[Lz4Module.NAME] = ReactModuleInfo(\n        Lz4Module.NAME,\n        Lz4Module.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 14,
      "lastCommitDate": "2024-10-12T23:28:59Z"
    },
    {
      "repository": "mattermost/react-native-emm",
      "file": "android/src/main/java/com/mattermost/emm/EmmPackage.kt",
      "url": "https://github.com/mattermost/react-native-emm/blob/3c71a9a6e24b916f84e7c6cc9858719feb8eecd1/android/src/main/java/com/mattermost/emm/EmmPackage.kt",
      "fileContent": "package com.mattermost.emm\n\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass EmmPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == EmmModuleImpl.NAME) {\n      EmmModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      EmmModuleImpl.NAME to ReactModuleInfo(\n        EmmModuleImpl.NAME,\n        EmmModuleImpl.NAME,\n        false,\n        false,\n        true,\n        false,\n        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      )\n    )\n  }\n}\n",
      "stars": 14,
      "lastCommitDate": "2024-12-17T10:14:06Z"
    },
    {
      "repository": "callstack/react-native-rapier",
      "file": "android/src/main/java/com/callstack/reactnativerapier/ReactNativeRapierPackage.kt",
      "url": "https://github.com/callstack/react-native-rapier/blob/533182886223aea1d773d01877671edf8c09c644/android/src/main/java/com/callstack/reactnativerapier/ReactNativeRapierPackage.kt",
      "fileContent": "package com.callstack.reactnativerapier\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ReactNativeRapierPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReactNativeRapierModule.NAME) {\n      ReactNativeRapierModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ReactNativeRapierModule.NAME] = ReactModuleInfo(\n        ReactNativeRapierModule.NAME,\n        ReactNativeRapierModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 29,
      "lastCommitDate": "2024-11-08T20:55:45Z"
    },
    {
      "repository": "NikitaDudin/react-native-android-navbar-height",
      "file": "android/src/main/java/com/androidnavbarheight/AndroidNavbarHeightPackage.kt",
      "url": "https://github.com/NikitaDudin/react-native-android-navbar-height/blob/e31b3ac869161a3c00e36734615e1b29283048a6/android/src/main/java/com/androidnavbarheight/AndroidNavbarHeightPackage.kt",
      "fileContent": "package com.androidnavbarheight\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass AndroidNavbarHeightPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == AndroidNavbarHeightModule.NAME) {\n      AndroidNavbarHeightModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[AndroidNavbarHeightModule.NAME] = ReactModuleInfo(\n        AndroidNavbarHeightModule.NAME,\n        AndroidNavbarHeightModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-02-09T18:10:32Z"
    },
    {
      "repository": "Mhp23/react-native-memorized-image",
      "file": "android/src/main/java/com/memorizedimage/MemorizedImagePackage.kt",
      "url": "https://github.com/Mhp23/react-native-memorized-image/blob/9796a88fd4df4adf10b3de8cf10acf4528f271b3/android/src/main/java/com/memorizedimage/MemorizedImagePackage.kt",
      "fileContent": "package com.memorizedimage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass MemorizedImagePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == MemorizedImageModule.NAME) {\n      MemorizedImageModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[MemorizedImageModule.NAME] = ReactModuleInfo(\n        MemorizedImageModule.NAME,\n        MemorizedImageModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-03-24T19:17:19Z"
    },
    {
      "repository": "Notificare/notificare-sdk-react-native",
      "file": "packages/react-native-notificare-geo/android/src/main/java/re/notifica/geo/react_native/NotificareGeoPackage.kt",
      "url": "https://github.com/Notificare/notificare-sdk-react-native/blob/8d9f7b299835b6b67050e1a1562e02b26e814b19/packages/react-native-notificare-geo/android/src/main/java/re/notifica/geo/react_native/NotificareGeoPackage.kt",
      "fileContent": "package re.notifica.geo.react_native\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\npublic class NotificareGeoPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NotificareGeoModule.NAME) {\n            NotificareGeoModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n            @Suppress(\"DEPRECATION\")\n            moduleInfos[NotificareGeoModule.NAME] = ReactModuleInfo(\n                NotificareGeoModule.NAME,\n                NotificareGeoModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 6,
      "lastCommitDate": "2024-10-30T16:49:15Z"
    },
    {
      "repository": "krystofwoldrich/sentry-react-native-ama",
      "file": "android/app/src/main/java/com/sentryreactnativeama/modules/TurboCrashPackage.kt",
      "url": "https://github.com/krystofwoldrich/sentry-react-native-ama/blob/a6bada2801d3aff433fa6300ad80c7ae22af9330/android/app/src/main/java/com/sentryreactnativeama/modules/TurboCrashPackage.kt",
      "fileContent": "package com.sentryreactnativeama.modules\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass TurboCrashPackage : TurboReactPackage() {\n    override fun getModule(\n        name: String,\n        reactApplicationContext: ReactApplicationContext\n    ): NativeModule? {\n        return if (name == TurboCrashModule.NAME) {\n            TurboCrashModule(reactApplicationContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> =\n                HashMap()\n            moduleInfos[TurboCrashModule.NAME] = ReactModuleInfo(\n                TurboCrashModule.NAME,\n                TurboCrashModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                true // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}",
      "stars": 1,
      "lastCommitDate": "2023-07-25T14:31:45Z"
    },
    {
      "repository": "huntie/react-native-macos",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "url": "https://github.com/huntie/react-native-macos/blob/67152e1fd1713087c2ef2fa7bb0adeaaea6739f7/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterApplication.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.app.Application\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.JSEngineResolutionAlgorithm\nimport com.facebook.react.ReactApplication\nimport com.facebook.react.ReactHost\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.annotations.UnstableReactNativeAPI\nimport com.facebook.react.common.assets.ReactFontManager\nimport com.facebook.react.common.mapbuffer.ReadableMapBuffer\nimport com.facebook.react.config.ReactFeatureFlags\nimport com.facebook.react.defaults.DefaultComponentsRegistry.Companion.register\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.fabric.ComponentFactory\nimport com.facebook.react.flipper.ReactNativeFlipper.initializeFlipper\nimport com.facebook.react.interfaces.exceptionmanager.ReactJsExceptionHandler\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.runtime.ReactHostImpl\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ViewManager\nimport com.facebook.soloader.SoLoader\n\nclass RNTesterApplication : Application(), ReactApplication {\n  override val reactNativeHost: ReactNativeHost by lazy {\n    if (ReactFeatureFlags.enableBridgelessArchitecture) {\n      throw RuntimeException(\"Should not use ReactNativeHost when Bridgeless enabled\")\n    }\n    object : DefaultReactNativeHost(this) {\n      public override fun getJSMainModuleName(): String = BuildConfig.JS_MAIN_MODULE_NAME\n\n      public override fun getBundleAssetName(): String = BuildConfig.BUNDLE_ASSET_NAME\n\n      override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n      public override fun getPackages(): List<ReactPackage> {\n        return listOf(\n            MainReactPackage(),\n            object : TurboReactPackage() {\n              override fun getModule(\n                  name: String,\n                  reactContext: ReactApplicationContext\n              ): NativeModule? {\n                if (!ReactFeatureFlags.useTurboModules) {\n                  return null\n                }\n                if (SampleTurboModule.NAME == name) {\n                  return SampleTurboModule(reactContext)\n                }\n                if (SampleLegacyModule.NAME == name) {\n                  return SampleLegacyModule(reactContext)\n                }\n                return null\n              }\n\n              // Note: Specialized annotation processor for @ReactModule isn't configured in OSS\n              // yet. For now, hardcode this information, though it's not necessary for most\n              // modules.\n              override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n                  ReactModuleInfoProvider {\n                    if (ReactFeatureFlags.useTurboModules) {\n                      mapOf(\n                          SampleTurboModule.NAME to\n                              ReactModuleInfo(\n                                  SampleTurboModule.NAME,\n                                  \"SampleTurboModule\",\n                                  false, // canOverrideExistingModule\n                                  false, // needsEagerInit\n                                  false, // isCxxModule\n                                  true // isTurboModule\n                                  ),\n                          SampleLegacyModule.NAME to\n                              ReactModuleInfo(\n                                  SampleLegacyModule.NAME,\n                                  \"SampleLegacyModule\",\n                                  false, // canOverrideExistingModule\n                                  false, // needsEagerInit\n                                  false, // isCxxModule\n                                  false // isTurboModule\n                                  ))\n                    } else {\n                      emptyMap()\n                    }\n                  }\n            },\n            object : ReactPackage {\n              override fun createNativeModules(\n                  reactContext: ReactApplicationContext\n              ): List<NativeModule> {\n                return emptyList()\n              }\n\n              override fun createViewManagers(\n                  reactContext: ReactApplicationContext\n              ): List<ViewManager<*, *>> =\n                  listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n            })\n      }\n\n      override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED_IN_FLAVOR\n    }\n  }\n\n  override fun onCreate() {\n    ReactFontManager.getInstance().addCustomFont(this, \"Rubik\", R.font.rubik)\n    super.onCreate()\n    SoLoader.init(this, /* native exopackage */ false)\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      load()\n    }\n    initializeFlipper(this, reactNativeHost.reactInstanceManager)\n  }\n\n  @UnstableReactNativeAPI\n  override val reactHost: ReactHost by lazy {\n    // Create an instance of ReactHost to manager the instance of ReactInstance,\n    // which is similar to how we use ReactNativeHost to manager instance of ReactInstanceManager\n    val reactHostDelegate = RNTesterReactHostDelegate(applicationContext)\n    val reactJsExceptionHandler = RNTesterReactJsExceptionHandler()\n    val componentFactory = ComponentFactory()\n    register(componentFactory)\n    ReactHostImpl(\n            this.applicationContext,\n            reactHostDelegate,\n            componentFactory,\n            true,\n            reactJsExceptionHandler,\n            true)\n        .apply {\n          jsEngineResolutionAlgorithm =\n              if (BuildConfig.IS_HERMES_ENABLED_IN_FLAVOR) {\n                JSEngineResolutionAlgorithm.HERMES\n              } else {\n                JSEngineResolutionAlgorithm.JSC\n              }\n          reactHostDelegate.reactHost = this\n        }\n  }\n\n  @UnstableReactNativeAPI\n  class RNTesterReactJsExceptionHandler : ReactJsExceptionHandler {\n    override fun reportJsException(errorMap: ReadableMapBuffer?) {}\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-06-17T06:40:06Z"
    },
    {
      "repository": "BILDIT-Platform/react-native-bildit-flybuy",
      "file": "mono/packages/livestatus/android/src/main/java/com/bilditplatform/rnflybuylivestatus/RnFlybuyLivestatusPackage.kt",
      "url": "https://github.com/BILDIT-Platform/react-native-bildit-flybuy/blob/b31e9b1be1b57fd04507ccf3c047f12a0a13e1e5/mono/packages/livestatus/android/src/main/java/com/bilditplatform/rnflybuylivestatus/RnFlybuyLivestatusPackage.kt",
      "fileContent": "package com.bilditplatform.rnflybuylivestatus\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnFlybuyLivestatusPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnFlybuyLivestatusModule.NAME) {\n      RnFlybuyLivestatusModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnFlybuyLivestatusModule.NAME] = ReactModuleInfo(\n        RnFlybuyLivestatusModule.NAME,\n        RnFlybuyLivestatusModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 9,
      "lastCommitDate": "2024-11-21T12:11:09Z"
    },
    {
      "repository": "hsjoberg/react-native-turbo-tor",
      "file": "_android/src/main/java/com/turbotor/TurboTorPackage.kt",
      "url": "https://github.com/hsjoberg/react-native-turbo-tor/blob/c75b8c855b292d18f2df64919c414db9faa4e5cf/_android/src/main/java/com/turbotor/TurboTorPackage.kt",
      "fileContent": "package com.turbotor\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass TurboTorPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TurboTorModule.NAME) {\n      TurboTorModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[TurboTorModule.NAME] = ReactModuleInfo(\n        TurboTorModule.NAME,\n        TurboTorModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-10-09T15:37:27Z"
    },
    {
      "repository": "huextrat/react-native-rate-app",
      "file": "android/src/main/java/com/rateapp/RateAppPackage.kt",
      "url": "https://github.com/huextrat/react-native-rate-app/blob/919a3b5cb16e91e8fa4b3a8d345e994ee39e661e/android/src/main/java/com/rateapp/RateAppPackage.kt",
      "fileContent": "package com.rateapp\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RateAppPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RateAppModule.NAME) {\n      RateAppModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[RateAppModule.NAME] = ReactModuleInfo(\n        RateAppModule.NAME,\n        RateAppModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 52,
      "lastCommitDate": "2024-12-18T19:55:06Z"
    },
    {
      "repository": "2lambda123/react-native",
      "file": "packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterReactHostDelegate.kt",
      "url": "https://github.com/2lambda123/react-native/blob/cfb4129e2ef494126ae54b1265c8e2ecd68cadb0/packages/rn-tester/android/app/src/main/java/com/facebook/react/uiapp/RNTesterReactHostDelegate.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.uiapp\n\nimport android.content.Context\nimport com.facebook.fbreact.specs.SampleLegacyModule\nimport com.facebook.fbreact.specs.SampleTurboModule\nimport com.facebook.react.JSEngineResolutionAlgorithm\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.ReactPackageTurboModuleManagerDelegate\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.JSBundleLoader\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.common.annotations.UnstableReactNativeAPI\nimport com.facebook.react.config.ReactFeatureFlags\nimport com.facebook.react.defaults.DefaultTurboModuleManagerDelegate\nimport com.facebook.react.fabric.ReactNativeConfig\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.runtime.BindingsInstaller\nimport com.facebook.react.runtime.JSCInstance\nimport com.facebook.react.runtime.JSEngineInstance\nimport com.facebook.react.runtime.ReactHostDelegate\nimport com.facebook.react.runtime.ReactHostImpl\nimport com.facebook.react.runtime.hermes.HermesInstance\nimport com.facebook.react.shell.MainReactPackage\nimport com.facebook.react.uiapp.component.MyLegacyViewManager\nimport com.facebook.react.uiapp.component.MyNativeViewManager\nimport com.facebook.react.uimanager.ViewManager\n\n@UnstableReactNativeAPI\nclass RNTesterReactHostDelegate internal constructor(context: Context) : ReactHostDelegate {\n  var reactHost: ReactHostImpl? = null\n\n  override val jsMainModulePath: String = \"js/RNTesterApp.android\"\n\n  override val jsBundleLoader: JSBundleLoader =\n      JSBundleLoader.createAssetLoader(context, \"assets://RNTesterApp.android.bundle\", true)\n\n  @get:Synchronized override val bindingsInstaller: BindingsInstaller? = null\n\n  override val turboModuleManagerDelegateBuilder: ReactPackageTurboModuleManagerDelegate.Builder =\n      DefaultTurboModuleManagerDelegate.Builder()\n\n  override val jsEngineInstance: JSEngineInstance =\n      if (reactHost?.jsEngineResolutionAlgorithm == JSEngineResolutionAlgorithm.JSC) {\n        JSCInstance()\n      } else {\n        HermesInstance()\n      }\n\n  override fun handleInstanceException(error: Exception) {}\n\n  override fun getReactNativeConfig(moduleProvider: (String) -> NativeModule?): ReactNativeConfig =\n      ReactNativeConfig.DEFAULT_CONFIG\n\n  override val reactPackages: List<ReactPackage> by lazy {\n    listOf(\n        MainReactPackage(),\n        object : TurboReactPackage() {\n          override fun getModule(\n              name: String,\n              reactContext: ReactApplicationContext\n          ): NativeModule? =\n              when {\n                !ReactFeatureFlags.useTurboModules -> null\n                name == SampleTurboModule.NAME -> SampleTurboModule(reactContext)\n                name == SampleLegacyModule.NAME -> SampleLegacyModule(reactContext)\n                else -> null\n              }\n\n          // Note: Specialized annotation processor for @ReactModule isn't\n          // configured in OSS\n          // yet. For now, hardcode this information, though it's not necessary\n          // for most modules\n          override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n              ReactModuleInfoProvider {\n                if (ReactFeatureFlags.useTurboModules) {\n                  mapOf(\n                      SampleTurboModule.NAME to\n                          ReactModuleInfo(\n                              SampleTurboModule.NAME,\n                              \"SampleTurboModule\",\n                              false, // canOverrideExistingModule\n                              false, // needsEagerInit\n                              false, // isCxxModule\n                              true // isTurboModule\n                              ),\n                      SampleLegacyModule.NAME to\n                          ReactModuleInfo(\n                              SampleLegacyModule.NAME,\n                              \"SampleLegacyModule\",\n                              false, // canOverrideExistingModule\n                              false, // needsEagerInit\n                              false, // isCxxModule\n                              false // isTurboModule\n                              ),\n                  )\n                } else {\n                  emptyMap()\n                }\n              }\n        },\n        object : ViewManagerOnDemandReactPackage, ReactPackage {\n          override fun createNativeModules(\n              reactContext: ReactApplicationContext\n          ): List<NativeModule> = emptyList()\n\n          override fun createViewManagers(\n              reactContext: ReactApplicationContext\n          ): List<ViewManager<*, *>> =\n              listOf(MyNativeViewManager(), MyLegacyViewManager(reactContext))\n\n          override fun getViewManagerNames(\n              reactContext: ReactApplicationContext\n          ): Collection<String> =\n              listOf(MyNativeViewManager.REACT_CLASS, MyLegacyViewManager.REACT_CLASS)\n\n          override fun createViewManager(\n              reactContext: ReactApplicationContext,\n              viewManagerName: String\n          ): ViewManager<*, *>? {\n            return when (viewManagerName) {\n              MyNativeViewManager.REACT_CLASS -> MyNativeViewManager()\n              MyLegacyViewManager.REACT_CLASS -> MyLegacyViewManager(reactContext)\n              else -> null\n            }\n          }\n        })\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-04-12T10:43:52Z"
    },
    {
      "repository": "Saganize/Solwave-native",
      "file": "android/src/main/java/com/solwave/SolwavePackage.kt",
      "url": "https://github.com/Saganize/Solwave-native/blob/15bd3bd9f609d33d1dc795df66dadaafb8f25b6d/android/src/main/java/com/solwave/SolwavePackage.kt",
      "fileContent": "package com.solwave\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass SolwavePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == SolwaveModule.NAME) {\n      SolwaveModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[SolwaveModule.NAME] = ReactModuleInfo(\n        SolwaveModule.NAME,\n        SolwaveModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-04-15T10:37:00Z"
    },
    {
      "repository": "mym0404/react-native-kakao",
      "file": "packages/navi/android/src/main/java/net/mjstudio/rnkakao/navi/RNCKakaoNaviPackage.kt",
      "url": "https://github.com/mym0404/react-native-kakao/blob/136a82faee26f15222734c14a59135f6b9ea56b0/packages/navi/android/src/main/java/net/mjstudio/rnkakao/navi/RNCKakaoNaviPackage.kt",
      "fileContent": "package net.mjstudio.rnkakao.navi\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass RNCKakaoNaviPackage : TurboReactPackage() {\n  override fun getModule(\n    name: String,\n    reactContext: ReactApplicationContext,\n  ): NativeModule? =\n    if (name == RNCKakaoNaviModule.NAME) {\n      RNCKakaoNaviModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n    ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNCKakaoNaviModule.NAME] =\n        ReactModuleInfo(\n          RNCKakaoNaviModule.NAME,\n          RNCKakaoNaviModule.NAME,\n          false, // canOverrideExistingModule\n          false, // needsEagerInit\n          false, // isCxxModule\n          isTurboModule, // isTurboModule\n        )\n      moduleInfos\n    }\n}\n",
      "stars": 71,
      "lastCommitDate": "2024-12-17T15:37:06Z"
    },
    {
      "repository": "BILDIT-Platform/react-native-bildit-flybuy",
      "file": "mono/packages/notify/android/src/main/java/com/bilditplatform/rnflybuynotify/RnFlybuyNotifyPackage.kt",
      "url": "https://github.com/BILDIT-Platform/react-native-bildit-flybuy/blob/b31e9b1be1b57fd04507ccf3c047f12a0a13e1e5/mono/packages/notify/android/src/main/java/com/bilditplatform/rnflybuynotify/RnFlybuyNotifyPackage.kt",
      "fileContent": "package com.bilditplatform.rnflybuynotify\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnFlybuyNotifyPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnFlybuyNotifyModule.NAME) {\n      RnFlybuyNotifyModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnFlybuyNotifyModule.NAME] = ReactModuleInfo(\n        RnFlybuyNotifyModule.NAME,\n        RnFlybuyNotifyModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 9,
      "lastCommitDate": "2024-11-21T12:11:09Z"
    },
    {
      "repository": "DataDog/dd-sdk-reactnative",
      "file": "packages/internal-testing-tools/android/src/main/kotlin/com/datadog/reactnative/internaltesting/DdInternalTestingPackage.kt",
      "url": "https://github.com/DataDog/dd-sdk-reactnative/blob/a8a041a4c5ffc097635ae95af0ed3e993264d016/packages/internal-testing-tools/android/src/main/kotlin/com/datadog/reactnative/internaltesting/DdInternalTestingPackage.kt",
      "fileContent": "/*\n * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.\n * This product includes software developed at Datadog (https://www.datadoghq.com/).\n * Copyright 2016-Present Datadog, Inc.\n */\n\npackage com.datadog.reactnative.internaltesting\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\n/**\n * Package of internal testing native modules.\n */\nclass DdInternalTestingPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            DdInternalTestingImplementation.NAME -> DdInternalTesting(reactContext)\n            else -> null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            val moduleInfos = listOf(\n                DdInternalTestingImplementation.NAME\n            ).associateWith {\n                ReactModuleInfo(\n                    it,\n                    it,\n                    false,  // canOverrideExistingModule\n                    false,  // needsEagerInit\n                    true,  // hasConstants\n                    false,  // isCxxModule\n                    isTurboModule // isTurboModule\n                )\n            }\n\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 123,
      "lastCommitDate": "2024-12-18T15:59:33Z"
    },
    {
      "repository": "JKobrynski/BridgingTutorial",
      "file": "device-battery-package/android/src/main/java/com/devicebatterypackage/DeviceBatteryTurboPackage.kt",
      "url": "https://github.com/JKobrynski/BridgingTutorial/blob/94fd8c7d3d5496687a8f0572bf179303954c35dd/device-battery-package/android/src/main/java/com/devicebatterypackage/DeviceBatteryTurboPackage.kt",
      "fileContent": "package com.devicebatterypackage\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass DeviceBatteryTurboPackage : TurboReactPackage() {\n    /**\n     * Initialize and export modules based on the name of the required module\n     */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return when (name) {\n            DeviceBatteryModule.NAME -> DeviceBatteryModule(reactContext)\n            else -> null\n        }\n    }\n\n    /**\n     * Declare info about exported modules\n     */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n         * Here declare the array of exported modules\n         */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n                DeviceBatteryModule::class.java\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n         * And here just iterate on that array and produce the info provider instance\n         */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n        }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2024-02-19T13:09:52Z"
    },
    {
      "repository": "Umesh-Bhati/rn-ffmpeg-video-editor",
      "file": "android/src/main/java/com/rnffmpegvideoeditor/RnFfmpegVideoEditorPackage.kt",
      "url": "https://github.com/Umesh-Bhati/rn-ffmpeg-video-editor/blob/064786e7336749af234e3d0424478b5931cd46c2/android/src/main/java/com/rnffmpegvideoeditor/RnFfmpegVideoEditorPackage.kt",
      "fileContent": "package com.rnffmpegvideoeditor\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnFfmpegVideoEditorPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnFfmpegVideoEditorModule.NAME) {\n      RnFfmpegVideoEditorModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnFfmpegVideoEditorModule.NAME] = ReactModuleInfo(\n        RnFfmpegVideoEditorModule.NAME,\n        RnFfmpegVideoEditorModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-11-08T09:45:13Z"
    },
    {
      "repository": "react-native-pair/react-native-developer-screen",
      "file": "android/src/main/java/com/developerscreen/DeveloperScreenPackage.kt",
      "url": "https://github.com/react-native-pair/react-native-developer-screen/blob/13c9d7347c1a2bfe445d7f9c574f6d65c670e17d/android/src/main/java/com/developerscreen/DeveloperScreenPackage.kt",
      "fileContent": "package com.developerscreen\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass DeveloperScreenPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == DeveloperScreenModule.NAME) {\n      DeveloperScreenModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[DeveloperScreenModule.NAME] = ReactModuleInfo(\n        DeveloperScreenModule.NAME,\n        DeveloperScreenModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-12-01T04:05:41Z"
    },
    {
      "repository": "SolankiYogesh/rn-date-format",
      "file": "android/src/main/java/com/devicetimeformat/DeviceTimeFormatPackage.kt",
      "url": "https://github.com/SolankiYogesh/rn-date-format/blob/66ffd4415fce38b2b27e4cc3ec42e6ef07e5697b/android/src/main/java/com/devicetimeformat/DeviceTimeFormatPackage.kt",
      "fileContent": "package com.devicetimeformat\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass DeviceTimeFormatPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == DeviceTimeFormatModule.NAME) {\n      DeviceTimeFormatModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      val canOverrideExistingModule = false\n      val needsEagerInit = false\n      val isCxxModule = false\n\n      moduleInfos[DeviceTimeFormatModule.NAME] = ReactModuleInfo(\n        DeviceTimeFormatModule.NAME,\n        DeviceTimeFormatModule.NAME,\n        canOverrideExistingModule,  // canOverrideExistingModule\n        needsEagerInit,  // needsEagerInit\n        isCxxModule,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 5,
      "lastCommitDate": "2024-11-28T13:03:23Z"
    },
    {
      "repository": "souravdasslg/react-native-torrent",
      "file": "android/src/main/java/com/souravdasslg/rntorrent/TorrentPackage.kt",
      "url": "https://github.com/souravdasslg/react-native-torrent/blob/9bb19accc634ff9749ee60eea20eeb8253267091/android/src/main/java/com/souravdasslg/rntorrent/TorrentPackage.kt",
      "fileContent": "package com.souravdasslg.rntorrent\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.torrent.BuildConfig\nimport java.util.HashMap\n\nclass TorrentPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): TorrentModule? {\n    return if (name == TorrentModule.NAME) {\n      TorrentModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[TorrentModule.NAME] = ReactModuleInfo(\n        TorrentModule.NAME,\n        TorrentModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-10-29T06:20:30Z"
    },
    {
      "repository": "leoogh/RNBugRepro1",
      "file": "ReproducerApp/modules/react-native-calcturbo/android/src/main/java/com/calcturbo/CalcturboPackage.kt",
      "url": "https://github.com/leoogh/RNBugRepro1/blob/07714794fc3712bffe72674aff66a13d4a540c6c/ReproducerApp/modules/react-native-calcturbo/android/src/main/java/com/calcturbo/CalcturboPackage.kt",
      "fileContent": "package com.calcturbo\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass CalcturboPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == CalcturboModule.NAME) {\n      CalcturboModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[CalcturboModule.NAME] = ReactModuleInfo(\n        CalcturboModule.NAME,\n        CalcturboModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-28T17:27:44Z"
    },
    {
      "repository": "Notificare/notificare-sdk-react-native",
      "file": "packages/react-native-notificare-in-app-messaging/android/src/main/java/re/notifica/iam/react_native/NotificareInAppMessagingPackage.kt",
      "url": "https://github.com/Notificare/notificare-sdk-react-native/blob/8d9f7b299835b6b67050e1a1562e02b26e814b19/packages/react-native-notificare-in-app-messaging/android/src/main/java/re/notifica/iam/react_native/NotificareInAppMessagingPackage.kt",
      "fileContent": "package re.notifica.iam.react_native\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\npublic class NotificareInAppMessagingPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NotificareInAppMessagingModule.NAME) {\n            NotificareInAppMessagingModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n            @Suppress(\"DEPRECATION\")\n            moduleInfos[NotificareInAppMessagingModule.NAME] = ReactModuleInfo(\n                NotificareInAppMessagingModule.NAME,\n                NotificareInAppMessagingModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 6,
      "lastCommitDate": "2024-10-30T16:49:15Z"
    },
    {
      "repository": "cinder92/react-native-get-music-files",
      "file": "android/src/main/java/com/turbosongs/TurboSongsPackage.kt",
      "url": "https://github.com/cinder92/react-native-get-music-files/blob/43566485045f531328c7d88057dcce2d11b6fe5d/android/src/main/java/com/turbosongs/TurboSongsPackage.kt",
      "fileContent": "package com.turbosongs\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass TurboSongsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TurboSongsModule.NAME) {\n      TurboSongsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[TurboSongsModule.NAME] = ReactModuleInfo(\n        TurboSongsModule.NAME,\n        TurboSongsModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 131,
      "lastCommitDate": "2023-12-08T02:59:17Z"
    },
    {
      "repository": "yidafu/amphibians",
      "file": "exmaple/android/rn-plugin/src/androidMain/kotlin/dev/yidafu/amphibians/sample/CalculatorPackage.kt",
      "url": "https://github.com/yidafu/amphibians/blob/a3ac537587a8270625481137f3897c37fc281ac8/exmaple/android/rn-plugin/src/androidMain/kotlin/dev/yidafu/amphibians/sample/CalculatorPackage.kt",
      "fileContent": "package dev.yidafu.amphibians.sample\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass CalculatorPackage : TurboReactPackage() {\n    override fun getModule(\n        name: String,\n        reactContext: ReactApplicationContext,\n    ): NativeModule? =\n        if (name == CalculatorModule.NAME) {\n            CalculatorModule(reactContext)\n        } else {\n            null\n        }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider =\n        ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = true\n            moduleInfos[CalculatorModule.NAME] =\n                ReactModuleInfo(\n                    CalculatorModule.NAME,\n                    CalculatorModule.NAME,\n                    false, // canOverrideExistingModule\n                    false, // needsEagerInit\n                    true, // hasConstants\n                    false, // isCxxModule\n                    isTurboModule, // isTurboModule\n                )\n            moduleInfos\n        }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-08-07T13:38:25Z"
    },
    {
      "repository": "oneDotpy/CaribouQuest",
      "file": "nodemodules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt",
      "url": "https://github.com/oneDotpy/CaribouQuest/blob/978ba2e97d1f37f5620afdf39005f6fbeacc93f3/nodemodules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt",
      "fileContent": "package com.swmansion.rnscreens\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\n@ReactModuleList(\n    nativeModules = [\n        ScreensModule::class\n    ]\n)\nclass RNScreensPackage : TurboReactPackage() {\n    override fun createViewManagers(reactContext: ReactApplicationContext) =\n        listOf<ViewManager<*, *>>(\n            ScreenContainerViewManager(),\n            ScreenViewManager(),\n            ModalScreenViewManager(),\n            ScreenStackViewManager(),\n            ScreenStackHeaderConfigViewManager(),\n            ScreenStackHeaderSubviewManager(),\n            SearchBarManager()\n        )\n\n    override fun getModule(\n        s: String,\n        reactApplicationContext: ReactApplicationContext\n    ): NativeModule? {\n        when (s) {\n            ScreensModule.NAME -> return ScreensModule(reactApplicationContext)\n        }\n        return null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[ScreensModule.NAME] = ReactModuleInfo(\n                ScreensModule.NAME,\n                ScreensModule.NAME,\n                false, // canOverrideExistingModule\n                false, // needsEagerInit\n                true, // hasConstants\n                false, // isCxxModule\n                isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-05-19T13:18:32Z"
    },
    {
      "repository": "nuagoz/react-native",
      "file": "packages/react-native/ReactAndroid/src/test/java/com/facebook/react/modules/model/ReactModuleInfoTest.kt",
      "url": "https://github.com/nuagoz/react-native/blob/9a884d2d3f8c42f66f58486c0c6d2e7248194ab4/packages/react-native/ReactAndroid/src/test/java/com/facebook/react/modules/model/ReactModuleInfoTest.kt",
      "fileContent": "/*\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\npackage com.facebook.react.modules.model\n\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport org.junit.Assert.assertEquals\nimport org.junit.Assert.assertFalse\nimport org.junit.Assert.assertTrue\nimport org.junit.Test\n\nclass ReactModuleInfoTest {\n\n  @Test\n  fun testCreateReactModuleInfo() {\n    val reactModuleInfo =\n        ReactModuleInfo(\n            /* name = */ \"name\",\n            /* className = */ \"class\",\n            /* canOverrideExistingModule = */ false,\n            /* needsEagerInit = */ false,\n            /* isCxxModule = */ false,\n            /* isTurboModule = */ false)\n    assertEquals(\"name\", reactModuleInfo.name())\n    assertFalse(reactModuleInfo.canOverrideExistingModule())\n    assertFalse(reactModuleInfo.needsEagerInit())\n    assertFalse(reactModuleInfo.isCxxModule)\n    assertFalse(reactModuleInfo.isTurboModule)\n  }\n\n  @Test\n  fun classIsTurboModule_withRandomClass() {\n    assertFalse(ReactModuleInfo.classIsTurboModule(String::class.java))\n  }\n\n  @Test\n  fun classIsTurboModule_withTurboModule() {\n    assertTrue(ReactModuleInfo.classIsTurboModule(TestTurboModule::class.java))\n  }\n\n  inner class TestTurboModule : TurboModule {\n    override fun initialize() = Unit\n\n    override fun invalidate() = Unit\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-13T22:41:22Z"
    },
    {
      "repository": "haianh286/mattermost-mobile",
      "file": "libraries/@mattermost/hardware-keyboard/android/src/main/java/com/mattermost/hardware/keyboard/MattermostHardwareKeyboardPackage.kt",
      "url": "https://github.com/haianh286/mattermost-mobile/blob/629683a310a3bd186b17b958b0969a54273d9528/libraries/@mattermost/hardware-keyboard/android/src/main/java/com/mattermost/hardware/keyboard/MattermostHardwareKeyboardPackage.kt",
      "fileContent": "package com.mattermost.hardware.keyboard\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass MattermostHardwareKeyboardPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == MattermostHardwareKeyboardImpl.NAME) {\n            MattermostHardwareKeyboardModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n                MattermostHardwareKeyboardImpl.NAME to ReactModuleInfo(\n                        MattermostHardwareKeyboardImpl.NAME,\n                        MattermostHardwareKeyboardImpl.NAME,\n                        false,  // canOverrideExistingModule\n                        false,  // needsEagerInit\n                        false,  // isCxxModule\n                        BuildConfig.IS_NEW_ARCHITECTURE_ENABLED // isTurboModule\n                )\n        )\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-25T22:40:46Z"
    },
    {
      "repository": "FadilAmiruddin/StrudL",
      "file": "StrudL/node_modules 7.52.49 PM/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt",
      "url": "https://github.com/FadilAmiruddin/StrudL/blob/979b0f1395e3917dc6b6090d87114abc79855643/StrudL/node_modules%207.52.49%E2%80%AFPM/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt",
      "fileContent": "package com.swmansion.gesturehandler\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport com.swmansion.gesturehandler.react.RNGestureHandlerButtonViewManager\nimport com.swmansion.gesturehandler.react.RNGestureHandlerModule\nimport com.swmansion.gesturehandler.react.RNGestureHandlerRootViewManager\n\n@ReactModuleList(\n  nativeModules = [\n    RNGestureHandlerModule::class\n  ]\n)\nclass RNGestureHandlerPackage : TurboReactPackage(), ViewManagerOnDemandReactPackage {\n  private val viewManagers: Map<String, ModuleSpec> by lazy {\n    mapOf(\n      RNGestureHandlerRootViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec {\n        RNGestureHandlerRootViewManager()\n      },\n      RNGestureHandlerButtonViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec {\n        RNGestureHandlerButtonViewManager()\n      }\n    )\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext) =\n    listOf<ViewManager<*, *>>(\n      RNGestureHandlerRootViewManager(),\n      RNGestureHandlerButtonViewManager()\n    )\n\n  override fun getViewManagerNames(reactContext: ReactApplicationContext?) =\n    viewManagers.keys.toList()\n\n  override fun getViewManagers(reactContext: ReactApplicationContext?): MutableList<ModuleSpec> =\n    viewManagers.values.toMutableList()\n\n  override fun createViewManager(\n    reactContext: ReactApplicationContext?,\n    viewManagerName: String?\n  ) = viewManagers[viewManagerName]?.provider?.get() as? ViewManager<*, *>\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNGestureHandlerModule.NAME) {\n      RNGestureHandlerModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    try {\n      val reactModuleInfoProviderClass =\n        Class.forName(\"com.swmansion.gesturehandler.RNGestureHandlerPackage$\\$ReactModuleInfoProvider\")\n      return reactModuleInfoProviderClass.getDeclaredConstructor().newInstance() as ReactModuleInfoProvider\n    } catch (e: ClassNotFoundException) {\n      return ReactModuleInfoProvider {\n        val reactModule: ReactModule = RNGestureHandlerModule::class.java.getAnnotation(ReactModule::class.java)!!\n\n        mutableMapOf(\n          RNGestureHandlerModule.NAME to ReactModuleInfo(\n            reactModule.name,\n            RNGestureHandlerModule::class.java.name,\n            reactModule.canOverrideExistingModule,\n            reactModule.needsEagerInit,\n            true, // Has constants is hardcoded to return true, so replacing it with `true` changes nothing.\n            reactModule.isCxxModule,\n            true\n          )\n        )\n      }\n    } catch (e: InstantiationException) {\n      throw RuntimeException(\"No ReactModuleInfoProvider for RNGestureHandlerPackage$\\$ReactModuleInfoProvider\", e)\n    } catch (e: IllegalAccessException) {\n      throw RuntimeException(\"No ReactModuleInfoProvider for RNGestureHandlerPackage$\\$ReactModuleInfoProvider\", e)\n    }\n  }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-07-31T00:01:17Z"
    },
    {
      "repository": "DionisisChytiris/WorldWiseTrivia_Main",
      "file": "node_modules_bak/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt",
      "url": "https://github.com/DionisisChytiris/WorldWiseTrivia_Main/blob/bd629b729ab4591c599dcb33c4843146d00c1f0a/node_modules_bak/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt",
      "fileContent": "package com.swmansion.gesturehandler\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\nimport com.swmansion.gesturehandler.react.RNGestureHandlerButtonViewManager\nimport com.swmansion.gesturehandler.react.RNGestureHandlerModule\nimport com.swmansion.gesturehandler.react.RNGestureHandlerRootViewManager\n\n@ReactModuleList(\n  nativeModules = [\n    RNGestureHandlerModule::class\n  ]\n)\nclass RNGestureHandlerPackage : TurboReactPackage(), ViewManagerOnDemandReactPackage {\n  private val viewManagers: Map<String, ModuleSpec> by lazy {\n    mapOf(\n      RNGestureHandlerRootViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec {\n        RNGestureHandlerRootViewManager()\n      },\n      RNGestureHandlerButtonViewManager.REACT_CLASS to ModuleSpec.viewManagerSpec {\n        RNGestureHandlerButtonViewManager()\n      }\n    )\n  }\n\n  override fun createViewManagers(reactContext: ReactApplicationContext) =\n    listOf<ViewManager<*, *>>(\n      RNGestureHandlerRootViewManager(),\n      RNGestureHandlerButtonViewManager()\n    )\n\n  override fun getViewManagerNames(reactContext: ReactApplicationContext?) =\n    viewManagers.keys.toList()\n\n  override fun getViewManagers(reactContext: ReactApplicationContext?): MutableList<ModuleSpec> =\n    viewManagers.values.toMutableList()\n\n  override fun createViewManager(\n    reactContext: ReactApplicationContext?,\n    viewManagerName: String?\n  ) = viewManagers[viewManagerName]?.provider?.get() as? ViewManager<*, *>\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNGestureHandlerModule.NAME) {\n      RNGestureHandlerModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    try {\n      val reactModuleInfoProviderClass =\n        Class.forName(\"com.swmansion.gesturehandler.RNGestureHandlerPackage$\\$ReactModuleInfoProvider\")\n      return reactModuleInfoProviderClass.getDeclaredConstructor().newInstance() as ReactModuleInfoProvider\n    } catch (e: ClassNotFoundException) {\n      return ReactModuleInfoProvider {\n        val reactModule: ReactModule = RNGestureHandlerModule::class.java.getAnnotation(ReactModule::class.java)!!\n\n        mutableMapOf(\n          RNGestureHandlerModule.NAME to ReactModuleInfo(\n            reactModule.name,\n            RNGestureHandlerModule::class.java.name,\n            reactModule.canOverrideExistingModule,\n            reactModule.needsEagerInit,\n            true, // Has constants is hardcoded to return true, so replacing it with `true` changes nothing.\n            reactModule.isCxxModule,\n            true\n          )\n        )\n      }\n    } catch (e: InstantiationException) {\n      throw RuntimeException(\"No ReactModuleInfoProvider for RNGestureHandlerPackage$\\$ReactModuleInfoProvider\", e)\n    } catch (e: IllegalAccessException) {\n      throw RuntimeException(\"No ReactModuleInfoProvider for RNGestureHandlerPackage$\\$ReactModuleInfoProvider\", e)\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-15T14:25:24Z"
    },
    {
      "repository": "kr-nikunj/walletconnect-ssh",
      "file": "packages/react-native-compat/android/src/main/java/com/walletconnect/reactnativemodule/RNWalletConnectModulePackage.kt",
      "url": "https://github.com/kr-nikunj/walletconnect-ssh/blob/cb0123eb0801b39a2c7158497f8b0955ae9af88c/packages/react-native-compat/android/src/main/java/com/walletconnect/reactnativemodule/RNWalletConnectModulePackage.kt",
      "fileContent": "package com.walletconnect.reactnativemodule\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RNWalletConnectModulePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNWalletConnectModuleModule.NAME) {\n      RNWalletConnectModuleModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNWalletConnectModuleModule.NAME] = ReactModuleInfo(\n        RNWalletConnectModuleModule.NAME,\n        RNWalletConnectModuleModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-12-14T10:41:31Z"
    },
    {
      "repository": "Prenuer/Wallet-connect-zz_",
      "file": "packages/react-native-compat/android/src/main/java/com/walletconnect/reactnativemodule/RNWalletConnectModulePackage.kt",
      "url": "https://github.com/Prenuer/Wallet-connect-zz_/blob/c4ac54c1e05ed3730d9c270c15b24925ef192931/packages/react-native-compat/android/src/main/java/com/walletconnect/reactnativemodule/RNWalletConnectModulePackage.kt",
      "fileContent": "package com.walletconnect.reactnativemodule\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RNWalletConnectModulePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNWalletConnectModuleModule.NAME) {\n      RNWalletConnectModuleModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNWalletConnectModuleModule.NAME] = ReactModuleInfo(\n        RNWalletConnectModuleModule.NAME,\n        RNWalletConnectModuleModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-03-04T14:56:24Z"
    },
    {
      "repository": "Test-kr-nikunj/test-wc",
      "file": "packages/react-native-compat/android/src/main/java/com/walletconnect/reactnativemodule/RNWalletConnectModulePackage.kt",
      "url": "https://github.com/Test-kr-nikunj/test-wc/blob/26caa30b66f2f27626232a1d1d19fbb32c9fa4b4/packages/react-native-compat/android/src/main/java/com/walletconnect/reactnativemodule/RNWalletConnectModulePackage.kt",
      "fileContent": "package com.walletconnect.reactnativemodule\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RNWalletConnectModulePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RNWalletConnectModuleModule.NAME) {\n      RNWalletConnectModuleModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RNWalletConnectModuleModule.NAME] = ReactModuleInfo(\n        RNWalletConnectModuleModule.NAME,\n        RNWalletConnectModuleModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2023-12-14T07:23:06Z"
    },
    {
      "repository": "CodingNewbie99/Expo",
      "file": "apps/expo-go/android/expoview/src/main/java/versioned/host/exp/exponent/ExpoTurboPackage.kt",
      "url": "https://github.com/CodingNewbie99/Expo/blob/8086be4bb637c7ed236fbad111e04f9222a8208c/apps/expo-go/android/expoview/src/main/java/versioned/host/exp/exponent/ExpoTurboPackage.kt",
      "fileContent": "// Copyright 2020-present 650 Industries. All rights reserved.\npackage versioned.host.exp.exponent\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.modules.intent.IntentModule\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport expo.modules.manifests.core.Manifest\nimport host.exp.exponent.kernel.KernelConstants\nimport versioned.host.exp.exponent.modules.internal.ExponentIntentModule\n\n/** Package defining basic modules and view managers.  */\n@ReactModuleList(\n  nativeModules = [\n    ExponentIntentModule::class\n  ]\n)\nclass ExpoTurboPackage(\n  private val experienceProperties: Map<String, Any?>,\n  private val manifest: Manifest\n) : TurboReactPackage() {\n  override fun getModule(name: String, context: ReactApplicationContext): NativeModule? {\n    val isVerified = manifest.isVerified()\n    return when (name) {\n      IntentModule.NAME -> ExponentIntentModule(\n        context,\n        experienceProperties\n      )\n      else -> null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return try {\n      // TODO(Bacon): Does this need to reflect ExpoTurboPackage$$ReactModuleInfoProvider ?\n      val reactModuleInfoProviderClass = Class.forName(\"com.facebook.react.shell.MainReactPackage$\\$ReactModuleInfoProvider\")\n      reactModuleInfoProviderClass.newInstance() as ReactModuleInfoProvider\n    } catch (e: ClassNotFoundException) {\n      // In OSS case, the annotation processor does not run. We fall back on creating this by hand\n      val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n        ExponentIntentModule::class.java\n      )\n      val reactModuleInfoMap = mutableMapOf<String, ReactModuleInfo>()\n      for (moduleClass in moduleList) {\n        val reactModule = moduleClass.getAnnotation(ReactModule::class.java)!!\n        val isTurbo = TurboModule::class.java.isAssignableFrom(moduleClass)\n\n        reactModuleInfoMap[reactModule.name] = ReactModuleInfo(\n          reactModule.name,\n          moduleClass.name,\n          reactModule.canOverrideExistingModule,\n          reactModule.needsEagerInit,\n          reactModule.hasConstants,\n          reactModule.isCxxModule,\n          isTurbo\n        )\n      }\n      ReactModuleInfoProvider { reactModuleInfoMap }\n    } catch (e: InstantiationException) {\n      throw RuntimeException(\n        \"No ReactModuleInfoProvider for CoreModulesPackage$\\$ReactModuleInfoProvider\",\n        e\n      )\n    } catch (e: IllegalAccessException) {\n      throw RuntimeException(\n        \"No ReactModuleInfoProvider for CoreModulesPackage$\\$ReactModuleInfoProvider\",\n        e\n      )\n    }\n  }\n\n  companion object {\n    private val TAG = ExpoTurboPackage::class.java.simpleName\n\n    fun kernelExpoTurboPackage(manifest: Manifest, initialURL: String?): ExpoTurboPackage {\n      val kernelExperienceProperties = mutableMapOf(\n        KernelConstants.LINKING_URI_KEY to \"exp://\",\n        KernelConstants.IS_HEADLESS_KEY to false\n      ).apply {\n        if (initialURL != null) {\n          this[KernelConstants.INTENT_URI_KEY] = initialURL\n        }\n      }\n      return ExpoTurboPackage(kernelExperienceProperties, manifest)\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-08-15T20:42:55Z"
    },
    {
      "repository": "benjicxc/rn-nevis",
      "file": "android/src/main/java/ch/nevis/mobile/authentication/sdk/react/NevisMobileAuthenticationSdkReactPackage.kt",
      "url": "https://github.com/benjicxc/rn-nevis/blob/3868c09d90407dec45a4882b1bfa1cba8e9dc700/android/src/main/java/ch/nevis/mobile/authentication/sdk/react/NevisMobileAuthenticationSdkReactPackage.kt",
      "fileContent": "/*\n * Copyright © 2023 Nevis Security AG. All rights reserved.\n */\n\npackage ch.nevis.mobile.authentication.sdk.react\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NevisMobileAuthenticationSdkReactPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NevisMobileAuthenticationSdkReactModule.NAME) {\n            NevisMobileAuthenticationSdkReactModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[NevisMobileAuthenticationSdkReactModule.NAME] = ReactModuleInfo(\n                NevisMobileAuthenticationSdkReactModule.NAME,\n                NevisMobileAuthenticationSdkReactModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-09-11T06:50:45Z"
    },
    {
      "repository": "BILDIT-Platform/rn-flybuy",
      "file": "mono/packages/livestatus/android/src/main/java/com/bilditplatform/rnflybuylivestatus/RnFlybuyLivestatusPackage.kt",
      "url": "https://github.com/BILDIT-Platform/rn-flybuy/blob/822359f21a16681f72d0d3d203b9f5595183b9ee/mono/packages/livestatus/android/src/main/java/com/bilditplatform/rnflybuylivestatus/RnFlybuyLivestatusPackage.kt",
      "fileContent": "package com.bilditplatform.rnflybuylivestatus\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnFlybuyLivestatusPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnFlybuyLivestatusModule.NAME) {\n      RnFlybuyLivestatusModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnFlybuyLivestatusModule.NAME] = ReactModuleInfo(\n        RnFlybuyLivestatusModule.NAME,\n        RnFlybuyLivestatusModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-07-31T15:50:41Z"
    },
    {
      "repository": "BILDIT-Platform/rn-flybuy",
      "file": "mono/packages/notify/android/src/main/java/com/bilditplatform/rnflybuynotify/RnFlybuyNotifyPackage.kt",
      "url": "https://github.com/BILDIT-Platform/rn-flybuy/blob/822359f21a16681f72d0d3d203b9f5595183b9ee/mono/packages/notify/android/src/main/java/com/bilditplatform/rnflybuynotify/RnFlybuyNotifyPackage.kt",
      "fileContent": "package com.bilditplatform.rnflybuynotify\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass RnFlybuyNotifyPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == RnFlybuyNotifyModule.NAME) {\n      RnFlybuyNotifyModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[RnFlybuyNotifyModule.NAME] = ReactModuleInfo(\n        RnFlybuyNotifyModule.NAME,\n        RnFlybuyNotifyModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-07-31T15:50:41Z"
    },
    {
      "repository": "PRANAW2004/music-app-using-react-native",
      "file": "android/app/src/main/assets/custom/TurboSongsPackage.kt",
      "url": "https://github.com/PRANAW2004/music-app-using-react-native/blob/ca888eaee2f11aeb1cefae19987fab55a7b9f9c5/android/app/src/main/assets/custom/TurboSongsPackage.kt",
      "fileContent": "package com.turbosongs\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass TurboSongsPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == TurboSongsModule.NAME) {\n      TurboSongsModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[TurboSongsModule.NAME] = ReactModuleInfo(\n        TurboSongsModule.NAME,\n        TurboSongsModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-05-17T13:55:42Z"
    },
    {
      "repository": "FadilAmiruddin/StrudL",
      "file": "StrudL/node_modules 7.52.49 PM/react-native-screens/android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt",
      "url": "https://github.com/FadilAmiruddin/StrudL/blob/979b0f1395e3917dc6b6090d87114abc79855643/StrudL/node_modules%207.52.49%E2%80%AFPM/react-native-screens/android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt",
      "fileContent": "package com.swmansion.rnscreens\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\n@ReactModuleList(\n    nativeModules = [\n        ScreensModule::class\n    ]\n)\nclass RNScreensPackage : TurboReactPackage() {\n    override fun createViewManagers(reactContext: ReactApplicationContext) =\n        listOf<ViewManager<*, *>>(\n            ScreenContainerViewManager(),\n            ScreenViewManager(),\n            ModalScreenViewManager(),\n            ScreenStackViewManager(),\n            ScreenStackHeaderConfigViewManager(),\n            ScreenStackHeaderSubviewManager(),\n            SearchBarManager()\n        )\n\n    override fun getModule(\n        s: String,\n        reactApplicationContext: ReactApplicationContext\n    ): NativeModule? {\n        when (s) {\n            ScreensModule.NAME -> return ScreensModule(reactApplicationContext)\n        }\n        return null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[ScreensModule.NAME] = ReactModuleInfo(\n                ScreensModule.NAME,\n                ScreensModule.NAME,\n                false, // canOverrideExistingModule\n                false, // needsEagerInit\n                true, // hasConstants\n                false, // isCxxModule\n                isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 1,
      "lastCommitDate": "2024-07-31T00:01:17Z"
    },
    {
      "repository": "DionisisChytiris/WorldWiseTrivia_Main",
      "file": "node_modules_bak/react-native-screens/android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt",
      "url": "https://github.com/DionisisChytiris/WorldWiseTrivia_Main/blob/bd629b729ab4591c599dcb33c4843146d00c1f0a/node_modules_bak/react-native-screens/android/src/main/java/com/swmansion/rnscreens/RNScreensPackage.kt",
      "fileContent": "package com.swmansion.rnscreens\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\n@ReactModuleList(\n    nativeModules = [\n        ScreensModule::class\n    ]\n)\nclass RNScreensPackage : TurboReactPackage() {\n    override fun createViewManagers(reactContext: ReactApplicationContext) =\n        listOf<ViewManager<*, *>>(\n            ScreenContainerViewManager(),\n            ScreenViewManager(),\n            ModalScreenViewManager(),\n            ScreenStackViewManager(),\n            ScreenStackHeaderConfigViewManager(),\n            ScreenStackHeaderSubviewManager(),\n            SearchBarManager()\n        )\n\n    override fun getModule(\n        s: String,\n        reactApplicationContext: ReactApplicationContext\n    ): NativeModule? {\n        when (s) {\n            ScreensModule.NAME -> return ScreensModule(reactApplicationContext)\n        }\n        return null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n            moduleInfos[ScreensModule.NAME] = ReactModuleInfo(\n                ScreensModule.NAME,\n                ScreensModule.NAME,\n                false, // canOverrideExistingModule\n                false, // needsEagerInit\n                true, // hasConstants\n                false, // isCxxModule\n                isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-15T14:25:24Z"
    },
    {
      "repository": "getsentry/sentry-react-native",
      "file": "samples/react-native/android/app/src/main/java/io/sentry/reactnative/sample/TurboSamplePackage.kt",
      "url": "https://github.com/getsentry/sentry-react-native/blob/0b9da0a58650fbcd7ee0b8972599c2fcb55108b7/samples/react-native/android/app/src/main/java/io/sentry/reactnative/sample/TurboSamplePackage.kt",
      "fileContent": "package io.sentry.reactnative.sample\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport org.jetbrains.annotations.Nullable\n\nclass TurboSamplePackage : TurboReactPackage() {\n    @Nullable\n    override fun getModule(\n        name: String,\n        reactApplicationContext: ReactApplicationContext\n    ): NativeModule? {\n        return if (name == NativePlatformSampleModule.NAME) {\n            NativePlatformSampleModule(reactApplicationContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> =\n                HashMap()\n            moduleInfos[NativePlatformSampleModule.NAME] = ReactModuleInfo(\n                NativePlatformSampleModule.NAME,\n                NativePlatformSampleModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                true // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 1592,
      "lastCommitDate": "2024-12-19T08:26:27Z"
    },
    {
      "repository": "callstack/react-native-builder-bob",
      "file": "packages/create-react-native-library/templates/kotlin-library-new/android/src/main/java/com/{%- project.package_dir %}/{%- project.name %}Package.kt",
      "url": "https://github.com/callstack/react-native-builder-bob/blob/87b0032acd66b7b14a5b358117a3d1497c59baad/packages/create-react-native-library/templates/kotlin-library-new/android/src/main/java/com/%7B%25-%20project.package_dir%20%25%7D/%7B%25-%20project.name%20%25%7DPackage.kt",
      "fileContent": "package com.<%- project.package %>\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass <%- project.name -%>Package : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == <%- project.name -%>Module.NAME) {\n      <%- project.name -%>Module(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[<%- project.name -%>Module.NAME] = ReactModuleInfo(\n        <%- project.name -%>Module.NAME,\n        <%- project.name -%>Module.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2840,
      "lastCommitDate": "2024-12-17T18:51:11Z"
    },
    {
      "repository": "cipolleschi/InAppModule",
      "file": "android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "url": "https://github.com/cipolleschi/InAppModule/blob/82989bb2c441fa6da9208f763f4f3062e33b33e7/android/app/src/main/java/com/nativelocalstorage/NativeLocalStoragePackage.kt",
      "fileContent": "package com.nativelocalstorage;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass NativeLocalStoragePackage : TurboReactPackage() {\n\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? =\n    if (name == NativeLocalStorageModule.NAME) {\n      NativeLocalStorageModule(reactContext)\n    } else {\n      null\n    }\n\n  override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n    mapOf(\n      NativeLocalStorageModule.NAME to ReactModuleInfo(\n        NativeLocalStorageModule.NAME,\n        NativeLocalStorageModule.NAME,\n        false, // canOverrideExistingModule\n        false, // needsEagerInit\n        false, // isCxxModule\n        true // isTurboModule\n      )\n    )\n  }\n}\n",
      "stars": 56,
      "lastCommitDate": "2024-09-10T15:53:15Z"
    },
    {
      "repository": "mateusz1913/rnbridgingtutorial",
      "file": "conic-gradient-package/android/src/main/java/com/conicgradientpackage/ConicGradientTurboPackage.kt",
      "url": "https://github.com/mateusz1913/rnbridgingtutorial/blob/5ffbcb451066cd43807337a3c1a42c26402a814f/conic-gradient-package/android/src/main/java/com/conicgradientpackage/ConicGradientTurboPackage.kt",
      "fileContent": "package com.conicgradientpackage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ViewManager\n\nclass ConicGradientTurboPackage : TurboReactPackage() {\n    /**\n    * Initialize and export modules based on the name of the required module\n    */\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return null\n    }\n\n    /**\n    * Declare info about exported modules\n    */\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        /**\n        * Here declare the array of exported modules\n        */\n        val moduleList: Array<Class<out NativeModule?>> = arrayOf(\n        )\n        val reactModuleInfoMap: MutableMap<String, ReactModuleInfo> = HashMap()\n        /**\n        * And here just iterate on that array and produce the info provider instance\n        */\n        for (moduleClass in moduleList) {\n            val reactModule = moduleClass.getAnnotation(ReactModule::class.java) ?: continue\n            reactModuleInfoMap[reactModule.name] =\n                ReactModuleInfo(\n                    reactModule.name,\n                    moduleClass.name,\n                    true,\n                    reactModule.needsEagerInit,\n                    reactModule.hasConstants,\n                    reactModule.isCxxModule,\n                    TurboModule::class.java.isAssignableFrom(moduleClass)\n                )\n            }\n        return ReactModuleInfoProvider { reactModuleInfoMap }\n    }\n\n    override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n        /**\n        * Here declare the list of exported native components\n        */\n        return listOf(ConicGradientViewManager())\n    }\n}\n",
      "stars": 70,
      "lastCommitDate": "2024-06-02T08:49:10Z"
    },
    {
      "repository": "RakaDoank/react-native-ping-android",
      "file": "package/android/src/main/java/com/audira/lib/reactnative/pingandroid/PingAndroidPackage.kt",
      "url": "https://github.com/RakaDoank/react-native-ping-android/blob/8b3ddab9ee5582f2539b8ee7cd3c07b959589697/package/android/src/main/java/com/audira/lib/reactnative/pingandroid/PingAndroidPackage.kt",
      "fileContent": "package com.audira.lib.reactnative.pingandroid\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass PingAndroidPackage : TurboReactPackage() {\n\n\toverride fun getModule(\n\t\tname: String,\n\t\treactContext: ReactApplicationContext,\n\t): NativeModule? {\n\t\treturn if(name == PingAndroidSpec.NAME) {\n\t\t\tPingAndroid(reactContext)\n\t\t} else {\n\t\t\tnull\n\t\t}\n\t}\n\n\toverride fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n\t\treturn ReactModuleInfoProvider {\n\t\t\tmapOf(\n\t\t\t\tPingAndroidSpec.NAME to ReactModuleInfo(\n\t\t\t\t\tPingAndroidSpec.NAME,\n\t\t\t\t\tPingAndroidSpec.NAME,\n\t\t\t\t\tfalse,\n\t\t\t\t\tfalse,\n\t\t\t\t\tfalse,\n\t\t\t\t\tBuildConfig.IS_NEW_ARCHITECTURE_ENABLED,\n\t\t\t\t)\n\t\t\t)\n\t\t}\n\t}\n\n}",
      "stars": 7,
      "lastCommitDate": "2024-11-09T11:25:16Z"
    },
    {
      "repository": "nuraalamjikue/React-native-Sample-Inventory-App-Code",
      "file": ".svn/pristine/81/814463ecf64609ad4c5c564026ec77fab444d4be.svn-base",
      "url": "https://github.com/nuraalamjikue/React-native-Sample-Inventory-App-Code/blob/ce5541bde0c6d336537f274ac352ff3478ee2472/.svn/pristine/81/814463ecf64609ad4c5c564026ec77fab444d4be.svn-base",
      "fileContent": "package com.reactnativecommunity.asyncstorage\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.ViewManagerOnDemandReactPackage\nimport com.facebook.react.bridge.ModuleSpec\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.annotations.ReactModule\nimport com.facebook.react.module.annotations.ReactModuleList\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\nimport com.facebook.react.uimanager.ReactShadowNode\nimport com.facebook.react.uimanager.ViewManager\nimport com.reactnativecommunity.asyncstorage.next.StorageModule\n\n@ReactModuleList(\n    nativeModules = [\n        StorageModule::class\n    ]\n)\nclass AsyncStoragePackage : TurboReactPackage() {\n    override fun getModule(name: String, context: ReactApplicationContext): NativeModule? = when (name) {\n        StorageModule.NAME -> StorageModule(context)\n        else -> null\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        try {\n            val reactModuleInfoProviderClass =\n                Class.forName(\"com.reactnativecommunity.asyncstorage.AsyncStoragePackage$\\$ReactModuleInfoProvider\")\n            return reactModuleInfoProviderClass.newInstance() as ReactModuleInfoProvider\n        } catch (e: ClassNotFoundException) {\n            return ReactModuleInfoProvider {\n                val reactModule: ReactModule = StorageModule::class.java.getAnnotation(\n                    ReactModule::class.java)!!\n\n                mutableMapOf(\n                    StorageModule.NAME to ReactModuleInfo(\n                        reactModule.name,\n                        StorageModule::class.java.name,\n                        reactModule.canOverrideExistingModule,\n                        reactModule.needsEagerInit,\n                        reactModule.hasConstants,\n                        reactModule.isCxxModule,\n                        TurboModule::class.java.isAssignableFrom(StorageModule::class.java)\n                    )\n                )\n            }\n        } catch (e: InstantiationException) {\n            throw RuntimeException(\"No ReactModuleInfoProvider for AsyncStoragePackage$\\$ReactModuleInfoProvider\", e)\n        } catch (e: IllegalAccessException) {\n            throw RuntimeException(\"No ReactModuleInfoProvider for AsyncStoragePackage$\\$ReactModuleInfoProvider\", e)\n        }\n    }\n\n    override fun getViewManagers(reactContext: ReactApplicationContext?): MutableList<ModuleSpec>? = null\n}",
      "stars": 0,
      "lastCommitDate": "2024-02-27T13:01:27Z"
    },
    {
      "repository": "Eduardo123Andrade/react-native-datawedege",
      "file": "android/src/main/java/com/datawedege/DatawedegePackage.kt",
      "url": "https://github.com/Eduardo123Andrade/react-native-datawedege/blob/708c1b43e52f58304cc4d65ee8c7c216fe376935/android/src/main/java/com/datawedege/DatawedegePackage.kt",
      "fileContent": "package com.datawedege\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass DatawedegePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == DatawedegeModule.NAME) {\n      DatawedegeModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[DatawedegeModule.NAME] = ReactModuleInfo(\n        DatawedegeModule.NAME,\n        DatawedegeModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-07-27T21:38:37Z"
    },
    {
      "repository": "cauldyclark15/react-native-jc-text-display",
      "file": "android/src/main/java/com/jctextdisplay/JcTextDisplayPackage.kt",
      "url": "https://github.com/cauldyclark15/react-native-jc-text-display/blob/20a58b7028f455c51295b43caf1201be2f20df6b/android/src/main/java/com/jctextdisplay/JcTextDisplayPackage.kt",
      "fileContent": "package com.jctextdisplay\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass JcTextDisplayPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == JcTextDisplayModule.NAME) {\n      JcTextDisplayModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[JcTextDisplayModule.NAME] = ReactModuleInfo(\n        JcTextDisplayModule.NAME,\n        JcTextDisplayModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-03T00:43:59Z"
    },
    {
      "repository": "itsramiel/ReactNativeLibrarySwift",
      "file": "android/src/main/java/com/reproducablemodule/ReproducableModulePackage.kt",
      "url": "https://github.com/itsramiel/ReactNativeLibrarySwift/blob/f203485361f19c7328c6f0fb23fe7d9bbab4667f/android/src/main/java/com/reproducablemodule/ReproducableModulePackage.kt",
      "fileContent": "package com.reproducablemodule\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass ReproducableModulePackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == ReproducableModuleModule.NAME) {\n      ReproducableModuleModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[ReproducableModuleModule.NAME] = ReactModuleInfo(\n        ReproducableModuleModule.NAME,\n        ReproducableModuleModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-11-18T18:29:30Z"
    },
    {
      "repository": "leapwallet/leap-keychain-rn",
      "file": "android/src/main/java/com/leapkeychainrn/LeapKeychainRnPackage.kt",
      "url": "https://github.com/leapwallet/leap-keychain-rn/blob/2ce0cfe56ccd98690f5535f51835565fc0f94926/android/src/main/java/com/leapkeychainrn/LeapKeychainRnPackage.kt",
      "fileContent": "package com.leapkeychainrn\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\nclass LeapKeychainRnPackage : TurboReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == LeapKeychainRnModule.NAME) {\n      LeapKeychainRnModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n      moduleInfos[LeapKeychainRnModule.NAME] = ReactModuleInfo(\n        LeapKeychainRnModule.NAME,\n        LeapKeychainRnModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        isTurboModule // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 2,
      "lastCommitDate": "2024-12-03T11:39:33Z"
    },
    {
      "repository": "jpudysz/turbo-contacts",
      "file": "turbo-contacts/android/src/main/java/com/turbocontacts/TurboContactsPackage.kt",
      "url": "https://github.com/jpudysz/turbo-contacts/blob/c4088e95a71d83c562e148a354b9d815d01d910c/turbo-contacts/android/src/main/java/com/turbocontacts/TurboContactsPackage.kt",
      "fileContent": "package com.turbocontacts;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\n\nclass TurboContactsPackage : TurboReactPackage() {\n    override fun getModule(name: String?, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == TurboContactsModule.NAME) {\n            TurboContactsModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider() = ReactModuleInfoProvider {\n        mapOf(\n            TurboContactsModule.NAME to ReactModuleInfo(\n                TurboContactsModule.NAME,\n                TurboContactsModule.NAME,\n                false,\n                false,\n                true,\n                false,\n                true\n            )\n        )\n    }\n}\n",
      "stars": 4,
      "lastCommitDate": "2023-09-07T18:08:02Z"
    },
    {
      "repository": "Notificare/notificare-sdk-react-native",
      "file": "packages/react-native-notificare-inbox/android/src/main/java/re/notifica/inbox/react_native/NotificareInboxPackage.kt",
      "url": "https://github.com/Notificare/notificare-sdk-react-native/blob/8d9f7b299835b6b67050e1a1562e02b26e814b19/packages/react-native-notificare-inbox/android/src/main/java/re/notifica/inbox/react_native/NotificareInboxPackage.kt",
      "fileContent": "package re.notifica.inbox.react_native\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.module.model.ReactModuleInfo\nimport java.util.HashMap\n\npublic class NotificareInboxPackage : TurboReactPackage() {\n    override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n        return if (name == NotificareInboxModule.NAME) {\n            NotificareInboxModule(reactContext)\n        } else {\n            null\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n        return ReactModuleInfoProvider {\n            val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n            val isTurboModule: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n\n            @Suppress(\"DEPRECATION\")\n            moduleInfos[NotificareInboxModule.NAME] = ReactModuleInfo(\n                NotificareInboxModule.NAME,\n                NotificareInboxModule.NAME,\n                false,  // canOverrideExistingModule\n                false,  // needsEagerInit\n                true,  // hasConstants\n                false,  // isCxxModule\n                isTurboModule // isTurboModule\n            )\n            moduleInfos\n        }\n    }\n}\n",
      "stars": 6,
      "lastCommitDate": "2024-10-30T16:49:15Z"
    },
    {
      "repository": "dipankur007/react-native-light-sensor-android",
      "file": "android/src/main/java/com/lightsensor/LightSensorPackage.kt",
      "url": "https://github.com/dipankur007/react-native-light-sensor-android/blob/30d111389bc9cb6326b270f6a84e289f89c9c978/android/src/main/java/com/lightsensor/LightSensorPackage.kt",
      "fileContent": "package com.lightsensor\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport java.util.HashMap\n\nclass LightSensorPackage : BaseReactPackage() {\n  override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {\n    return if (name == LightSensorModule.NAME) {\n      LightSensorModule(reactContext)\n    } else {\n      null\n    }\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider {\n    return ReactModuleInfoProvider {\n      val moduleInfos: MutableMap<String, ReactModuleInfo> = HashMap()\n      moduleInfos[LightSensorModule.NAME] = ReactModuleInfo(\n        LightSensorModule.NAME,\n        LightSensorModule.NAME,\n        false,  // canOverrideExistingModule\n        false,  // needsEagerInit\n        true,  // hasConstants\n        false,  // isCxxModule\n        true // isTurboModule\n      )\n      moduleInfos\n    }\n  }\n}\n",
      "stars": 0,
      "lastCommitDate": "2024-12-05T14:11:56Z"
    },
    {
      "repository": "gfreezy/TurboNativeTemplage",
      "file": "android/src/main/java/com/rtncalculator/CalculatorPackage.kt",
      "url": "https://github.com/gfreezy/TurboNativeTemplage/blob/8806f0ed7f3313fa806733a1a692f3e74708413f/android/src/main/java/com/rtncalculator/CalculatorPackage.kt",
      "fileContent": "package com.rtncalculator;\n\nimport com.facebook.react.TurboReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.turbomodule.core.interfaces.TurboModule\n\nclass CalculatorPackage : TurboReactPackage() {\n\n    companion object {\n        const val Name = \"NativeCalculatorModule\"\n    }\n\n    override fun getModule(name: String?, reactContext: ReactApplicationContext): NativeModule {\n        return object : TurboModule, NativeModule {\n            override fun getName(): String = Name\n\n            override fun initialize() {}\n\n            override fun invalidate() {}\n\n            override fun canOverrideExistingModule(): Boolean = false\n\n            @Deprecated(\"Deprecated in Java\")\n            override fun onCatalystInstanceDestroy() {}\n        }\n    }\n\n    override fun getReactModuleInfoProvider(): ReactModuleInfoProvider = ReactModuleInfoProvider {\n        mapOf(\n            Name to ReactModuleInfo(\n                Name,\n                Name,\n                false, // canOverrideExistingModule\n                false, // needsEagerInit\n                true, // hasConstants\n                false, // isCxxModule\n                true // isTurboModule\n            )\n        )\n    }\n}",
      "stars": 0,
      "lastCommitDate": "2023-11-18T10:16:39Z"
    }
  ]
}
